@startuml
title Integrated UML Diagram for the Generator API System

package "Flask API Application" {
    class FlaskApp {
        + Initialize the app
        + Configure logging
        + Define routes
        + Run the app
    }

    class Logger {
        + Log to file
        + Log to console
    }
}

package "Request Handling" {
    class Request {
        + Parse JSON data
        + Validate parameters
        + Process request
        + Return response
    }

    class JSONData {
        + Extract data fields
    }
}

package "OpenAI API Interaction" {
    class OpenAI {
        + api_key
        + ChatCompletion.create()
    }
}

package "Environment Configuration" {
    class Load_Dotenv {
        + Load environment variables from .env file
    }
}

package "Repository Management" {
    class Repo {
        + clone_from()
    }

    class Clone_Repository {
        + clone_repository()
    }

    class Retrieve_Code {
        + retrieve_code()
    }
}

package "UML Diagram Generation" {
    class Generate_UML_Diagram {
        + openai_generate_uml_diagram()
        + openai_save_uml_diagram()
    }

    class Handlers {
        + RotatingFileHandler()
    }
}

package "File and System Operations" {
    class OS {
        + getenv()
        + mkdtemp()
    }

    class Tempfile {
        + mkdtemp()
    }

    class Subprocess {
        + mkdtemp()
    }

    class Shutil {
        + rmtree()
    }
}

package "Utility Scripts" {
    class Execute_Generate_UML {
        + json.load()
        + json.dumps()
    }

    class Current_Dir {
        + os.path.dirname()
        + os.path.abspath()
    }
}

FlaskApp --> Logger : uses
FlaskApp --> Request : processes
FlaskApp --> JSONData : extracts data fields from

Request --> Logger : logs info/error
Request --> JSONData : gets data fields
Request --> FlaskApp : returns response

OpenAI --> Request : provides generated content
OpenAI --> Load_Dotenv : gets API key

Load_Dotenv --> OS : uses

Repo --> Clone_Repository : uses
Clone_Repository --> Retrieve_Code : uses
Retrieve_Code --> Request : provides retrieved code

Generate_UML_Diagram --> Handlers : uses logging handler
Generate_UML_Diagram --> OpenAI : uses API to generate UML

OS --> Execute_Generate_UML : provides system functions
OS --> FlaskApp : provides environment vars
OS --> Generate_UML_Diagram : provides temp directory management

Tempfile --> Generate_UML_Diagram : provides temp directory management
Subprocess --> Generate_UML_Diagram : provides process management
Shutil --> Generate_UML_Diagram : provides directory removal

Execute_Generate_UML --> Current_Dir : reads from config
Execute_Generate_UML --> Request : sends post request

@enduml
