@startuml
title uml_from_repo.py
t_repo = clone_repo(git_repo_url, output_directory)  # Clone the git repository to the output directory
    if git_repo is not None:
        retrieve_code(output_directory)  # Get all code files from the cloned repository
        generate_content(output_directory)  # Generate UML diagrams from the retrieved code

@startuml

title UML Diagram for uml_from_repo.py

class uml_from_repo {

    - log_directory : string
    - log_filename : string
    - log_handler : handlers.RotatingFileHandler
    - log_formatter : logging.Formatter
    - logger : logging.Logger

    + process_request(data) : void

}

class git {
    - repo_url : string

    + clone_repo(repo_url, output_directory) : git
}

class code_to_uml {
    - output_directory : string

    + retrieve_code(output_directory) : void
    + generate_content(output_directory) : void
}

uml_from_repo *-- logging
logging *-- handlers.RotatingFileHandler
logging *-- logging.Formatter
logging *-- logging.Logger

uml_from_repo *-- routes.retrieve_code
uml_from_repo *-- routes.code_to_uml

routes.retrieve_code *-- git
routes.code_to_uml *-- code_to_uml

@enduml)


@startuml

class data {
    + gitHubAccessToken
    + branchName
}

class logger {
    + error(message)
    + info(message)
}

class tempfile {
    + mkdtemp()
}

class Exception

class shutil {
    + rmtree(directory)
}

class repo {
    + clone_repo(git_repo_url, temp_dir, github_access_token)
}

class config

class json {
    + load(file)
}

data <|-- git_repo_url
data <|-- output_directory
data <|-- github_access_token
data <|-- branch_name
logger --> data
tempfile --> logger
Exception <|-- logger
shutil --> logger
repo <|-- git_repo_url
repo <|-- temp_dir
repo <|-- github_access_token
config <|-- json
json <|-- f

if (not git_repo_url or not output_directory or not github_access_token or not branch_name) then (yes)
    logger: error("Missing required parameters")
    : return {"error": "Missing required parameters"}, 400
elseif (not git_repo_url or not output_directory or not github_access_token or not branch_name) then (no)
endif

: temp_dir = None
try
    tempfile: mkdtemp()
catch (Exception e)
    logger: error(f"Error during UML generation: {str(e)}", exc_info=True)
    : return {"error": str(e)}, 500
finally
    if temp_dir is not None then (yes)
        logger: info("Cleaning up temporary directory")
        shutil: rmtree(temp_dir)
endif

repo: clone_repo(git_repo_url, temp_dir, github_access_token)

: with open('src/routes/config.json', 'r') as f
json: load(f)
json --> config

@endumlt_diagram(
            included_files, output_directory=output_directory)
        
        
@startuml
class TraverseDirectories:
    - included_files
    - repo : Repository
    - temp_dir : string
    - config : dict
    + traverse_directories(repo, temp_dir, config) : dict
    + included_files : dict
    + logger : logger
    + generate_content_diagram(included_files, output_directory) : string
@enduml