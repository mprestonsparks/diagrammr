[
  {
    "details": {
      "Output Paths": [
        [
          "/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output/code_to_uml.py.puml",
          "/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output/retrieve_code.py.puml",
          "/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output/uml_from_repo.py.puml",
          "/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output/execute_generate_uml.py.puml"
        ],
        "fo(f\"Generating UML diagram for {file_path}\")  # Log the file path\n        file_paths.append(file_path)  # Store the file path in the list\n        generated_code += api.generate(code)  # Generate code for the files and concatenate the results\n    logging.info(f\"Generated code: {generated_code}\")  # Log the generated code\n    api.create_diagram(generated_code, output_directory)  # Create a UML diagram using the API and the generated code\n\n# main function\nif __name__ == '__main__':\n    # Define input files and output directory\n    files = {\n        'main.py': 'Code for the main function',\n        'helper.py': 'Code for helper functions'\n    }\n    output_directory = 'diagrams'\n    # Generate UML diagram for the files and save to output directory\n    generate_content(files, output_directory)\n\n@startuml\n\n[*] --> code_to_uml\n\nclass code_to_uml.py {\n+ api: OpenAIAPI\n+ log_directory: String\n+ log_filename: String\n+ log_handler: RotatingFileHandler\n+ log_formatter: Formatter\n+ logger: logging\n+ generate_content(): void\n+ main(): void\n}\n\ncode_to_uml.py --> OpenAIAPI\ncode_to_uml.py --> logging\n\nclass OpenAIAPI {\n+ generate(): String\n+ create_diagram(): void\n}\n\nclass logging {\n+ handlers: handlers\n+ formatter: Formatter\nlogger: debug\ninfo\n}\n\ncode_to_uml.py --> main.py\ncode_to_uml.py --> helper.py\n\nclass main.py {\n}\n\nclass helper.py {\n}\n\nmain.py --> generate_content()\nhelper.py --> generate_content()\n\ngenerate_content() --> logging\nlogging --> log_directory\nlogging --> log_filename\nlogging --> log_handler\nlogging --> log_formatter\nlogging --> logger\nlogger --> logging: debug, info\nlogging --> file_paths\nlogging --> generated_code\ngenerate_content() --> api: create_diagram()\napi --> generate()\ngenerate() --> api: generate()\ngenerate() --> code\ngenerate() --> output\napi --> create_diagram()\ncreate_diagram() --> generated_code\ncreate_diagram() --> output_directory\n\n@enduml@startuml\n\nclass UMLGenerator {\n    -generated_code: str\n    -file_paths: list\n    +fo(): void\n    +generate_from_code(): str\n    +save_generated_output(): str\n    +file_name: str\n    +final_output_path: str\n    +logging: Logger\n    +api: API\n    +output_directory: str\n    +file_path: str\n    +generated_code_for_file: str\n    +file_paths: list\n}\n\nUMLGenerator o-- Logger\nUMLGenerator o-- API\n\nclass Logger {\n    +info(): void\n    +error(): void\n}\n\nclass API {\n    +generate_from_code(): str\n    +save_generated_output(): str\n}\n\nclass API {\n    +file_path: str\n}\n\nclass API {\n    +generated_code_for_file: str\n}\n\nclass API {\n    +output_directory: str\n}\n\nclass API {\n    +final_output_path: str\n}\n\nclass os {\n    +basename(): str\n}\n\nUMLGenerator --> Logger: uses\nUMLGenerator --> API: uses\nUMLGenerator --> generated_code_for_file: aggregates\nUMLGenerator --> file_paths: aggregates\nUMLGenerator --> logging: uses\nUMLGenerator --> output_directory: contains\nUMLGenerator --> file_path: contains\nUMLGenerator --> generated_code: aggregates\n\n@endumlreturn True\n    except Exception as e:\n        logger.error(f\"Error cloning repository: {repo_url} - {e}\")\n        return False\n\n\ndef retrieve_code(repo_url, temp_dir, access_token, dest_dir, branch='master'):\n    # Clone the repository to a temporary directory\n    cloned = clone_repo(repo_url, temp_dir, access_token)\n    \n    if cloned:\n        try:\n            repo = git.Repo(temp_dir)\n            # Checkout the specified branch\n            repo.git.checkout(branch)\n            # Copy the files to the destination directory\n            os.system(f'cp -r {temp_dir}/* {dest_dir}')\n            logger.info(f\"Successfully retrieved code from {repo_url}\")\n            return True\n        except Exception as e:\n            logger.error(f\"Error retrieving code from {repo_url} - {e}\")\n            return False\n\n\n@startuml\n\nclass GitManager {\n    - repo_url : string\n    - temp_dir : string\n    - access_token : string\n    - dest_dir : string\n    - branch : string\n    + clone_repo(repo_url, temp_dir, access_token) : boolean\n    + retrieve_code(repo_url, temp_dir, access_token, dest_dir, branch='master') : boolean\n}\n\nnote left of GitManager: Uses git\\nlibrary\n\nclass git.Repo {\n    + clone_from(repo_url, temp_dir) : git.Repo\n    + git : GitCommandType\n}\n\nclass os {\n    + makedirs(directory, exist_ok=False) : None\n    + system(command) : int\n}\n\nGitManager .. git.Repo : uses\nGitManager .. os : uses\n\n@endumlif file.path.endswith('.py') and file.path not in ignore_list:  # Only include files that match the .py extension and are not in the ignore list\n                included_files[file.path] = file.data_stream.read().decode(\"utf-8\")  # Store the file path as the key and the code as the value\n                \n        return included_files  # Return the dictionary of included files\n    except Exception as e:\n        logger.error(f\"Failed to retrieve code: {str(e)}\")\n        raise ValueError(f\"Failed to retrieve code: {str(e)}\")\n\n\n\n@startuml\n\nclass Repo {\n    -path : str\n    -tree : list\n    -remote : str\n    -branches : list\n    +git : Repository\n    +clone() : Repository\n    +fetch() : Repository\n    +checkout(branch_name : str) : void\n    +tree() : list\n}\n\nclass Logger {\n    +error(message : str) : void\n    +info(message : str) : void\n}\n\nclass File {\n    -path : str\n    -data_stream : Stream\n    +read() : str\n}\n\nclass Config {\n    -file_path : str\n    -ignore_list : list\n    -include_list : list\n    +load() : dict\n    +get_ignore_list() : list\n    +get_include_list() : list\n}\n\nclass CodeRetriever {\n    -repo : Repo\n    -branch_name : str\n    +retrieve_code(repo : Repo, branch_name : str) : dict\n}\n\nCodeRetriever --> Repo : dependency\nCodeRetriever --> Logger : dependency\nCodeRetriever --> Config : dependency\nRepo --> File : contains\nConfig --> File : contains\n\ncode {\n\nCodeRetriever --> Logger : usage\nCodeRetriever --> Repo : method call\nRepo --> Logger : usage\nRepo --> Config : method call\nRepo --> File : method call\nRepo --> Stream : method call\n\n}\n\nexception {\nCodeRetriever --> ValueError : raise\nCodeRetriever --> Exception : catch\nRepo --> Exception : catch\n}\n\n\n@enduml@startuml\nclass FileUtils{\n    -include_list: str[]\n    -ignore_list: str[]\n    -included_files: dict\n    -logger: Logger\n    \n    +__init__(include_list: str[], ignore_list: str[])\n    +retrieve_code(files: str[]): dict\n}\n\nclass Logger{\n    +info(msg: str)\n    +warning(msg: str)\n    +error(msg: str)\n}\n\nclass File{\n    -path: str\n    -abspath: str\n    \n    +endswith(ext: str)\n}\n\nFile <|-- FileUtils\nLogger <|-- FileUtils\n\nnote top: \"Main control flow\" as MainControlFlow\nMainControlFlow ..> FileUtils\n\nMainControlFlow --> if any(file.path.endswith(ext) for ext in include_list)\nMainControlFlow --> not any(ignored_file in file.path for ignored_file in ignore_list)\n\nif any(file.path.endswith(ext) for ext in include_list) ..> File\nnot any(ignored_file in file.path for ignored_file in ignore_list) ..> File\n\nif any(file.path.endswith(ext) for ext in include_list) ==> open\nnot any(ignored_file in file.path for ignored_file in ignore_list) ==> open\n\nopen --> with open(file.abspath, 'r') as f\nopen --> try..except\n\nwith open(file.abspath, 'r') as f --> included_files[file.path] = f.read()\ntry..except --> print\ntry..except --> logger.warning\ntry..except --> FileNotFoundError\n\nprint --> \"Diagnostic print statement\"\n\nLogger <--: logger\nlogger ..> MainControlFlow\n\nincluded_files[file.path] = f.read() ==> logger.info(f\"Included file: {file.path}\")\n\nFileNotFoundError ..> print\nFileNotFoundError ..> logger.warning\n\nLogger <--: logger\nlogger ..> MainControlFlow\n\nprint --> \"Ignoring missing file: {file.path}\"\nlogger.warning(f\"Ignoring missing file: {file.path}\") ==> print\n\nMainControlFlow --> return included_files\n\nMainControlFlow --> Logger.error\n\nLogger ..> MainControlFlow\n\nnote bottom: Catch all exceptions\\nand raise ValueError as needed\n\nLogger.error ==> raise ValueError(f\"Failed to retrieve code: {str(e)}\")\nraise ValueError(f\"Failed to retrieve code: {str(e)}\") --> return included_files\n\nMainControlFlow ..> Logger\nLogger ..> raise: ValueError\nLogger ..> except: Exception\n\nnote left: Calling code as follows:\\ninclude_list = ['.py', '.txt']\\nignore_list = ['tests', 'temp']\\nfiles = ['test.py', 'index.txt', 'app.py', 'tests/utils.py', 'temp/index.txt']\\n\nnote left: Include list: ['.py', '.txt']\\nIgnore list: ['tests', 'temp']\\nFiles: ['test.py', 'index.txt', 'app.py', 'tests/utils.py', 'temp/index.txt']\n@enduml)\n\n        # Generate UML diagrams\n        for diagram in config['diagrams']:\n            plantuml = PlantUML()\n            for file in diagram['files']:\n                plantuml.process_file(file)\n            plantuml.run(output_directory)\n\nClass Diagram:\n@startuml\nclass MainController\nEntity thub_access_token\nEntity branch_name\nEntity git_repo_url\nEntity output_directory\n\nMainController -- thub_access_token : has\nMainController -- branch_name : has\nMainController -- git_repo_url : has\nMainController -- output_directory : has\n\nMainController : -logger\nMainController : -temp_dir\n\nnote top of MainController\nmain controller\nend note\n@enduml\n\nSequence Diagram:\n@startuml\nhide footbox\ntitle UML Generation\n\nautonumber\n\nactor User\nboundary Controller\ncontrol MainController\ndatabase Database\nparticipant TryCatch\nparticipant config\nparticipant clone_repo\nparticipant PlantUML\n\nUser -> Controller: Submit request\nactivate Controller\nController -> MainController: Get parameters\nactivate MainController\nMainController -> MainController: Set default branch name\nMainController -> MainController: Check for missing parameters\ndeactivate MainController\nalt Parameters missing\nMainController -> TryCatch: Log error\nactivate TryCatch\nTryCatch --> Controller: Return error message\ndeactivate TryCatch\nelse Parameters valid\nMainController -> TryCatch: Create temporary directory\nactivate TryCatch\nalt Error creating directory\nTryCatch --> MainController: Return error message\nelse Directory created successfully\nTryCatch -> MainController: Clone repository\nactivate MainController\nMainController -> Database: Get config file\nactivate Database\nalt Config file not found\nDatabase --> MainController: Return error message\nelse Config file found\nDatabase -> MainController: Load config\nMainController -> MainController: Generate UML diagrams\nMainController -> MainController: Process each file in config\nMainController -> PlantUML: Generate UML for each file\nactivate PlantUML\nPlantUML -> output_directory: Save UML diagrams\nplantuml run\ndeactivate PlantUML\nMainController --> MainController: Return success message\nend\ndeactivate MainController\n@endumlt_from_files(included_files)\n        \n        \n@startuml\n\nclass TraverseDirectories {\n    -repo: Repository\n    -temp_dir: String\n    -config: Config\n    +included_files: Map<String, String>\n    +traverse_directories(Repo, String, Config): Map<String, String>\n}\n\nclass Repository {\n    +tree(): Tree\n}\n\nclass Tree {\n    +traverse(): Iterable<TreeItem>\n}\n\nclass TreeItem {\n    -type: String\n    -path: String\n}\n\nclass Config {\n    -include: List<String>\n}\n\nclass Logger {\n    +debug(message: String): void\n    +info(message: String): void\n}\n\nclass GenerateContent {\n    +generate_content_from_files(files: Map<String, String>): List<String>\n}\n\nTraverseDirectories --> Repository\nTraverseDirectories --> Config\nTraverseDirectories --> Logger\nTraverseDirectories --> GenerateContent\nTraverseDirectories o-- Map\n\nRepository --> Tree\n\nTree --> TreeItem\n\nGenerateContent <-- TraverseDirectories\n\nGenerateContent --> Logger\nGenerateContent o-- Map\n\nLogger <-- TraverseDirectories\nLogger <-- GenerateContent\n\n\nConfig <.. TraverseDirectories\nConfig <.. GenerateContent\n\n@enduml@enduml\n\n@startuml\n\nclass t {\n  - included_files\n  - output_directory\n  + logger\n  + final_output_paths\n  + git_repo_url\n  + temp_dir\n  + e\n  + t(included_files, output_directory)\n  + generate_UML()\n}\n\nt..>logger: uses\nt-->\"output_paths\": contains\nt-->output_paths: \"is a list\"\nt-->git_repo_url\nt-->temp_dir: \"contains\"\nt-->e: \"contains\"\nt-->generate_UML: \"calls\"\noutput_paths..>\"output_directory\": in\ngit_repo_url-->\"Repository\": in\ne-->500: \"returns\"\nt-->500: \"returns\"\ntemp_dir-->\"Cleaning up temporary directory\": logs\ne-->\"Error during UML generation:\": logs\noutput_paths-->\"Log the path where each UML diagram was saved\": logs\n\ngenerate_UML-->\"UML diagram saved at\": logs\noutput_paths..>\"Final output paths\": in\nt-->t(included_files, output_directory): \"calls\"\nt-->{json}: returns\n{json}-->\"message\": in\n{json}-->\"details\": in\n{json}-->\"Repository\": in\n{json}-->\"Output Paths\": in\n{json}-->t: returns\n\n@endumlrrent_dir, 'config.json')\n\n@startuml\n\nclass Config\n    Current_dir : string\n    Config_file_path : string\n    + get_config() : dict\n    + update_config(config) : void\n\nConfig --> Current_dir\nConfig --> Config_file_path\nConfig --o logger\n\n\nclass Logger\n    + log_handler : RotatingFileHandler\n    + log_formatter : Formatter\n    + logger : Logger\n    + set_handler(handler) : void\n    + set_formatter(formatter) : void\n    + add_handler(handler) : void\n    + set_level(level) : void\n    + log(msg, level) : void\n\nLogger --o log_handler\nLogger --o log_formatter\nLogger --o logger\n\n\nclass UmlGenerator\n    + config : Config\n    + logger : Logger\n    + execute() : void\n    + generate_uml() : void\n    + save_file(content) : void\n\nUmlGenerator --o config\nUmlGenerator --o logger\n\nclass RequestManager\n    + api_url : string\n    + config : Config\n    + logger : Logger\n    + get_umls(concepts) : list\n    + process_request(response) : dict\n    + send_request(params) : json\n\nRequestManager --o config\nRequestManager --o logger\n\nclass DOTEnv\n    + load_dotenv() : void\n\nDOTEnv --o UmlGenerator\n\nclass JsonManager\n    + config_file_path : string\n    + get_data() : dict\n    + update_data(new_data) : void\n\nJsonManager --o Config\nJsonManager --o Config_file_path\n\nclass OS\n    + get_current_dir() : string\n\nOS --o Config\nOS --o Current_dir\n\nclass Requests\n    + get(url) : json\n\nRequests --o RequestManager\n\n\n@enduml\n\nThe diagram shows the classes and their relationships within the code. The JSON and OS classes have been added based on their usage in the code. The DOTEnv class is dependent on the UmlGenerator class as it is used within its code. The Config class is also dependent on the Logger class for handling logging. The UmlGenerator class uses the Config and Logger classes for its functionality, while also using the RequestManager class to handle API requests. All of these classes are used within the main program.Check if the response was successful\n    if response.status_code == 200:\n        # Save the UML diagram to a file\n        with open('diagram.png', 'wb') as f:\n            f.write(response.content)\nexc\n\n@startuml\nclass ConfigData {\n    - String gitHubAccessToken\n    - String local_dir\n}\nclass RequestSender {\n    - String url\n    - Map headers\n    + json_data\n    + response\n}\nnote right of ConfigData: read from JSON file\nConfigData -- RequestSender : <m>\nRequestSender --|> ConfigData : has-a\nnote bottom of RequestSender: uses url and headers\n@enduml@startuml\n\nclass Client {\n    - output_dir : String\n    + main() : void\n}\n\nclass Server {\n    - response : String\n    + getResponse() : String\n}\n\nClient o-- Server : makeRequest()\nClient o-- Logger : Log exception\nClient o-- os : outputDirExist()\nClient o-- json : saveResponse()\n\nclass Logger {\n    - ERROR : String\n    + logError(e: Exception) : void\n}\n\nClient --> output_dir\n\n@enduml"
      ],
      "Repository": "https://github.com/mprestonsparks/diagrammr.git"
    },
    "message": "UML diagrams generated successfully"
  },
  200
]