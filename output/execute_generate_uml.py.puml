@startuml
title execute_generate_uml.py
rrent_dir, 'config.json')

@startuml
Class Importer {
    - json
    - os
    - requests
    - logging
    - load_dotenv
    - log_handler
    - log_formatter
    - logger
    - current_dir
    - config_file_path

    + LoadEnvVariables() 
    + ConfigureLogging() 
    + __init__()
}

Class LoadEnvVariables {
    - dotenv 

    + loadDotEnv()
}

Class ConfigureLogging {
    - os
    - handlers
    - log_directory
    - log_filename
    - log_handler
    - log_formatter
    - logger
    - level

    + __init__()
    + setLogFile()
    + setFormatter()
    + setLevel()
}

Class CurrentDirectory {
    - os
    - absPath

    + __init__()
    + getCurrentDirectory()
}

Class ConfigurationFile {
    - os
    - current_dir
    - fileName

    + __init__()
    + getPath()
}

Class LogDirectory {
    - os
    - parent_dir
    - directory

    + __init__()
    + makeDirectory()
}

Importer --> LoadEnvVariables
Importer --> ConfigureLogging
Importer --> CurrentDirectory
Importer --> ConfigurationFile
LoadEnvVariables --> dotenv
ConfigureLogging --> os
ConfigureLogging --> handlers
ConfigureLogging --> logger
CurrentDirectory --> os
CurrentDirectory --> absPath
ConfigurationFile --> os
ConfigurationFile --> current_dir
ConfigurationFile --> fileName
LogDirectory --> os
LogDirectory --> parent_dir
LogDirectory --> directory

@endumlWrite the response to a file
    with open(os.path.join(current_dir, 'uml_diagram.png'), 'wb') as uml_file:
        uml_file.write(response.content)

except requests.exceptions.RequestException as e:
    logging.error(f'An error occurred while making the request: {e}')

@startuml

class UMLCreator {
    - current_dir: string
    - config_file_path: string
    - config_data: json
    - github_token: string
    - url: string
    - headers: dict

    + UMLCreator(current_dir, config_file_path)

    + read_config()
    + get_github_token()
    + generate_diagram()
}

UMLCreator --right--> JSONConverter
UMLCreator --down--> GithubTokenRetriever
UMLCreator --down--> HttpRequester
class JSONConverter {
    + convert_to_json()
}
class GithubTokenRetriever {
    + retrieve_token()
    - github_token: string
}

class HttpRequester {
    + send_post_request()
    + set_url()
    + set_headers()
    - url: string
    - headers: dict
}

@enduml@startuml

class PrintResponse {
    - response: Object
    + print(response) : void
}

class SaveToFile {
    - output_dir: String
    - output_file: Object
    - response: Object

    + saveToFile(response) : void
}

class Log {
    + log(message) : void
}

PrintResponse --> SaveToFile
SaveToFile --> Log

@enduml