2024-01-20 19:06:23,362 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2024-01-20 19:06:23,363 - INFO - [33mPress CTRL+C to quit[0m
2024-01-20 19:06:23,363 - INFO -  * Restarting with stat
2024-01-20 19:06:23,632 - WARNING -  * Debugger is active!
2024-01-20 19:06:23,639 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 19:06:39,941 - INFO - Received JSON data: {'gitRepoUrl': 'https://github.com/mprestonsparks/diagrammr.git', 'local_dir': '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output', 'gitHubAccessToken': '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'}
2024-01-20 19:06:39,941 - INFO - Received gitRepoUrl: https://github.com/mprestonsparks/diagrammr.git
2024-01-20 19:06:39,941 - INFO - Received local_dir: ./output
2024-01-20 19:06:39,941 - INFO - Received gitHubAccessToken: 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
2024-01-20 19:06:39,942 - INFO - Cloning repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 19:06:39,944 - DEBUG - Failed checking if running in CYGWIN due to: FileNotFoundError(2, 'No such file or directory')
2024-01-20 19:06:39,945 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpbbekutlj'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 19:06:44,334 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpbbekutlj'])'s unused stdout: 
2024-01-20 19:06:44,335 - INFO - Successfully cloned repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 19:06:44,335 - INFO - Attempting to checkout branch: master
2024-01-20 19:06:44,335 - DEBUG - Popen(['git', 'fetch'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpbbekutlj, stdin=None, shell=False, universal_newlines=False)
2024-01-20 19:06:44,749 - DEBUG - Popen(['git', 'checkout', 'master'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpbbekutlj, stdin=None, shell=False, universal_newlines=False)
2024-01-20 19:06:44,851 - INFO - Successfully checked out branch: master
2024-01-20 19:06:44,852 - DEBUG - Popen(['git', 'cat-file', '--batch-check'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpbbekutlj, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 19:06:44,858 - DEBUG - Popen(['git', 'cat-file', '--batch'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpbbekutlj, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 19:06:44,863 - INFO - Cleaning up temporary directory
2024-01-20 19:06:44,863 - INFO - Cloning repository: https://github.com/mprestonsparks/diagrammr.git
2024-01-20 19:06:44,864 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpkqfxvvxf'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 19:06:49,875 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpkqfxvvxf'])'s unused stdout: 
2024-01-20 19:06:49,877 - DEBUG - Popen(['git', 'cat-file', '--batch-check'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpkqfxvvxf, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 19:06:49,884 - DEBUG - Popen(['git', 'cat-file', '--batch'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpkqfxvvxf, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 19:06:49,890 - DEBUG - Type of included_files: <class 'dict'>
2024-01-20 19:06:49,891 - DEBUG - Value of included_files: {}
2024-01-20 19:06:49,891 - INFO - Saving UML diagram to /Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output
2024-01-20 19:06:49,891 - INFO - Files to process: {}
2024-01-20 19:06:49,891 - INFO - Generated file paths: []
2024-01-20 19:06:49,891 - INFO - Final output paths: []
2024-01-20 19:06:49,891 - INFO - Cleaning up temporary directory
2024-01-20 19:06:50,049 - INFO - 127.0.0.1 - - [20/Jan/2024 19:06:50] "POST /generate-uml HTTP/1.1" 200 -
2024-01-20 19:14:43,354 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2024-01-20 19:14:43,355 - INFO - [33mPress CTRL+C to quit[0m
2024-01-20 19:14:43,355 - INFO -  * Restarting with stat
2024-01-20 19:14:43,621 - WARNING -  * Debugger is active!
2024-01-20 19:14:43,626 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 19:14:49,817 - INFO - Received JSON data: {'gitRepoUrl': 'https://github.com/mprestonsparks/diagrammr.git', 'local_dir': '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output', 'gitHubAccessToken': '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'}
2024-01-20 19:14:49,817 - INFO - Received gitRepoUrl: https://github.com/mprestonsparks/diagrammr.git
2024-01-20 19:14:49,817 - INFO - Received local_dir: ./output
2024-01-20 19:14:49,817 - INFO - Received gitHubAccessToken: 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
2024-01-20 19:14:49,819 - INFO - Cloning repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 19:14:49,822 - DEBUG - Failed checking if running in CYGWIN due to: FileNotFoundError(2, 'No such file or directory')
2024-01-20 19:14:49,823 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpkyeff0se'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 19:14:54,258 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpkyeff0se'])'s unused stdout: 
2024-01-20 19:14:54,259 - INFO - Successfully cloned repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 19:14:54,260 - INFO - Attempting to checkout branch: master
2024-01-20 19:14:54,260 - DEBUG - Popen(['git', 'fetch'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpkyeff0se, stdin=None, shell=False, universal_newlines=False)
2024-01-20 19:14:54,535 - DEBUG - Popen(['git', 'checkout', 'master'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpkyeff0se, stdin=None, shell=False, universal_newlines=False)
2024-01-20 19:14:54,624 - INFO - Successfully checked out branch: master
2024-01-20 19:14:54,625 - DEBUG - Popen(['git', 'cat-file', '--batch-check'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpkyeff0se, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 19:14:54,630 - DEBUG - Popen(['git', 'cat-file', '--batch'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpkyeff0se, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 19:14:54,636 - INFO - Cleaning up temporary directory
2024-01-20 19:14:54,636 - INFO - Cloning repository: https://github.com/mprestonsparks/diagrammr.git
2024-01-20 19:14:54,636 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpj9hnqzng'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 19:15:07,373 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpj9hnqzng'])'s unused stdout: 
2024-01-20 19:15:07,375 - DEBUG - Popen(['git', 'cat-file', '--batch-check'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpj9hnqzng, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 19:15:07,381 - DEBUG - Popen(['git', 'cat-file', '--batch'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpj9hnqzng, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 19:15:07,385 - DEBUG - Type of included_files: <class 'dict'>
2024-01-20 19:15:07,385 - DEBUG - Value of included_files: {}
2024-01-20 19:15:07,385 - INFO - Saving UML diagram to /Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output
2024-01-20 19:15:07,385 - INFO - Files to process: {}
2024-01-20 19:15:07,386 - INFO - Generated file paths: []
2024-01-20 19:15:07,386 - INFO - Final output paths: []
2024-01-20 19:15:07,386 - INFO - Cleaning up temporary directory
2024-01-20 19:15:07,546 - INFO - 127.0.0.1 - - [20/Jan/2024 19:15:07] "POST /generate-uml HTTP/1.1" 200 -
2024-01-20 19:20:39,641 - INFO -  * Detected change in '/Users/preston/Documents/gitRepos/diagrammr/src/app.py', reloading
2024-01-20 19:20:39,709 - INFO -  * Restarting with stat
2024-01-20 19:20:40,002 - WARNING -  * Debugger is active!
2024-01-20 19:20:40,006 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 19:21:44,199 - INFO -  * Detected change in '/Users/preston/Documents/gitRepos/diagrammr/src/app.py', reloading
2024-01-20 19:21:44,257 - INFO -  * Restarting with stat
2024-01-20 19:21:44,531 - WARNING -  * Debugger is active!
2024-01-20 19:21:44,536 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 19:22:04,223 - INFO -  * Detected change in '/Users/preston/Documents/gitRepos/diagrammr/src/app.py', reloading
2024-01-20 19:22:04,280 - INFO -  * Restarting with stat
2024-01-20 19:22:04,572 - WARNING -  * Debugger is active!
2024-01-20 19:22:04,578 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 19:22:20,642 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2024-01-20 19:22:20,643 - INFO - [33mPress CTRL+C to quit[0m
2024-01-20 19:22:20,643 - INFO -  * Restarting with stat
2024-01-20 19:22:20,907 - WARNING -  * Debugger is active!
2024-01-20 19:22:20,912 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 19:22:27,706 - INFO - Received JSON data: {'gitRepoUrl': 'https://github.com/mprestonsparks/diagrammr.git', 'local_dir': '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output', 'gitHubAccessToken': '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'}
2024-01-20 19:22:27,706 - INFO - Received gitRepoUrl: https://github.com/mprestonsparks/diagrammr.git
2024-01-20 19:22:27,706 - INFO - Received local_dir: ./output
2024-01-20 19:22:27,706 - INFO - Received gitHubAccessToken: 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
2024-01-20 19:22:27,707 - INFO - Cloning repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 19:22:27,709 - DEBUG - Failed checking if running in CYGWIN due to: FileNotFoundError(2, 'No such file or directory')
2024-01-20 19:22:27,709 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpbfhv9_pg'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 19:22:33,419 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpbfhv9_pg'])'s unused stdout: 
2024-01-20 19:22:33,420 - INFO - Successfully cloned repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 19:22:33,420 - INFO - Contents of the cloned repository: ['.DS_Store', 'requirements.txt', '__init__.py', 'README.md', 'logs', '.gitignore', 'execute_generate_uml.log', 'uml_generation.log', '.github', 'venv', '.git', 'main.log', 'src']
2024-01-20 19:22:33,421 - INFO - Cleaning up temporary directory
2024-01-20 19:22:33,421 - INFO - Cloning repository: https://github.com/mprestonsparks/diagrammr.git
2024-01-20 19:22:33,421 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpnrnlm8d7'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 19:22:37,997 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpnrnlm8d7'])'s unused stdout: 
2024-01-20 19:22:37,999 - DEBUG - Popen(['git', 'cat-file', '--batch-check'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpnrnlm8d7, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 19:22:38,005 - DEBUG - Popen(['git', 'cat-file', '--batch'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpnrnlm8d7, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 19:22:38,010 - DEBUG - Type of included_files: <class 'dict'>
2024-01-20 19:22:38,010 - DEBUG - Value of included_files: {}
2024-01-20 19:22:38,010 - INFO - Saving UML diagram to /Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output
2024-01-20 19:22:38,010 - INFO - Files to process: {}
2024-01-20 19:22:38,010 - INFO - Generated file paths: []
2024-01-20 19:22:38,010 - INFO - Final output paths: []
2024-01-20 19:22:38,010 - INFO - Cleaning up temporary directory
2024-01-20 19:22:38,158 - ERROR - Error: name 'code' is not defined
2024-01-20 19:22:38,158 - INFO - 127.0.0.1 - - [20/Jan/2024 19:22:38] "[35m[1mPOST /generate-uml HTTP/1.1[0m" 500 -
2024-01-20 19:22:50,918 - INFO -  * Detected change in '/Users/preston/Documents/gitRepos/diagrammr/src/app.py', reloading
2024-01-20 19:22:50,978 - INFO -  * Restarting with stat
2024-01-20 19:22:51,274 - WARNING -  * Debugger is active!
2024-01-20 19:22:51,280 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 19:22:55,980 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2024-01-20 19:22:55,980 - INFO - [33mPress CTRL+C to quit[0m
2024-01-20 19:22:55,981 - INFO -  * Restarting with stat
2024-01-20 19:22:56,245 - WARNING -  * Debugger is active!
2024-01-20 19:22:56,250 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 19:23:00,209 - INFO - Received JSON data: {'gitRepoUrl': 'https://github.com/mprestonsparks/diagrammr.git', 'local_dir': '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output', 'gitHubAccessToken': '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'}
2024-01-20 19:23:00,209 - INFO - Received gitRepoUrl: https://github.com/mprestonsparks/diagrammr.git
2024-01-20 19:23:00,209 - INFO - Received local_dir: ./output
2024-01-20 19:23:00,209 - INFO - Received gitHubAccessToken: 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
2024-01-20 19:23:00,210 - INFO - Cloning repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 19:23:00,212 - DEBUG - Failed checking if running in CYGWIN due to: FileNotFoundError(2, 'No such file or directory')
2024-01-20 19:23:00,213 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpltewl2rw'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 19:23:04,901 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpltewl2rw'])'s unused stdout: 
2024-01-20 19:23:04,903 - INFO - Successfully cloned repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 19:23:04,903 - INFO - Contents of the cloned repository: ['.DS_Store', 'requirements.txt', '__init__.py', 'README.md', 'logs', '.gitignore', 'execute_generate_uml.log', 'uml_generation.log', '.github', 'venv', '.git', 'main.log', 'src']
2024-01-20 19:23:04,903 - INFO - Cleaning up temporary directory
2024-01-20 19:23:04,903 - INFO - Cloning repository: https://github.com/mprestonsparks/diagrammr.git
2024-01-20 19:23:04,903 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmp_nhmnihp'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 19:23:08,782 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmp_nhmnihp'])'s unused stdout: 
2024-01-20 19:23:08,784 - DEBUG - Popen(['git', 'cat-file', '--batch-check'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmp_nhmnihp, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 19:23:08,790 - DEBUG - Popen(['git', 'cat-file', '--batch'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmp_nhmnihp, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 19:23:08,795 - DEBUG - Type of included_files: <class 'dict'>
2024-01-20 19:23:08,795 - DEBUG - Value of included_files: {}
2024-01-20 19:23:08,795 - INFO - Saving UML diagram to /Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output
2024-01-20 19:23:08,795 - INFO - Files to process: {}
2024-01-20 19:23:08,795 - INFO - Generated file paths: []
2024-01-20 19:23:08,795 - INFO - Final output paths: []
2024-01-20 19:23:08,795 - INFO - Cleaning up temporary directory
2024-01-20 19:23:08,950 - INFO - 127.0.0.1 - - [20/Jan/2024 19:23:08] "POST /generate-uml HTTP/1.1" 200 -
2024-01-20 19:23:29,321 - INFO -  * Detected change in '/Users/preston/Documents/gitRepos/diagrammr/src/app.py', reloading
2024-01-20 19:23:29,375 - INFO -  * Restarting with stat
2024-01-20 19:23:29,649 - WARNING -  * Debugger is active!
2024-01-20 19:23:29,655 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 19:26:11,297 - INFO -  * Detected change in '/Users/preston/Documents/gitRepos/diagrammr/src/routes/code_to_uml.py', reloading
2024-01-20 19:26:11,360 - INFO -  * Restarting with stat
2024-01-20 19:26:11,643 - WARNING -  * Debugger is active!
2024-01-20 19:26:11,648 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 19:26:19,446 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2024-01-20 19:26:19,446 - INFO - [33mPress CTRL+C to quit[0m
2024-01-20 19:26:19,446 - INFO -  * Restarting with stat
2024-01-20 19:26:19,712 - WARNING -  * Debugger is active!
2024-01-20 19:26:19,718 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 19:26:24,391 - INFO - Received JSON data: {'gitRepoUrl': 'https://github.com/mprestonsparks/diagrammr.git', 'local_dir': '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output', 'gitHubAccessToken': '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'}
2024-01-20 19:26:24,392 - INFO - Received gitRepoUrl: https://github.com/mprestonsparks/diagrammr.git
2024-01-20 19:26:24,392 - INFO - Received local_dir: ./output
2024-01-20 19:26:24,392 - INFO - Received gitHubAccessToken: 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
2024-01-20 19:26:24,393 - INFO - Cloning repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 19:26:24,395 - DEBUG - Failed checking if running in CYGWIN due to: FileNotFoundError(2, 'No such file or directory')
2024-01-20 19:26:24,395 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpzbjl28j2'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 19:26:29,634 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpzbjl28j2'])'s unused stdout: 
2024-01-20 19:26:29,635 - INFO - Successfully cloned repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 19:26:29,635 - INFO - Contents of the cloned repository: ['.DS_Store', 'requirements.txt', '__init__.py', 'README.md', 'logs', '.gitignore', 'execute_generate_uml.log', 'uml_generation.log', '.github', 'venv', '.git', 'main.log', 'src']
2024-01-20 19:26:29,635 - INFO - Attempting to checkout branch: master
2024-01-20 19:26:29,636 - DEBUG - Popen(['git', 'fetch'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpzbjl28j2, stdin=None, shell=False, universal_newlines=False)
2024-01-20 19:26:29,949 - DEBUG - Popen(['git', 'checkout', 'master'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpzbjl28j2, stdin=None, shell=False, universal_newlines=False)
2024-01-20 19:26:30,043 - INFO - Successfully checked out branch: master
2024-01-20 19:26:30,043 - DEBUG - Popen(['git', 'cat-file', '--batch-check'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpzbjl28j2, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 19:26:30,049 - DEBUG - Popen(['git', 'cat-file', '--batch'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpzbjl28j2, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 19:26:30,054 - ERROR - Error: process_request() takes 1 positional argument but 2 were given
2024-01-20 19:26:30,054 - INFO - 127.0.0.1 - - [20/Jan/2024 19:26:30] "[35m[1mPOST /generate-uml HTTP/1.1[0m" 500 -
2024-01-20 19:31:04,270 - INFO -  * Detected change in '/Users/preston/Documents/gitRepos/diagrammr/src/app.py', reloading
2024-01-20 19:31:04,330 - INFO -  * Restarting with stat
2024-01-20 19:31:04,617 - WARNING -  * Debugger is active!
2024-01-20 19:31:04,622 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 19:31:14,967 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2024-01-20 19:31:14,967 - INFO - [33mPress CTRL+C to quit[0m
2024-01-20 19:31:14,968 - INFO -  * Restarting with stat
2024-01-20 19:31:15,232 - WARNING -  * Debugger is active!
2024-01-20 19:31:15,237 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 19:31:24,442 - INFO - Received JSON data: {'gitRepoUrl': 'https://github.com/mprestonsparks/diagrammr.git', 'local_dir': '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output', 'gitHubAccessToken': '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'}
2024-01-20 19:31:24,442 - INFO - Received gitRepoUrl: https://github.com/mprestonsparks/diagrammr.git
2024-01-20 19:31:24,443 - INFO - Received local_dir: ./output
2024-01-20 19:31:24,443 - INFO - Received gitHubAccessToken: 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
2024-01-20 19:31:24,443 - INFO - Cloning repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 19:31:24,446 - DEBUG - Failed checking if running in CYGWIN due to: FileNotFoundError(2, 'No such file or directory')
2024-01-20 19:31:24,447 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpufc_pf4i'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 19:31:29,434 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpufc_pf4i'])'s unused stdout: 
2024-01-20 19:31:29,435 - INFO - Successfully cloned repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 19:31:29,435 - INFO - Contents of the cloned repository: ['.DS_Store', 'requirements.txt', '__init__.py', 'README.md', 'logs', '.gitignore', 'execute_generate_uml.log', 'uml_generation.log', '.github', 'venv', '.git', 'main.log', 'src']
2024-01-20 19:31:29,435 - INFO - Attempting to checkout branch: master
2024-01-20 19:31:29,435 - DEBUG - Popen(['git', 'fetch'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpufc_pf4i, stdin=None, shell=False, universal_newlines=False)
2024-01-20 19:31:29,745 - DEBUG - Popen(['git', 'checkout', 'master'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpufc_pf4i, stdin=None, shell=False, universal_newlines=False)
2024-01-20 19:31:29,838 - INFO - Successfully checked out branch: master
2024-01-20 19:31:29,839 - DEBUG - Popen(['git', 'cat-file', '--batch-check'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpufc_pf4i, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 19:31:29,845 - DEBUG - Popen(['git', 'cat-file', '--batch'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpufc_pf4i, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 19:31:29,850 - INFO - Cleaning up temporary directory
2024-01-20 19:31:29,850 - INFO - Cloning repository: https://github.com/mprestonsparks/diagrammr.git
2024-01-20 19:31:29,851 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpjdls_qbx'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 19:31:34,222 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpjdls_qbx'])'s unused stdout: 
2024-01-20 19:31:34,224 - DEBUG - Popen(['git', 'cat-file', '--batch-check'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpjdls_qbx, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 19:31:34,230 - DEBUG - Popen(['git', 'cat-file', '--batch'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpjdls_qbx, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 19:31:34,234 - DEBUG - Type of included_files: <class 'dict'>
2024-01-20 19:31:34,234 - DEBUG - Value of included_files: {}
2024-01-20 19:31:34,235 - INFO - Saving UML diagram to /Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output
2024-01-20 19:31:34,235 - INFO - Files to process: {}
2024-01-20 19:31:34,235 - INFO - Generated file paths: []
2024-01-20 19:31:34,235 - INFO - Final output paths: ([], '')
2024-01-20 19:31:34,235 - INFO - UML diagram saved at: []
2024-01-20 19:31:34,235 - INFO - UML diagram saved at: 
2024-01-20 19:31:34,235 - INFO - Cleaning up temporary directory
2024-01-20 19:31:34,385 - INFO - 127.0.0.1 - - [20/Jan/2024 19:31:34] "POST /generate-uml HTTP/1.1" 200 -
2024-01-20 19:35:18,830 - INFO -  * Detected change in '/Users/preston/Documents/gitRepos/diagrammr/src/app.py', reloading
2024-01-20 19:35:18,887 - INFO -  * Restarting with stat
2024-01-20 19:35:19,179 - WARNING -  * Debugger is active!
2024-01-20 19:35:19,185 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 19:35:23,413 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2024-01-20 19:35:23,413 - INFO - [33mPress CTRL+C to quit[0m
2024-01-20 19:35:23,413 - INFO -  * Restarting with stat
2024-01-20 19:35:23,677 - WARNING -  * Debugger is active!
2024-01-20 19:35:23,682 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 19:35:32,258 - INFO - Received JSON data: {'gitRepoUrl': 'https://github.com/mprestonsparks/diagrammr.git', 'local_dir': '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output', 'gitHubAccessToken': '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'}
2024-01-20 19:35:32,258 - INFO - Received gitRepoUrl: https://github.com/mprestonsparks/diagrammr.git
2024-01-20 19:35:32,258 - INFO - Received local_dir: ./output
2024-01-20 19:35:32,258 - INFO - Received gitHubAccessToken: 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
2024-01-20 19:35:32,259 - INFO - Cloning repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 19:35:32,261 - DEBUG - Failed checking if running in CYGWIN due to: FileNotFoundError(2, 'No such file or directory')
2024-01-20 19:35:32,261 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpai7vxoeh'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 19:35:36,722 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpai7vxoeh'])'s unused stdout: 
2024-01-20 19:35:36,724 - INFO - Successfully cloned repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 19:35:36,724 - INFO - Contents of the cloned repository: ['.DS_Store', 'requirements.txt', '__init__.py', 'README.md', 'logs', '.gitignore', 'execute_generate_uml.log', 'uml_generation.log', '.github', 'venv', '.git', 'main.log', 'src']
2024-01-20 19:35:36,725 - INFO - Cleaning up temporary directory
2024-01-20 19:35:36,725 - INFO - Cloning repository: https://github.com/mprestonsparks/diagrammr.git
2024-01-20 19:35:36,725 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpgn_teuz6'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 19:35:43,242 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpgn_teuz6'])'s unused stdout: 
2024-01-20 19:35:43,244 - DEBUG - Popen(['git', 'cat-file', '--batch-check'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpgn_teuz6, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 19:35:43,250 - DEBUG - Popen(['git', 'cat-file', '--batch'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpgn_teuz6, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 19:35:43,254 - DEBUG - Type of included_files: <class 'dict'>
2024-01-20 19:35:43,255 - DEBUG - Value of included_files: {}
2024-01-20 19:35:43,255 - INFO - Saving UML diagram to /Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output
2024-01-20 19:35:43,255 - INFO - Files to process: {}
2024-01-20 19:35:43,255 - INFO - Generated file paths: []
2024-01-20 19:35:43,255 - INFO - Final output paths: ([], '')
2024-01-20 19:35:43,255 - INFO - UML diagram saved at: []
2024-01-20 19:35:43,255 - INFO - UML diagram saved at: 
2024-01-20 19:35:43,255 - INFO - Cleaning up temporary directory
2024-01-20 19:35:43,409 - INFO - 127.0.0.1 - - [20/Jan/2024 19:35:43] "POST /generate-uml HTTP/1.1" 200 -
2024-01-20 19:49:18,443 - INFO -  * Detected change in '/Users/preston/Documents/gitRepos/diagrammr/src/routes/uml_from_repo.py', reloading
2024-01-20 19:49:18,510 - INFO -  * Restarting with stat
2024-01-20 19:49:18,782 - WARNING -  * Debugger is active!
2024-01-20 19:49:18,787 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 19:49:31,696 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2024-01-20 19:49:31,697 - INFO - [33mPress CTRL+C to quit[0m
2024-01-20 19:49:31,697 - INFO -  * Restarting with stat
2024-01-20 19:49:31,959 - WARNING -  * Debugger is active!
2024-01-20 19:49:31,964 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 19:49:38,540 - INFO - Received JSON data: {'gitRepoUrl': 'https://github.com/mprestonsparks/diagrammr.git', 'local_dir': '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output', 'gitHubAccessToken': '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'}
2024-01-20 19:49:38,540 - INFO - Received gitRepoUrl: https://github.com/mprestonsparks/diagrammr.git
2024-01-20 19:49:38,540 - INFO - Received local_dir: ./output
2024-01-20 19:49:38,540 - INFO - Received gitHubAccessToken: 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
2024-01-20 19:49:38,542 - INFO - Cloning repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 19:49:38,544 - DEBUG - Failed checking if running in CYGWIN due to: FileNotFoundError(2, 'No such file or directory')
2024-01-20 19:49:38,545 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpssd6vdkj'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 19:49:43,344 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpssd6vdkj'])'s unused stdout: 
2024-01-20 19:49:43,346 - INFO - Successfully cloned repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 19:49:43,346 - INFO - Contents of the cloned repository: ['.DS_Store', 'requirements.txt', '__init__.py', 'README.md', 'logs', '.gitignore', 'execute_generate_uml.log', 'uml_generation.log', '.github', 'venv', '.git', 'main.log', 'src']
2024-01-20 19:49:43,347 - INFO - Cleaning up temporary directory
2024-01-20 19:49:43,347 - INFO - Cloning repository: https://github.com/mprestonsparks/diagrammr.git
2024-01-20 19:49:43,347 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmp4re89e9f'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 19:49:48,290 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmp4re89e9f'])'s unused stdout: 
2024-01-20 19:49:48,292 - DEBUG - Popen(['git', 'cat-file', '--batch-check'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmp4re89e9f, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 19:49:48,298 - DEBUG - Popen(['git', 'cat-file', '--batch'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmp4re89e9f, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 19:49:48,319 - DEBUG - Type of included_files: <class 'dict'>
2024-01-20 19:49:48,319 - DEBUG - Value of included_files: {}
2024-01-20 19:49:48,319 - INFO - Saving UML diagram to /Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output
2024-01-20 19:49:48,319 - INFO - Files to process: {}
2024-01-20 19:49:48,319 - INFO - Generated file paths: []
2024-01-20 19:49:48,319 - INFO - Final output paths: ([], '')
2024-01-20 19:49:48,319 - INFO - UML diagram saved at: []
2024-01-20 19:49:48,319 - INFO - UML diagram saved at: 
2024-01-20 19:49:48,319 - INFO - Cleaning up temporary directory
2024-01-20 19:49:48,477 - INFO - 127.0.0.1 - - [20/Jan/2024 19:49:48] "POST /generate-uml HTTP/1.1" 200 -
2024-01-20 19:51:36,849 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2024-01-20 19:51:36,849 - INFO - [33mPress CTRL+C to quit[0m
2024-01-20 19:51:36,850 - INFO -  * Restarting with stat
2024-01-20 19:51:37,113 - WARNING -  * Debugger is active!
2024-01-20 19:51:37,119 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 19:51:45,760 - INFO - Received JSON data: {'gitRepoUrl': 'https://github.com/mprestonsparks/diagrammr.git', 'local_dir': '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output', 'gitHubAccessToken': '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'}
2024-01-20 19:51:45,761 - INFO - Received gitRepoUrl: https://github.com/mprestonsparks/diagrammr.git
2024-01-20 19:51:45,761 - INFO - Received local_dir: ./output
2024-01-20 19:51:45,761 - INFO - Received gitHubAccessToken: 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
2024-01-20 19:51:45,762 - INFO - Cloning repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 19:51:45,764 - DEBUG - Failed checking if running in CYGWIN due to: FileNotFoundError(2, 'No such file or directory')
2024-01-20 19:51:45,765 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpvi030e1h'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 19:51:50,464 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpvi030e1h'])'s unused stdout: 
2024-01-20 19:51:50,465 - INFO - Successfully cloned repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 19:51:50,465 - INFO - Contents of the cloned repository: ['.DS_Store', 'requirements.txt', '__init__.py', 'README.md', 'logs', '.gitignore', 'execute_generate_uml.log', 'uml_generation.log', '.github', 'venv', '.git', 'main.log', 'src']
2024-01-20 19:51:50,465 - INFO - Cleaning up temporary directory
2024-01-20 19:51:50,466 - INFO - Cloning repository: https://github.com/mprestonsparks/diagrammr.git
2024-01-20 19:51:50,466 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmprkzfgz_2'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 19:51:54,932 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmprkzfgz_2'])'s unused stdout: 
2024-01-20 19:51:54,934 - DEBUG - Popen(['git', 'cat-file', '--batch-check'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmprkzfgz_2, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 19:51:54,939 - DEBUG - Popen(['git', 'cat-file', '--batch'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmprkzfgz_2, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 19:51:54,960 - DEBUG - Type of included_files: <class 'dict'>
2024-01-20 19:51:54,960 - DEBUG - Value of included_files: {}
2024-01-20 19:51:54,960 - INFO - Saving UML diagram to /Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output
2024-01-20 19:51:54,960 - INFO - Files to process: {}
2024-01-20 19:51:54,960 - INFO - Generated file paths: []
2024-01-20 19:51:54,960 - INFO - Final output paths: ([], '')
2024-01-20 19:51:54,960 - INFO - UML diagram saved at: []
2024-01-20 19:51:54,960 - INFO - UML diagram saved at: 
2024-01-20 19:51:54,960 - INFO - Cleaning up temporary directory
2024-01-20 19:51:55,113 - INFO - 127.0.0.1 - - [20/Jan/2024 19:51:55] "POST /generate-uml HTTP/1.1" 200 -
2024-01-20 20:05:43,263 - INFO -  * Detected change in '/Users/preston/Documents/gitRepos/diagrammr/src/routes/uml_from_repo.py', reloading
2024-01-20 20:05:43,324 - INFO -  * Restarting with stat
2024-01-20 20:05:43,617 - WARNING -  * Debugger is active!
2024-01-20 20:05:43,624 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 20:11:08,593 - INFO -  * Detected change in '/Users/preston/Documents/gitRepos/diagrammr/src/routes/uml_from_repo.py', reloading
2024-01-20 20:11:08,658 - INFO -  * Restarting with stat
2024-01-20 20:11:08,967 - WARNING -  * Debugger is active!
2024-01-20 20:11:08,972 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 20:11:15,349 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2024-01-20 20:11:15,349 - INFO - [33mPress CTRL+C to quit[0m
2024-01-20 20:11:15,349 - INFO -  * Restarting with stat
2024-01-20 20:11:15,626 - WARNING -  * Debugger is active!
2024-01-20 20:11:15,631 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 20:11:20,107 - INFO - Received JSON data: {'gitRepoUrl': 'https://github.com/mprestonsparks/diagrammr.git', 'local_dir': '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output', 'gitHubAccessToken': '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'}
2024-01-20 20:11:20,108 - INFO - Received gitRepoUrl: https://github.com/mprestonsparks/diagrammr.git
2024-01-20 20:11:20,108 - INFO - Received local_dir: ./output
2024-01-20 20:11:20,108 - INFO - Received gitHubAccessToken: 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
2024-01-20 20:11:20,108 - INFO - Cloning repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 20:11:20,111 - DEBUG - Failed checking if running in CYGWIN due to: FileNotFoundError(2, 'No such file or directory')
2024-01-20 20:11:20,112 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmp6b5zvdg_'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 20:11:24,584 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmp6b5zvdg_'])'s unused stdout: 
2024-01-20 20:11:24,585 - INFO - Successfully cloned repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 20:11:24,585 - INFO - Contents of the cloned repository: ['.DS_Store', 'requirements.txt', '__init__.py', 'README.md', 'logs', '.gitignore', 'execute_generate_uml.log', 'uml_generation.log', '.github', 'venv', '.git', 'main.log', 'src']
2024-01-20 20:11:24,585 - INFO - Cleaning up temporary directory
2024-01-20 20:11:24,586 - INFO - Cloning repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 20:11:24,586 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpolen6soa'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 20:11:29,769 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpolen6soa'])'s unused stdout: 
2024-01-20 20:11:29,770 - INFO - Successfully cloned repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 20:11:29,770 - DEBUG - Popen(['git', 'cat-file', '--batch-check'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpolen6soa, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 20:11:29,776 - DEBUG - Popen(['git', 'cat-file', '--batch'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpolen6soa, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 20:11:29,797 - DEBUG - Type of included_files: <class 'dict'>
2024-01-20 20:11:29,797 - DEBUG - Value of included_files: {}
2024-01-20 20:11:29,798 - INFO - Saving UML diagram to /Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output
2024-01-20 20:11:29,798 - INFO - Files to process: {}
2024-01-20 20:11:29,798 - INFO - Generated file paths: []
2024-01-20 20:11:29,798 - INFO - Final output paths: ([], '')
2024-01-20 20:11:29,798 - INFO - UML diagram saved at: []
2024-01-20 20:11:29,798 - INFO - UML diagram saved at: 
2024-01-20 20:11:29,798 - INFO - Cleaning up temporary directory
2024-01-20 20:11:29,945 - INFO - 127.0.0.1 - - [20/Jan/2024 20:11:29] "POST /generate-uml HTTP/1.1" 200 -
2024-01-20 20:16:42,592 - INFO -  * Detected change in '/Users/preston/Documents/gitRepos/diagrammr/src/routes/uml_from_repo.py', reloading
2024-01-20 20:16:42,651 - INFO -  * Restarting with stat
2024-01-20 20:16:42,936 - WARNING -  * Debugger is active!
2024-01-20 20:16:42,942 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 20:16:54,617 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2024-01-20 20:16:54,618 - INFO - [33mPress CTRL+C to quit[0m
2024-01-20 20:16:54,618 - INFO -  * Restarting with stat
2024-01-20 20:16:54,888 - WARNING -  * Debugger is active!
2024-01-20 20:16:54,893 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 20:16:58,558 - INFO - Received JSON data: {'gitRepoUrl': 'https://github.com/mprestonsparks/diagrammr.git', 'local_dir': '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output', 'gitHubAccessToken': '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'}
2024-01-20 20:16:58,558 - INFO - Received gitRepoUrl: https://github.com/mprestonsparks/diagrammr.git
2024-01-20 20:16:58,558 - INFO - Received local_dir: ./output
2024-01-20 20:16:58,558 - INFO - Received gitHubAccessToken: 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
2024-01-20 20:16:58,560 - INFO - Cloning repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 20:16:58,563 - DEBUG - Failed checking if running in CYGWIN due to: FileNotFoundError(2, 'No such file or directory')
2024-01-20 20:16:58,563 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpas95f0q6'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 20:17:03,094 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpas95f0q6'])'s unused stdout: 
2024-01-20 20:17:03,095 - INFO - Successfully cloned repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 20:17:03,095 - INFO - Contents of the cloned repository: ['.DS_Store', 'requirements.txt', '__init__.py', 'README.md', 'logs', '.gitignore', 'execute_generate_uml.log', 'uml_generation.log', '.github', 'venv', '.git', 'main.log', 'src']
2024-01-20 20:17:03,096 - INFO - Cleaning up temporary directory
2024-01-20 20:17:03,096 - INFO - Cloning repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 20:17:03,096 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpwcmy8olf'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 20:17:07,689 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpwcmy8olf'])'s unused stdout: 
2024-01-20 20:17:07,690 - INFO - Successfully cloned repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 20:17:07,691 - ERROR - Error during UML generation: name 'branch_name' is not defined
2024-01-20 20:17:07,691 - INFO - Cleaning up temporary directory
2024-01-20 20:17:07,836 - INFO - 127.0.0.1 - - [20/Jan/2024 20:17:07] "POST /generate-uml HTTP/1.1" 200 -
2024-01-20 20:19:48,666 - INFO -  * Detected change in '/Users/preston/Documents/gitRepos/diagrammr/src/routes/uml_from_repo.py', reloading
2024-01-20 20:19:48,722 - INFO -  * Restarting with stat
2024-01-20 20:19:49,001 - WARNING -  * Debugger is active!
2024-01-20 20:19:49,005 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 20:22:18,079 - INFO -  * Detected change in '/Users/preston/Documents/gitRepos/diagrammr/src/routes/uml_from_repo.py', reloading
2024-01-20 20:22:18,131 - INFO -  * Restarting with stat
2024-01-20 20:22:18,413 - WARNING -  * Debugger is active!
2024-01-20 20:22:18,419 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 20:22:23,590 - INFO -  * Detected change in '/Users/preston/Documents/gitRepos/diagrammr/src/routes/uml_from_repo.py', reloading
2024-01-20 20:22:23,645 - INFO -  * Restarting with stat
2024-01-20 20:22:23,931 - WARNING -  * Debugger is active!
2024-01-20 20:22:23,937 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 20:22:30,262 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2024-01-20 20:22:30,262 - INFO - [33mPress CTRL+C to quit[0m
2024-01-20 20:22:30,263 - INFO -  * Restarting with stat
2024-01-20 20:22:30,528 - WARNING -  * Debugger is active!
2024-01-20 20:22:30,533 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 20:23:21,812 - INFO - Received JSON data: {'gitRepoUrl': 'https://github.com/mprestonsparks/diagrammr.git', 'local_dir': '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output', 'gitHubAccessToken': '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'}
2024-01-20 20:23:21,812 - INFO - Received gitRepoUrl: https://github.com/mprestonsparks/diagrammr.git
2024-01-20 20:23:21,812 - INFO - Received local_dir: ./output
2024-01-20 20:23:21,812 - INFO - Received gitHubAccessToken: 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
2024-01-20 20:23:21,813 - INFO - Cloning repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 20:23:21,815 - DEBUG - Failed checking if running in CYGWIN due to: FileNotFoundError(2, 'No such file or directory')
2024-01-20 20:23:21,816 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpuwckklzw'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 20:23:26,140 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpuwckklzw'])'s unused stdout: 
2024-01-20 20:23:26,141 - INFO - Successfully cloned repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 20:23:26,142 - INFO - Contents of the cloned repository: ['.DS_Store', 'requirements.txt', '__init__.py', 'README.md', 'logs', '.gitignore', 'execute_generate_uml.log', 'uml_generation.log', '.github', 'venv', '.git', 'main.log', 'src']
2024-01-20 20:23:26,142 - INFO - Cleaning up temporary directory
2024-01-20 20:23:26,142 - INFO - Cloning repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 20:23:26,142 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpi2vx16fa'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 20:23:31,993 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpi2vx16fa'])'s unused stdout: 
2024-01-20 20:23:31,994 - INFO - Successfully cloned repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 20:23:31,995 - INFO - Attempting to checkout branch: master
2024-01-20 20:23:31,995 - DEBUG - Popen(['git', 'fetch'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpi2vx16fa, stdin=None, shell=False, universal_newlines=False)
2024-01-20 20:23:32,235 - DEBUG - Popen(['git', 'checkout', 'master'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpi2vx16fa, stdin=None, shell=False, universal_newlines=False)
2024-01-20 20:23:32,336 - INFO - Successfully checked out branch: master
2024-01-20 20:23:32,337 - DEBUG - Popen(['git', 'cat-file', '--batch-check'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpi2vx16fa, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 20:23:32,343 - DEBUG - Popen(['git', 'cat-file', '--batch'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpi2vx16fa, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 20:23:32,365 - DEBUG - Type of included_files: <class 'dict'>
2024-01-20 20:23:32,365 - DEBUG - Value of included_files: {}
2024-01-20 20:23:32,365 - INFO - Saving UML diagram to /Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output
2024-01-20 20:23:32,366 - INFO - Files to process: {}
2024-01-20 20:23:32,366 - INFO - Generated file paths: []
2024-01-20 20:23:32,366 - INFO - Final output paths: ([], '')
2024-01-20 20:23:32,366 - INFO - UML diagram saved at: []
2024-01-20 20:23:32,366 - INFO - UML diagram saved at: 
2024-01-20 20:23:32,366 - INFO - Cleaning up temporary directory
2024-01-20 20:23:32,518 - INFO - 127.0.0.1 - - [20/Jan/2024 20:23:32] "POST /generate-uml HTTP/1.1" 200 -
2024-01-20 20:32:16,150 - INFO -  * Detected change in '/Users/preston/Documents/gitRepos/diagrammr/src/routes/uml_from_repo.py', reloading
2024-01-20 20:32:16,203 - INFO -  * Restarting with stat
2024-01-20 20:32:16,475 - WARNING -  * Debugger is active!
2024-01-20 20:32:16,480 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 20:32:33,400 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2024-01-20 20:32:33,401 - INFO - [33mPress CTRL+C to quit[0m
2024-01-20 20:32:33,401 - INFO -  * Restarting with stat
2024-01-20 20:32:33,663 - WARNING -  * Debugger is active!
2024-01-20 20:32:33,667 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 20:32:43,702 - INFO - Received JSON data: {'gitRepoUrl': 'https://github.com/mprestonsparks/diagrammr.git', 'local_dir': '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output', 'gitHubAccessToken': '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'}
2024-01-20 20:32:43,703 - INFO - Received gitRepoUrl: https://github.com/mprestonsparks/diagrammr.git
2024-01-20 20:32:43,703 - INFO - Received local_dir: ./output
2024-01-20 20:32:43,703 - INFO - Received gitHubAccessToken: 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
2024-01-20 20:32:43,704 - INFO - Cloning repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 20:32:43,706 - DEBUG - Failed checking if running in CYGWIN due to: FileNotFoundError(2, 'No such file or directory')
2024-01-20 20:32:43,707 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmp825eem3e'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 20:32:47,156 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmp825eem3e'])'s unused stdout: 
2024-01-20 20:32:47,159 - INFO - Successfully cloned repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 20:32:47,159 - INFO - Contents of the cloned repository: ['.DS_Store', 'requirements.txt', '__init__.py', 'README.md', 'logs', '.gitignore', 'execute_generate_uml.log', 'uml_generation.log', '.github', 'venv', '.git', 'main.log', 'src']
2024-01-20 20:32:47,159 - INFO - Cleaning up temporary directory
2024-01-20 20:32:47,159 - INFO - Cloning repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 20:32:47,159 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpg0i_4v3d'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 20:32:51,291 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpg0i_4v3d'])'s unused stdout: 
2024-01-20 20:32:51,293 - INFO - Successfully cloned repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 20:32:51,293 - DEBUG - Popen(['git', 'cat-file', '--batch-check'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpg0i_4v3d, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 20:32:51,301 - DEBUG - Popen(['git', 'cat-file', '--batch'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpg0i_4v3d, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 20:32:51,330 - DEBUG - Type of included_files: <class 'dict'>
2024-01-20 20:32:51,330 - DEBUG - Value of included_files: {}
2024-01-20 20:32:51,330 - INFO - Saving UML diagram to /Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output
2024-01-20 20:32:51,331 - INFO - Files to process: {}
2024-01-20 20:32:51,331 - INFO - Generated file paths: []
2024-01-20 20:32:51,331 - INFO - Final output paths: ([], '')
2024-01-20 20:32:51,331 - INFO - UML diagram saved at: []
2024-01-20 20:32:51,331 - INFO - UML diagram saved at: 
2024-01-20 20:32:51,331 - INFO - Cleaning up temporary directory
2024-01-20 20:32:51,489 - INFO - 127.0.0.1 - - [20/Jan/2024 20:32:51] "POST /generate-uml HTTP/1.1" 200 -
2024-01-20 20:37:48,904 - INFO -  * Detected change in '/Users/preston/Documents/gitRepos/diagrammr/src/routes/uml_from_repo.py', reloading
2024-01-20 20:37:48,958 - INFO -  * Restarting with stat
2024-01-20 20:37:49,250 - WARNING -  * Debugger is active!
2024-01-20 20:37:49,256 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 20:46:07,526 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2024-01-20 20:46:07,527 - INFO - [33mPress CTRL+C to quit[0m
2024-01-20 20:46:07,527 - INFO -  * Restarting with stat
2024-01-20 20:46:07,789 - WARNING -  * Debugger is active!
2024-01-20 20:46:07,794 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 20:46:18,891 - INFO - Received JSON data: {'gitRepoUrl': 'https://github.com/mprestonsparks/diagrammr.git', 'local_dir': '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output', 'gitHubAccessToken': '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'}
2024-01-20 20:46:18,891 - INFO - Received gitRepoUrl: https://github.com/mprestonsparks/diagrammr.git
2024-01-20 20:46:18,891 - INFO - Received local_dir: ./output
2024-01-20 20:46:18,891 - INFO - Received gitHubAccessToken: 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
2024-01-20 20:46:18,892 - INFO - Cloning repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 20:46:18,895 - DEBUG - Failed checking if running in CYGWIN due to: FileNotFoundError(2, 'No such file or directory')
2024-01-20 20:46:18,896 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmp3s3khqlm'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 20:46:24,091 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmp3s3khqlm'])'s unused stdout: 
2024-01-20 20:46:24,093 - INFO - Successfully cloned repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 20:46:24,093 - INFO - Contents of the cloned repository: ['.DS_Store', 'requirements.txt', '__init__.py', 'README.md', 'logs', '.gitignore', 'execute_generate_uml.log', 'uml_generation.log', '.github', 'venv', '.git', 'main.log', 'src']
2024-01-20 20:46:24,093 - INFO - Cleaning up temporary directory
2024-01-20 20:46:24,093 - INFO - Cloning repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 20:46:24,093 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmp2g9xsu3h'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 20:46:28,037 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmp2g9xsu3h'])'s unused stdout: 
2024-01-20 20:46:28,038 - INFO - Successfully cloned repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 20:46:28,039 - DEBUG - Popen(['git', 'cat-file', '--batch-check'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmp2g9xsu3h, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 20:46:28,044 - DEBUG - Popen(['git', 'cat-file', '--batch'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmp2g9xsu3h, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 20:46:28,066 - DEBUG - Type of included_files: <class 'dict'>
2024-01-20 20:46:28,067 - DEBUG - Value of included_files: {}
2024-01-20 20:46:28,067 - INFO - Saving UML diagram to /Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output
2024-01-20 20:46:28,067 - INFO - Files to process: {}
2024-01-20 20:46:28,067 - INFO - Generated file paths: []
2024-01-20 20:46:28,067 - INFO - Final output paths: ([], '')
2024-01-20 20:46:28,067 - INFO - UML diagram saved at: []
2024-01-20 20:46:28,067 - INFO - UML diagram saved at: 
2024-01-20 20:46:28,067 - INFO - Cleaning up temporary directory
2024-01-20 20:46:28,226 - INFO - 127.0.0.1 - - [20/Jan/2024 20:46:28] "POST /generate-uml HTTP/1.1" 200 -
2024-01-20 20:52:32,883 - INFO -  * Detected change in '/Users/preston/Documents/gitRepos/diagrammr/src/routes/uml_from_repo.py', reloading
2024-01-20 20:52:32,946 - INFO -  * Restarting with stat
2024-01-20 20:52:33,227 - WARNING -  * Debugger is active!
2024-01-20 20:52:33,233 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 20:52:42,324 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2024-01-20 20:52:42,324 - INFO - [33mPress CTRL+C to quit[0m
2024-01-20 20:52:42,324 - INFO -  * Restarting with stat
2024-01-20 20:52:42,592 - WARNING -  * Debugger is active!
2024-01-20 20:52:42,597 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 20:52:46,235 - INFO - Received JSON data: {'gitRepoUrl': 'https://github.com/mprestonsparks/diagrammr.git', 'local_dir': '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output', 'gitHubAccessToken': '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'}
2024-01-20 20:52:46,235 - INFO - Received gitRepoUrl: https://github.com/mprestonsparks/diagrammr.git
2024-01-20 20:52:46,235 - INFO - Received local_dir: ./output
2024-01-20 20:52:46,235 - INFO - Received gitHubAccessToken: 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
2024-01-20 20:52:46,236 - INFO - Cloning repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 20:52:46,238 - DEBUG - Failed checking if running in CYGWIN due to: FileNotFoundError(2, 'No such file or directory')
2024-01-20 20:52:46,239 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpwuv96fws'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 20:52:50,910 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpwuv96fws'])'s unused stdout: 
2024-01-20 20:52:50,913 - INFO - Successfully cloned repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 20:52:50,913 - INFO - Contents of the cloned repository: ['.DS_Store', 'requirements.txt', '__init__.py', 'README.md', 'logs', '.gitignore', 'execute_generate_uml.log', 'uml_generation.log', '.github', 'venv', '.git', 'main.log', 'src']
2024-01-20 20:52:50,913 - INFO - Cleaning up temporary directory
2024-01-20 20:52:50,913 - INFO - Cloning repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 20:52:50,914 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpl6lanf6n'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 20:52:56,195 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpl6lanf6n'])'s unused stdout: 
2024-01-20 20:52:56,196 - INFO - Successfully cloned repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 20:52:56,197 - DEBUG - Popen(['git', 'cat-file', '--batch-check'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpl6lanf6n, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 20:52:56,202 - DEBUG - Popen(['git', 'cat-file', '--batch'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpl6lanf6n, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 20:52:56,225 - DEBUG - Type of included_files: <class 'dict'>
2024-01-20 20:52:56,226 - DEBUG - Value of included_files: {'src/routes/__init__.py': '', 'src/routes/generate_uml_diagram.py': 'import os\nimport subprocess\nimport json\nimport git\nimport tempfile\nimport shutil\nimport openai\nimport logging\nfrom logging import handlers  \nfrom openai_api import OpenAIAPI \nfrom routes.retrieve_code import retrieve_code\n\n# Create an instance of the OpenAI API\napi = OpenAIAPI()\n\n# Configure logging to write to a file\nlog_filename = \'uml_generation.log\'\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter(\'%(asctime)s - %(levelname)s - %(message)s\')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\n# Assume OPENAI_API_KEY is set in the environment variables\nopenai.api_key = os.getenv("OPENAI_API_KEY")\n\ndef process_uml_request(data):\n    git_repo_url = data.get(\'gitRepoUrl\')\n    output_directory = "./output"\n    github_access_token = data.get(\'gitHubAccessToken\')\n    if not git_repo_url or not output_directory or not github_access_token:\n        logging.error("Missing required parameters")\n        return {"error": "Missing required parameters"}, 400\n\n    try:\n        temp_dir = tempfile.mkdtemp()\n\n        # Clone the repository\n        logging.info(f"Cloning repository: {git_repo_url}")\n        repo = git.Repo.clone_from(git_repo_url, temp_dir, github_access_token)\n        \n        # Load the config\n        with open(\'config.json\', \'r\') as f:\n            config = json.load(f)\n        \n        # Create a new object with the files to include\n        files_to_include = {}\n        for file in repo.tree():\n            if file.path in config[\'include\']:\n                with open(file.abspath, \'r\') as f:\n                    files_to_include[file.path] = f.read()\n\n        logging.debug(f"Type of files_to_include: {type(files_to_include)}")  # Debugging statement\n        logging.debug(f"Value of files_to_include: {files_to_include}")  # Debugging statement\n\n        uml_code = generate_uml_content(files_to_include)\n\n        # Save the UML diagram to a file\n        logging.info(f"Saving UML diagram to {output_directory}")\n        final_output_path = api.save_uml_diagram(uml_code, output_directory)\n        logging.info(f"UML diagram saved at: {final_output_path}")  # Log the path where the UML diagram was saved\n\n\n        return {\n            "message": "UML diagrams generated successfully",\n            "details": {\n                "Repository": git_repo_url,\n                "Output Path": final_output_path\n            }\n        }, 200\n\n    except Exception as e:\n        logging.error(f"Error during UML generation: {str(e)}")\n        return {"error": str(e)}, 500\n\n    finally:\n        # Clean up the temporary directory\n        logging.info("Cleaning up temporary directory")\n        shutil.rmtree(temp_dir)\n\n\ndef generate_uml_content(files):\n    uml_code = ""\n    for file_path, code in files.items():\n        # Call OpenAI API to generate UML diagram for each file\n        logging.info(f"Calling OpenAI API to generate UML diagram for {file_path}")\n        uml_code_for_file = api.generate_uml_diagram(code)\n        logging.info(f"Received UML code for {file_path}: {uml_code_for_file}")  # Log the UML code received for each file\n        if not uml_code_for_file or "UML generation failed" in uml_code_for_file:\n            logging.error(f"Failed to generate UML diagram for {file_path}")\n            raise ValueError(f"Failed to generate UML diagram for {file_path}")\n        uml_code += uml_code_for_file\n    return uml_code', 'src/routes/retrieve_code.py': 'import git\nimport json\nimport os\n\ndef clone_repo(repo_url, temp_dir, access_token):\n    try:\n        # Modify the URL to include the access token\n        if access_token:\n            repo_url = repo_url.replace(\'https://\', f\'https://{access_token}@\')\n        repo = git.Repo.clone_from(repo_url, temp_dir)\n        return repo\n    except Exception as e:\n        raise ValueError(f"Failed to clone repository: {str(e)}")\n\ndef retrieve_code(repo, branch_name):\n    try:\n        print(f"Attempting to checkout branch: {branch_name}")  # Diagnostic print statement\n        repo.git.fetch()  # Fetch the latest updates from the remote\n        repo.git.checkout(branch_name)\n        \n        # Load the config\n        config_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \'config.json\')\n        with open(config_file_path, \'r\') as f:\n            config = json.load(f)\n        ignore_list = config.get(\'ignore\', [])\n        include_list = config.get(\'include\', [])\n\n        # Create a new dictionary to store file paths and their corresponding code\n        files_to_include = {}\n        for file in repo.tree():\n            if any(file.path.endswith(ext) for ext in include_list) and not any(ignored_file in file.path for ignored_file in ignore_list):\n                try:\n                    with open(file.abspath, \'r\') as f:\n                        files_to_include[file.path] = f.read()\n                except FileNotFoundError:\n                    print(f"Ignoring missing file: {file.path}")  # Diagnostic print statement\n\n        return files_to_include\n    except Exception as e:\n        raise ValueError(f"Failed to retrieve code: {str(e)}")', 'src/scripts/__init__.py': '', 'src/scripts/execute_generate_uml.py': "import json\nimport os\nimport requests\nimport tempfile\nimport logging\nfrom dotenv import load_dotenv\n\n\n# Load environment variables from .env file\nload_dotenv()\n\n# Configure logging\nlogging.basicConfig(filename='execute_generate_uml.log', level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')\n\n# Current file's directory\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\n# Configuration file path\nconfig_file_path = os.path.join(current_dir, 'config.json')\n\n# Read configuration from the JSON file\nwith open(config_file_path, 'r') as config_file:\n    config_data = json.load(config_file)\n\n# Retrieve the GitHub access token from environment variables\ngithub_token = os.getenv('GITHUB_PAT')\n\n# Endpoint URL\nurl = 'http://127.0.0.1:5000/generate-uml'\n\n# Headers\nheaders = {\n    'Content-Type': 'application/json'\n}\n\n# Update the GitHub access token in the config data\nconfig_data['gitHubAccessToken'] = github_token\n\n# Log the JSON data being sent in the request\nlogging.info(f'Sending JSON data to {url}:')\nlogging.info(json.dumps(config_data, indent=2))\n\ntry:\n    # Make the POST request\n    response = requests.post(url, headers=headers, json=config_data)\n\n    # Log the response from the server\n    logging.info(f'Response from server ({url}):')\n    logging.info(f'Status Code: {response.status_code}')\n    logging.info(f'Response Text: {response.text}')\n\n    # Print the response from the server\n    print(response.text)\n\nexcept Exception as e:\n    # Log any exceptions that occur\n    logging.error(f'Error occurred: {str(e)}')\n"}
2024-01-20 20:52:56,226 - INFO - Saving UML diagram to /Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output
2024-01-20 20:52:56,226 - INFO - Files to process: {'src/routes/__init__.py': '', 'src/routes/generate_uml_diagram.py': 'import os\nimport subprocess\nimport json\nimport git\nimport tempfile\nimport shutil\nimport openai\nimport logging\nfrom logging import handlers  \nfrom openai_api import OpenAIAPI \nfrom routes.retrieve_code import retrieve_code\n\n# Create an instance of the OpenAI API\napi = OpenAIAPI()\n\n# Configure logging to write to a file\nlog_filename = \'uml_generation.log\'\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter(\'%(asctime)s - %(levelname)s - %(message)s\')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\n# Assume OPENAI_API_KEY is set in the environment variables\nopenai.api_key = os.getenv("OPENAI_API_KEY")\n\ndef process_uml_request(data):\n    git_repo_url = data.get(\'gitRepoUrl\')\n    output_directory = "./output"\n    github_access_token = data.get(\'gitHubAccessToken\')\n    if not git_repo_url or not output_directory or not github_access_token:\n        logging.error("Missing required parameters")\n        return {"error": "Missing required parameters"}, 400\n\n    try:\n        temp_dir = tempfile.mkdtemp()\n\n        # Clone the repository\n        logging.info(f"Cloning repository: {git_repo_url}")\n        repo = git.Repo.clone_from(git_repo_url, temp_dir, github_access_token)\n        \n        # Load the config\n        with open(\'config.json\', \'r\') as f:\n            config = json.load(f)\n        \n        # Create a new object with the files to include\n        files_to_include = {}\n        for file in repo.tree():\n            if file.path in config[\'include\']:\n                with open(file.abspath, \'r\') as f:\n                    files_to_include[file.path] = f.read()\n\n        logging.debug(f"Type of files_to_include: {type(files_to_include)}")  # Debugging statement\n        logging.debug(f"Value of files_to_include: {files_to_include}")  # Debugging statement\n\n        uml_code = generate_uml_content(files_to_include)\n\n        # Save the UML diagram to a file\n        logging.info(f"Saving UML diagram to {output_directory}")\n        final_output_path = api.save_uml_diagram(uml_code, output_directory)\n        logging.info(f"UML diagram saved at: {final_output_path}")  # Log the path where the UML diagram was saved\n\n\n        return {\n            "message": "UML diagrams generated successfully",\n            "details": {\n                "Repository": git_repo_url,\n                "Output Path": final_output_path\n            }\n        }, 200\n\n    except Exception as e:\n        logging.error(f"Error during UML generation: {str(e)}")\n        return {"error": str(e)}, 500\n\n    finally:\n        # Clean up the temporary directory\n        logging.info("Cleaning up temporary directory")\n        shutil.rmtree(temp_dir)\n\n\ndef generate_uml_content(files):\n    uml_code = ""\n    for file_path, code in files.items():\n        # Call OpenAI API to generate UML diagram for each file\n        logging.info(f"Calling OpenAI API to generate UML diagram for {file_path}")\n        uml_code_for_file = api.generate_uml_diagram(code)\n        logging.info(f"Received UML code for {file_path}: {uml_code_for_file}")  # Log the UML code received for each file\n        if not uml_code_for_file or "UML generation failed" in uml_code_for_file:\n            logging.error(f"Failed to generate UML diagram for {file_path}")\n            raise ValueError(f"Failed to generate UML diagram for {file_path}")\n        uml_code += uml_code_for_file\n    return uml_code', 'src/routes/retrieve_code.py': 'import git\nimport json\nimport os\n\ndef clone_repo(repo_url, temp_dir, access_token):\n    try:\n        # Modify the URL to include the access token\n        if access_token:\n            repo_url = repo_url.replace(\'https://\', f\'https://{access_token}@\')\n        repo = git.Repo.clone_from(repo_url, temp_dir)\n        return repo\n    except Exception as e:\n        raise ValueError(f"Failed to clone repository: {str(e)}")\n\ndef retrieve_code(repo, branch_name):\n    try:\n        print(f"Attempting to checkout branch: {branch_name}")  # Diagnostic print statement\n        repo.git.fetch()  # Fetch the latest updates from the remote\n        repo.git.checkout(branch_name)\n        \n        # Load the config\n        config_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \'config.json\')\n        with open(config_file_path, \'r\') as f:\n            config = json.load(f)\n        ignore_list = config.get(\'ignore\', [])\n        include_list = config.get(\'include\', [])\n\n        # Create a new dictionary to store file paths and their corresponding code\n        files_to_include = {}\n        for file in repo.tree():\n            if any(file.path.endswith(ext) for ext in include_list) and not any(ignored_file in file.path for ignored_file in ignore_list):\n                try:\n                    with open(file.abspath, \'r\') as f:\n                        files_to_include[file.path] = f.read()\n                except FileNotFoundError:\n                    print(f"Ignoring missing file: {file.path}")  # Diagnostic print statement\n\n        return files_to_include\n    except Exception as e:\n        raise ValueError(f"Failed to retrieve code: {str(e)}")', 'src/scripts/__init__.py': '', 'src/scripts/execute_generate_uml.py': "import json\nimport os\nimport requests\nimport tempfile\nimport logging\nfrom dotenv import load_dotenv\n\n\n# Load environment variables from .env file\nload_dotenv()\n\n# Configure logging\nlogging.basicConfig(filename='execute_generate_uml.log', level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')\n\n# Current file's directory\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\n# Configuration file path\nconfig_file_path = os.path.join(current_dir, 'config.json')\n\n# Read configuration from the JSON file\nwith open(config_file_path, 'r') as config_file:\n    config_data = json.load(config_file)\n\n# Retrieve the GitHub access token from environment variables\ngithub_token = os.getenv('GITHUB_PAT')\n\n# Endpoint URL\nurl = 'http://127.0.0.1:5000/generate-uml'\n\n# Headers\nheaders = {\n    'Content-Type': 'application/json'\n}\n\n# Update the GitHub access token in the config data\nconfig_data['gitHubAccessToken'] = github_token\n\n# Log the JSON data being sent in the request\nlogging.info(f'Sending JSON data to {url}:')\nlogging.info(json.dumps(config_data, indent=2))\n\ntry:\n    # Make the POST request\n    response = requests.post(url, headers=headers, json=config_data)\n\n    # Log the response from the server\n    logging.info(f'Response from server ({url}):')\n    logging.info(f'Status Code: {response.status_code}')\n    logging.info(f'Response Text: {response.text}')\n\n    # Print the response from the server\n    print(response.text)\n\nexcept Exception as e:\n    # Log any exceptions that occur\n    logging.error(f'Error occurred: {str(e)}')\n"}
2024-01-20 20:52:56,226 - INFO - Processing file: src/routes/__init__.py
2024-01-20 20:52:56,226 - INFO - UML code generated for src/routes/__init__.py: 
2024-01-20 20:52:56,226 - ERROR - Failed to generate UML diagram for src/routes/__init__.py
2024-01-20 20:52:56,226 - ERROR - Error during UML generation: Failed to generate UML diagram for src/routes/__init__.py
2024-01-20 20:52:56,226 - INFO - Cleaning up temporary directory
2024-01-20 20:52:56,386 - INFO - 127.0.0.1 - - [20/Jan/2024 20:52:56] "POST /generate-uml HTTP/1.1" 200 -
2024-01-20 21:06:14,219 - INFO -  * Detected change in '/Users/preston/Documents/gitRepos/diagrammr/src/routes/code_to_uml.py', reloading
2024-01-20 21:06:14,280 - INFO -  * Restarting with stat
2024-01-20 21:06:14,561 - WARNING -  * Debugger is active!
2024-01-20 21:06:14,566 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 21:07:01,716 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2024-01-20 21:07:01,716 - INFO - [33mPress CTRL+C to quit[0m
2024-01-20 21:07:01,717 - INFO -  * Restarting with stat
2024-01-20 21:07:01,978 - WARNING -  * Debugger is active!
2024-01-20 21:07:01,983 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 21:07:10,652 - INFO - Received JSON data: {'gitRepoUrl': 'https://github.com/mprestonsparks/diagrammr.git', 'local_dir': '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output', 'gitHubAccessToken': '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'}
2024-01-20 21:07:10,652 - INFO - Received gitRepoUrl: https://github.com/mprestonsparks/diagrammr.git
2024-01-20 21:07:10,652 - INFO - Received local_dir: ./output
2024-01-20 21:07:10,653 - INFO - Received gitHubAccessToken: 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
2024-01-20 21:07:10,653 - INFO - Cloning repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 21:07:10,655 - DEBUG - Failed checking if running in CYGWIN due to: FileNotFoundError(2, 'No such file or directory')
2024-01-20 21:07:10,656 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmprah9fq_5'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 21:07:16,648 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmprah9fq_5'])'s unused stdout: 
2024-01-20 21:07:16,650 - INFO - Successfully cloned repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 21:07:16,650 - INFO - Contents of the cloned repository: ['.DS_Store', 'requirements.txt', 'output', '__init__.py', 'README.md', 'logs', '.gitignore', '.github', 'venv', '.git', 'src']
2024-01-20 21:07:16,650 - INFO - Cleaning up temporary directory
2024-01-20 21:07:16,650 - INFO - Cloning repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 21:07:16,650 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmppzv3twqm'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 21:07:21,380 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmppzv3twqm'])'s unused stdout: 
2024-01-20 21:07:21,381 - INFO - Successfully cloned repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 21:07:21,382 - DEBUG - Popen(['git', 'cat-file', '--batch-check'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmppzv3twqm, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 21:07:21,387 - DEBUG - Popen(['git', 'cat-file', '--batch'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmppzv3twqm, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 21:07:21,410 - DEBUG - Type of included_files: <class 'dict'>
2024-01-20 21:07:21,411 - DEBUG - Value of included_files: {'src/routes/__init__.py': '', 'src/routes/code_to_uml.py': '# code_to_uml.py\nimport os\nfrom openai_api import OpenAIAPI \nimport logging\nfrom logging import handlers  \n\n\n# Create an instance of the OpenAI API\napi = OpenAIAPI()\n\n# Configure logging to write to a file\nlog_directory = \'logs\'\n# Create the directory if it doesn\'t exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, \'code_to_uml.log\')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter(\'%(asctime)s - %(levelname)s - %(message)s\')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\n# code_to_uml.py\ndef generate_content(files, output_directory):\n    logging.info(f"Files to process: {files}")  # Log the files dictionary\n    generated_code = ""  # Initialize generated_code\n    file_paths = []  # Initialize a list to store the file paths\n    for file_path, code in files.items():\n        logging.info(f"Processing file: {file_path}")\n        generated_code_for_file = api.generate_from_code(code)\n        logging.info(f"UML code generated for {file_path}: {generated_code_for_file}")  # Log the generated UML code\n        if not generated_code_for_file or "UML generation failed" in generated_code_for_file:\n            logging.error(f"Failed to generate UML diagram for {file_path}")\n            raise ValueError(f"Failed to generate UML diagram for {file_path}")\n        generated_code += generated_code_for_file\n\n        # Save the UML code for each file to a separate .puml file\n        file_name = f"{os.path.basename(file_path)}.puml"\n        final_output_path = api.save_generated_output(generated_code_for_file, os.path.join(output_directory, file_name))\n        file_paths.append(final_output_path)  # Append the file path to the list\n\n    logging.info(f"Generated file paths: {file_paths}")\n    # Return the list of file paths and the generated code\n    return file_paths, generated_code', 'src/routes/retrieve_code.py': 'import git\nimport json\nimport os\nimport logging\nfrom logging import handlers\n\n\n# Configure logging to write to a file\nlog_directory = \'logs\'\n# Create the directory if it doesn\'t exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, \'retrieve_code.log\')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter(\'%(asctime)s - %(levelname)s - %(message)s\')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\n\ndef clone_repo(repo_url, temp_dir, access_token):\n    try:\n        # Modify the URL to include the access token\n        if access_token:\n            repo_url = repo_url.replace(\'https://\', f\'https://{access_token}@\')\n        logger.info(f"Cloning repository: {repo_url}")\n        repo = git.Repo.clone_from(repo_url, temp_dir)\n        logger.info(f"Successfully cloned repository: {repo_url}")\n        return repo\n    except Exception as e:\n        logger.error(f"Failed to clone repository: {str(e)}")\n        raise ValueError(f"Failed to clone repository: {str(e)}")\n\ndef retrieve_code(repo, branch_name):\n    try:\n        print(f"Attempting to checkout branch: {branch_name}")  # Diagnostic print statement\n        logger.info(f"Attempting to checkout branch: {branch_name}")\n        repo.git.fetch()  # Fetch the latest updates from the remote\n        repo.git.checkout(branch_name)\n        logger.info(f"Successfully checked out branch: {branch_name}")\n        \n        # Load the config\n        config_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \'config.json\')\n        with open(config_file_path, \'r\') as f:\n            config = json.load(f)\n        ignore_list = config.get(\'ignore\', [])\n        include_list = config.get(\'include\', [])\n\n        # Create a new dictionary to store file paths and their corresponding code\n        included_files = {}\n        for file in repo.tree():\n            if any(file.path.endswith(ext) for ext in include_list) and not any(ignored_file in file.path for ignored_file in ignore_list):\n                try:\n                    with open(file.abspath, \'r\') as f:\n                        included_files[file.path] = f.read()\n                    logger.info(f"Included file: {file.path}")\n                except FileNotFoundError:\n                    print(f"Ignoring missing file: {file.path}")  # Diagnostic print statement\n                    logger.warning(f"Ignoring missing file: {file.path}")\n\n        return included_files\n    except Exception as e:\n        logger.error(f"Failed to retrieve code: {str(e)}")\n        raise ValueError(f"Failed to retrieve code: {str(e)}")', 'src/routes/uml_from_repo.py': '# uml_from_repo.py\nimport os\nimport fnmatch\nimport subprocess\nimport json\nimport git\nimport tempfile\nimport shutil\nimport logging\nfrom logging import handlers  \nfrom routes.retrieve_code import clone_repo, retrieve_code\nfrom routes.code_to_uml import generate_content  # Import the function from code_to_uml.py\n\n# Configure logging to write to a file\nlog_directory = \'logs\'\n# Create the directory if it doesn\'t exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, \'uml_from_repo.log\')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter(\'%(asctime)s - %(levelname)s - %(message)s\')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\ndef process_request(data):\n    git_repo_url = data.get(\'gitRepoUrl\')\n    output_directory = data.get(\'local_dir\')  # Get the output directory from the request data\n    github_access_token = data.get(\'gitHubAccessToken\')\n    branch_name = data.get(\'branchName\', \'master\')  # \'master\' is the default branch name\n    if not git_repo_url or not output_directory or not github_access_token or not branch_name:\n        logger.error("Missing required parameters")  \n        return {"error": "Missing required parameters"}, 400\n\n    try:\n        temp_dir = None\n        try:\n            temp_dir = tempfile.mkdtemp()\n        except Exception as e:\n            logger.error(f"Error during UML generation: {str(e)}", exc_info=True)\n            return {"error": str(e)}, 500\n        finally:\n            # Clean up the temporary directory\n            if temp_dir is not None:\n                logger.info("Cleaning up temporary directory")\n                shutil.rmtree(temp_dir)\n\n        # Clone the repository\n        repo = clone_repo(git_repo_url, temp_dir, github_access_token)\n         \n        # Load the config\n        with open(\'src/routes/config.json\', \'r\') as f:\n            config = json.load(f)\n        \n        def traverse_directories(repo, temp_dir, config):\n            included_files = {}\n            for item in repo.tree().traverse():\n                if item.type == \'blob\':  # This means it\'s a file, not a directory\n                    for pattern in config[\'include\']:\n                        if fnmatch.fnmatch(item.path, pattern):\n                            with open(os.path.join(temp_dir, item.path), \'r\') as f:\n                                included_files[item.path] = f.read()\n                            break  # No need to check the remaining patterns\n            return included_files\n\n        # Retrieve the code from the repository\n        included_files = traverse_directories(repo, temp_dir, config)\n\n        logger.debug(f"Type of included_files: {type(included_files)}")\n        logger.debug(f"Value of included_files: {included_files}")\n\n        # Save the UML diagram to a file\n        logger.info(f"Saving UML diagram to {output_directory}")\n        final_output_paths = generate_content(included_files, output_directory)  # This is now a list of file paths\n        logger.info(f"Final output paths: {final_output_paths}")\n\n        for path in final_output_paths:\n            logger.info(f"UML diagram saved at: {path}")  # Log the path where each UML diagram was saved\n\n        return {\n            "message": "UML diagrams generated successfully",\n            "details": {\n                "Repository": git_repo_url,\n                "Output Paths": final_output_paths  # This is now a list of file paths\n            }\n        }, 200\n\n    except Exception as e:\n        logger.error(f"Error during UML generation: {str(e)}")\n        return {"error": str(e)}, 500\n\n    finally:\n        # Clean up the temporary directory\n        logger.info("Cleaning up temporary directory")\n        shutil.rmtree(temp_dir)\n\n ', 'src/scripts/__init__.py': '', 'src/scripts/execute_generate_uml.py': "import json\nimport os\nimport requests\nimport logging\nfrom logging import handlers\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\n# Configure logging to write to a file\nlog_directory = '../../logs'\n# Create the directory if it doesn't exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, 'execute_generate_uml.log')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\n\n# Configure logging\nlogging.basicConfig(filename='execute_generate_uml.log', level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')\n\n# Current file's directory\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\n# Configuration file path\nconfig_file_path = os.path.join(current_dir, 'config.json')\n\n# Read configuration from the JSON file\nwith open(config_file_path, 'r') as config_file:\n    config_data = json.load(config_file)\n\n# Retrieve the GitHub access token from environment variables\ngithub_token = os.getenv('GITHUB_PAT')\n\n# Endpoint URL\nurl = 'http://127.0.0.1:5000/generate-uml'\n\n# Headers\nheaders = {\n    'Content-Type': 'application/json'\n}\n\n# Update the GitHub access token and local directory in the config data\nconfig_data['gitHubAccessToken'] = github_token\nconfig_data['local_dir'] = os.path.join(current_dir, '../..', 'output')\n\n# Log the JSON data being sent in the request\nlogging.info(f'Sending JSON data to {url}:')\nlogging.info(json.dumps(config_data, indent=2))\n\ntry:\n    # Make the POST request\n    response = requests.post(url, headers=headers, json=config_data)\n\n    # Log the response from the server\n    logging.info(f'Response from server ({url}):')\n    logging.info(f'Status Code: {response.status_code}')\n    logging.info(f'Response Text: {response.text}')\n\n    # Print the response from the server\n    print(response.text)\n\n    # Save the response to a file in the output directory\n    output_dir = os.path.join(current_dir, '../..', 'output')\n    os.makedirs(output_dir, exist_ok=True)\n    with open(os.path.join(output_dir, 'response.json'), 'w') as output_file:\n        json.dump(response.json(), output_file, indent=2)\n\nexcept Exception as e:\n    # Log any exceptions that occur\n    logging.error(f'Error occurred: {str(e)}')"}
2024-01-20 21:07:21,411 - INFO - Saving UML diagram to /Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output
2024-01-20 21:07:21,411 - INFO - Files to process: {'src/routes/__init__.py': '', 'src/routes/code_to_uml.py': '# code_to_uml.py\nimport os\nfrom openai_api import OpenAIAPI \nimport logging\nfrom logging import handlers  \n\n\n# Create an instance of the OpenAI API\napi = OpenAIAPI()\n\n# Configure logging to write to a file\nlog_directory = \'logs\'\n# Create the directory if it doesn\'t exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, \'code_to_uml.log\')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter(\'%(asctime)s - %(levelname)s - %(message)s\')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\n# code_to_uml.py\ndef generate_content(files, output_directory):\n    logging.info(f"Files to process: {files}")  # Log the files dictionary\n    generated_code = ""  # Initialize generated_code\n    file_paths = []  # Initialize a list to store the file paths\n    for file_path, code in files.items():\n        logging.info(f"Processing file: {file_path}")\n        generated_code_for_file = api.generate_from_code(code)\n        logging.info(f"UML code generated for {file_path}: {generated_code_for_file}")  # Log the generated UML code\n        if not generated_code_for_file or "UML generation failed" in generated_code_for_file:\n            logging.error(f"Failed to generate UML diagram for {file_path}")\n            raise ValueError(f"Failed to generate UML diagram for {file_path}")\n        generated_code += generated_code_for_file\n\n        # Save the UML code for each file to a separate .puml file\n        file_name = f"{os.path.basename(file_path)}.puml"\n        final_output_path = api.save_generated_output(generated_code_for_file, os.path.join(output_directory, file_name))\n        file_paths.append(final_output_path)  # Append the file path to the list\n\n    logging.info(f"Generated file paths: {file_paths}")\n    # Return the list of file paths and the generated code\n    return file_paths, generated_code', 'src/routes/retrieve_code.py': 'import git\nimport json\nimport os\nimport logging\nfrom logging import handlers\n\n\n# Configure logging to write to a file\nlog_directory = \'logs\'\n# Create the directory if it doesn\'t exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, \'retrieve_code.log\')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter(\'%(asctime)s - %(levelname)s - %(message)s\')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\n\ndef clone_repo(repo_url, temp_dir, access_token):\n    try:\n        # Modify the URL to include the access token\n        if access_token:\n            repo_url = repo_url.replace(\'https://\', f\'https://{access_token}@\')\n        logger.info(f"Cloning repository: {repo_url}")\n        repo = git.Repo.clone_from(repo_url, temp_dir)\n        logger.info(f"Successfully cloned repository: {repo_url}")\n        return repo\n    except Exception as e:\n        logger.error(f"Failed to clone repository: {str(e)}")\n        raise ValueError(f"Failed to clone repository: {str(e)}")\n\ndef retrieve_code(repo, branch_name):\n    try:\n        print(f"Attempting to checkout branch: {branch_name}")  # Diagnostic print statement\n        logger.info(f"Attempting to checkout branch: {branch_name}")\n        repo.git.fetch()  # Fetch the latest updates from the remote\n        repo.git.checkout(branch_name)\n        logger.info(f"Successfully checked out branch: {branch_name}")\n        \n        # Load the config\n        config_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \'config.json\')\n        with open(config_file_path, \'r\') as f:\n            config = json.load(f)\n        ignore_list = config.get(\'ignore\', [])\n        include_list = config.get(\'include\', [])\n\n        # Create a new dictionary to store file paths and their corresponding code\n        included_files = {}\n        for file in repo.tree():\n            if any(file.path.endswith(ext) for ext in include_list) and not any(ignored_file in file.path for ignored_file in ignore_list):\n                try:\n                    with open(file.abspath, \'r\') as f:\n                        included_files[file.path] = f.read()\n                    logger.info(f"Included file: {file.path}")\n                except FileNotFoundError:\n                    print(f"Ignoring missing file: {file.path}")  # Diagnostic print statement\n                    logger.warning(f"Ignoring missing file: {file.path}")\n\n        return included_files\n    except Exception as e:\n        logger.error(f"Failed to retrieve code: {str(e)}")\n        raise ValueError(f"Failed to retrieve code: {str(e)}")', 'src/routes/uml_from_repo.py': '# uml_from_repo.py\nimport os\nimport fnmatch\nimport subprocess\nimport json\nimport git\nimport tempfile\nimport shutil\nimport logging\nfrom logging import handlers  \nfrom routes.retrieve_code import clone_repo, retrieve_code\nfrom routes.code_to_uml import generate_content  # Import the function from code_to_uml.py\n\n# Configure logging to write to a file\nlog_directory = \'logs\'\n# Create the directory if it doesn\'t exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, \'uml_from_repo.log\')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter(\'%(asctime)s - %(levelname)s - %(message)s\')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\ndef process_request(data):\n    git_repo_url = data.get(\'gitRepoUrl\')\n    output_directory = data.get(\'local_dir\')  # Get the output directory from the request data\n    github_access_token = data.get(\'gitHubAccessToken\')\n    branch_name = data.get(\'branchName\', \'master\')  # \'master\' is the default branch name\n    if not git_repo_url or not output_directory or not github_access_token or not branch_name:\n        logger.error("Missing required parameters")  \n        return {"error": "Missing required parameters"}, 400\n\n    try:\n        temp_dir = None\n        try:\n            temp_dir = tempfile.mkdtemp()\n        except Exception as e:\n            logger.error(f"Error during UML generation: {str(e)}", exc_info=True)\n            return {"error": str(e)}, 500\n        finally:\n            # Clean up the temporary directory\n            if temp_dir is not None:\n                logger.info("Cleaning up temporary directory")\n                shutil.rmtree(temp_dir)\n\n        # Clone the repository\n        repo = clone_repo(git_repo_url, temp_dir, github_access_token)\n         \n        # Load the config\n        with open(\'src/routes/config.json\', \'r\') as f:\n            config = json.load(f)\n        \n        def traverse_directories(repo, temp_dir, config):\n            included_files = {}\n            for item in repo.tree().traverse():\n                if item.type == \'blob\':  # This means it\'s a file, not a directory\n                    for pattern in config[\'include\']:\n                        if fnmatch.fnmatch(item.path, pattern):\n                            with open(os.path.join(temp_dir, item.path), \'r\') as f:\n                                included_files[item.path] = f.read()\n                            break  # No need to check the remaining patterns\n            return included_files\n\n        # Retrieve the code from the repository\n        included_files = traverse_directories(repo, temp_dir, config)\n\n        logger.debug(f"Type of included_files: {type(included_files)}")\n        logger.debug(f"Value of included_files: {included_files}")\n\n        # Save the UML diagram to a file\n        logger.info(f"Saving UML diagram to {output_directory}")\n        final_output_paths = generate_content(included_files, output_directory)  # This is now a list of file paths\n        logger.info(f"Final output paths: {final_output_paths}")\n\n        for path in final_output_paths:\n            logger.info(f"UML diagram saved at: {path}")  # Log the path where each UML diagram was saved\n\n        return {\n            "message": "UML diagrams generated successfully",\n            "details": {\n                "Repository": git_repo_url,\n                "Output Paths": final_output_paths  # This is now a list of file paths\n            }\n        }, 200\n\n    except Exception as e:\n        logger.error(f"Error during UML generation: {str(e)}")\n        return {"error": str(e)}, 500\n\n    finally:\n        # Clean up the temporary directory\n        logger.info("Cleaning up temporary directory")\n        shutil.rmtree(temp_dir)\n\n ', 'src/scripts/__init__.py': '', 'src/scripts/execute_generate_uml.py': "import json\nimport os\nimport requests\nimport logging\nfrom logging import handlers\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\n# Configure logging to write to a file\nlog_directory = '../../logs'\n# Create the directory if it doesn't exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, 'execute_generate_uml.log')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\n\n# Configure logging\nlogging.basicConfig(filename='execute_generate_uml.log', level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')\n\n# Current file's directory\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\n# Configuration file path\nconfig_file_path = os.path.join(current_dir, 'config.json')\n\n# Read configuration from the JSON file\nwith open(config_file_path, 'r') as config_file:\n    config_data = json.load(config_file)\n\n# Retrieve the GitHub access token from environment variables\ngithub_token = os.getenv('GITHUB_PAT')\n\n# Endpoint URL\nurl = 'http://127.0.0.1:5000/generate-uml'\n\n# Headers\nheaders = {\n    'Content-Type': 'application/json'\n}\n\n# Update the GitHub access token and local directory in the config data\nconfig_data['gitHubAccessToken'] = github_token\nconfig_data['local_dir'] = os.path.join(current_dir, '../..', 'output')\n\n# Log the JSON data being sent in the request\nlogging.info(f'Sending JSON data to {url}:')\nlogging.info(json.dumps(config_data, indent=2))\n\ntry:\n    # Make the POST request\n    response = requests.post(url, headers=headers, json=config_data)\n\n    # Log the response from the server\n    logging.info(f'Response from server ({url}):')\n    logging.info(f'Status Code: {response.status_code}')\n    logging.info(f'Response Text: {response.text}')\n\n    # Print the response from the server\n    print(response.text)\n\n    # Save the response to a file in the output directory\n    output_dir = os.path.join(current_dir, '../..', 'output')\n    os.makedirs(output_dir, exist_ok=True)\n    with open(os.path.join(output_dir, 'response.json'), 'w') as output_file:\n        json.dump(response.json(), output_file, indent=2)\n\nexcept Exception as e:\n    # Log any exceptions that occur\n    logging.error(f'Error occurred: {str(e)}')"}
2024-01-20 21:07:21,411 - INFO - Skipping empty file: src/routes/__init__.py
2024-01-20 21:07:21,411 - INFO - Processing file: src/routes/code_to_uml.py
2024-01-20 21:07:21,411 - INFO - Sending prompt to OpenAI: Create UML diagrams in .puml format for the following code:

# code_to_uml.py
import os
from openai_api import OpenAIAPI 
import logging
from logging import handlers  


# Create an instance of the OpenAI API
api = OpenAIAPI()

# Configure logging to write to a file
log_directory = 'logs'
# Create the directory if it doesn't exist
os.makedirs(log_directory, exist_ok=True)  
log_filename = os.path.join(log_directory, 'code_to_uml.log')
log_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation
log_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
log_handler.setFormatter(log_formatter)
logger = logging.getLogger()
logger.addHandler(log_handler)
logger.setLevel(logging.DEBUG)

# code_to_uml.py
def generate_content(files, output_directory):
    logging.info(f"Files to process: {files}")  # Log the files dictionary
    generated_code = ""  # Initialize generated_code
    file_paths = []  # Initialize a list to store the file paths
    for file_path, code in files.items():
        logging.in
2024-01-20 21:07:21,413 - DEBUG - Request options: {'method': 'post', 'url': '/completions', 'files': None, 'json_data': {'model': 'gpt-3.5-turbo-instruct', 'prompt': 'Create UML diagrams in .puml format for the following code:\n\n# code_to_uml.py\nimport os\nfrom openai_api import OpenAIAPI \nimport logging\nfrom logging import handlers  \n\n\n# Create an instance of the OpenAI API\napi = OpenAIAPI()\n\n# Configure logging to write to a file\nlog_directory = \'logs\'\n# Create the directory if it doesn\'t exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, \'code_to_uml.log\')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter(\'%(asctime)s - %(levelname)s - %(message)s\')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\n# code_to_uml.py\ndef generate_content(files, output_directory):\n    logging.info(f"Files to process: {files}")  # Log the files dictionary\n    generated_code = ""  # Initialize generated_code\n    file_paths = []  # Initialize a list to store the file paths\n    for file_path, code in files.items():\n        logging.in', 'max_tokens': 1024}}
2024-01-20 21:07:21,430 - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2024-01-20 21:07:21,510 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x105691150>
2024-01-20 21:07:21,510 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x105599b50> server_hostname='api.openai.com' timeout=5.0
2024-01-20 21:07:21,551 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10a310ad0>
2024-01-20 21:07:21,552 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-01-20 21:07:21,552 - DEBUG - send_request_headers.complete
2024-01-20 21:07:21,552 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-01-20 21:07:21,552 - DEBUG - send_request_body.complete
2024-01-20 21:07:21,553 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-01-20 21:07:21,890 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 21 Jan 2024 03:07:21 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'Cache-Control', b'no-cache, must-revalidate'), (b'openai-model', b'gpt-3.5-turbo-instruct'), (b'openai-organization', b'user-lqvxa4hv7a8o8eyohtzmcoc6'), (b'openai-processing-ms', b'86'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=15724800; includeSubDomains'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'250000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'248975'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'245ms'), (b'x-request-id', b'712220cdab056f85b2b80cd89d41b26b'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=z66C3rveUareJVjOQB8ZdR9p41KFuDB455gxQKzuVQc-1705806441-1-AZ6lKer3PTJTffuQxlY5+eXsgok6Krz2Vauq6B7HGzs8wOlDLrbbJ+zRHcyH994kIKJoCjMSFwKBN0ow8/8IIA8=; path=/; expires=Sun, 21-Jan-24 03:37:21 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Set-Cookie', b'_cfuvid=_bnaSTamA9npLqmsL9ywGSwCwQPqy6XKBIZ2zLLo4fk-1705806441880-0-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'848c58b43f2c4503-ATL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-01-20 21:07:21,895 - INFO - HTTP Request: POST https://api.openai.com/v1/completions "HTTP/1.1 200 OK"
2024-01-20 21:07:21,896 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-01-20 21:07:21,896 - DEBUG - receive_response_body.complete
2024-01-20 21:07:21,897 - DEBUG - response_closed.started
2024-01-20 21:07:21,897 - DEBUG - response_closed.complete
2024-01-20 21:07:21,897 - DEBUG - HTTP Request: POST https://api.openai.com/v1/completions "200 OK"
2024-01-20 21:07:21,902 - ERROR - Error during UML generation: 'Completion' object has no attribute 'data'
2024-01-20 21:07:21,902 - INFO - Cleaning up temporary directory
2024-01-20 21:07:22,072 - INFO - 127.0.0.1 - - [20/Jan/2024 21:07:22] "POST /generate-uml HTTP/1.1" 200 -
2024-01-20 21:15:48,588 - INFO -  * Detected change in '/Users/preston/Documents/gitRepos/diagrammr/src/app.py', reloading
2024-01-20 21:15:48,643 - INFO -  * Restarting with stat
2024-01-20 21:15:48,933 - WARNING -  * Debugger is active!
2024-01-20 21:15:48,938 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 21:15:56,490 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2024-01-20 21:15:56,490 - INFO - [33mPress CTRL+C to quit[0m
2024-01-20 21:15:56,490 - INFO -  * Restarting with stat
2024-01-20 21:15:56,752 - WARNING -  * Debugger is active!
2024-01-20 21:15:56,757 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 21:16:04,929 - INFO - Received JSON data: {'gitRepoUrl': 'https://github.com/mprestonsparks/diagrammr.git', 'local_dir': '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output', 'gitHubAccessToken': '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'}
2024-01-20 21:16:04,929 - INFO - Received gitRepoUrl: https://github.com/mprestonsparks/diagrammr.git
2024-01-20 21:16:04,929 - INFO - Received local_dir: ./output
2024-01-20 21:16:04,929 - INFO - Received gitHubAccessToken: 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
2024-01-20 21:16:04,930 - INFO - Cleaning up temporary directory
2024-01-20 21:16:04,930 - INFO - Cloning repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 21:16:04,933 - DEBUG - Failed checking if running in CYGWIN due to: FileNotFoundError(2, 'No such file or directory')
2024-01-20 21:16:04,933 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpa8_u0zmr'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 21:16:11,009 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpa8_u0zmr'])'s unused stdout: 
2024-01-20 21:16:11,011 - INFO - Successfully cloned repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 21:16:11,011 - DEBUG - Popen(['git', 'cat-file', '--batch-check'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpa8_u0zmr, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 21:16:11,017 - DEBUG - Popen(['git', 'cat-file', '--batch'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpa8_u0zmr, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 21:16:11,041 - DEBUG - Type of included_files: <class 'dict'>
2024-01-20 21:16:11,041 - DEBUG - Value of included_files: {'src/routes/__init__.py': '', 'src/routes/code_to_uml.py': '# code_to_uml.py\nimport os\nfrom openai_api import OpenAIAPI \nimport logging\nfrom logging import handlers  \n\n\n# Create an instance of the OpenAI API\napi = OpenAIAPI()\n\n# Configure logging to write to a file\nlog_directory = \'logs\'\n# Create the directory if it doesn\'t exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, \'code_to_uml.log\')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter(\'%(asctime)s - %(levelname)s - %(message)s\')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\n# code_to_uml.py\ndef generate_content(files, output_directory):\n    logging.info(f"Files to process: {files}")  # Log the files dictionary\n    generated_code = ""  # Initialize generated_code\n    file_paths = []  # Initialize a list to store the file paths\n    for file_path, code in files.items():\n        logging.info(f"Processing file: {file_path}")\n        generated_code_for_file = api.generate_from_code(code)\n        logging.info(f"UML code generated for {file_path}: {generated_code_for_file}")  # Log the generated UML code\n        if not generated_code_for_file or "UML generation failed" in generated_code_for_file:\n            logging.error(f"Failed to generate UML diagram for {file_path}")\n            raise ValueError(f"Failed to generate UML diagram for {file_path}")\n        generated_code += generated_code_for_file\n\n        # Save the UML code for each file to a separate .puml file\n        file_name = f"{os.path.basename(file_path)}.puml"\n        final_output_path = api.save_generated_output(generated_code_for_file, os.path.join(output_directory, file_name))\n        file_paths.append(final_output_path)  # Append the file path to the list\n\n    logging.info(f"Generated file paths: {file_paths}")\n    # Return the list of file paths and the generated code\n    return file_paths, generated_code', 'src/routes/retrieve_code.py': 'import git\nimport json\nimport os\nimport logging\nfrom logging import handlers\n\n\n# Configure logging to write to a file\nlog_directory = \'logs\'\n# Create the directory if it doesn\'t exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, \'retrieve_code.log\')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter(\'%(asctime)s - %(levelname)s - %(message)s\')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\n\ndef clone_repo(repo_url, temp_dir, access_token):\n    try:\n        # Modify the URL to include the access token\n        if access_token:\n            repo_url = repo_url.replace(\'https://\', f\'https://{access_token}@\')\n        logger.info(f"Cloning repository: {repo_url}")\n        repo = git.Repo.clone_from(repo_url, temp_dir)\n        logger.info(f"Successfully cloned repository: {repo_url}")\n        return repo\n    except Exception as e:\n        logger.error(f"Failed to clone repository: {str(e)}")\n        raise ValueError(f"Failed to clone repository: {str(e)}")\n\ndef retrieve_code(repo, branch_name):\n    try:\n        print(f"Attempting to checkout branch: {branch_name}")  # Diagnostic print statement\n        logger.info(f"Attempting to checkout branch: {branch_name}")\n        repo.git.fetch()  # Fetch the latest updates from the remote\n        repo.git.checkout(branch_name)\n        logger.info(f"Successfully checked out branch: {branch_name}")\n        \n        # Load the config\n        config_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \'config.json\')\n        with open(config_file_path, \'r\') as f:\n            config = json.load(f)\n        ignore_list = config.get(\'ignore\', [])\n        include_list = config.get(\'include\', [])\n\n        # Create a new dictionary to store file paths and their corresponding code\n        included_files = {}\n        for file in repo.tree():\n            if any(file.path.endswith(ext) for ext in include_list) and not any(ignored_file in file.path for ignored_file in ignore_list):\n                try:\n                    with open(file.abspath, \'r\') as f:\n                        included_files[file.path] = f.read()\n                    logger.info(f"Included file: {file.path}")\n                except FileNotFoundError:\n                    print(f"Ignoring missing file: {file.path}")  # Diagnostic print statement\n                    logger.warning(f"Ignoring missing file: {file.path}")\n\n        return included_files\n    except Exception as e:\n        logger.error(f"Failed to retrieve code: {str(e)}")\n        raise ValueError(f"Failed to retrieve code: {str(e)}")', 'src/routes/uml_from_repo.py': '# uml_from_repo.py\nimport os\nimport fnmatch\nimport subprocess\nimport json\nimport git\nimport tempfile\nimport shutil\nimport logging\nfrom logging import handlers  \nfrom routes.retrieve_code import clone_repo, retrieve_code\nfrom routes.code_to_uml import generate_content  # Import the function from code_to_uml.py\n\n# Configure logging to write to a file\nlog_directory = \'logs\'\n# Create the directory if it doesn\'t exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, \'uml_from_repo.log\')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter(\'%(asctime)s - %(levelname)s - %(message)s\')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\ndef process_request(data):\n    git_repo_url = data.get(\'gitRepoUrl\')\n    output_directory = data.get(\'local_dir\')  # Get the output directory from the request data\n    github_access_token = data.get(\'gitHubAccessToken\')\n    branch_name = data.get(\'branchName\', \'master\')  # \'master\' is the default branch name\n    if not git_repo_url or not output_directory or not github_access_token or not branch_name:\n        logger.error("Missing required parameters")  \n        return {"error": "Missing required parameters"}, 400\n\n    try:\n        temp_dir = None\n        try:\n            temp_dir = tempfile.mkdtemp()\n        except Exception as e:\n            logger.error(f"Error during UML generation: {str(e)}", exc_info=True)\n            return {"error": str(e)}, 500\n        finally:\n            # Clean up the temporary directory\n            if temp_dir is not None:\n                logger.info("Cleaning up temporary directory")\n                shutil.rmtree(temp_dir)\n\n        # Clone the repository\n        repo = clone_repo(git_repo_url, temp_dir, github_access_token)\n         \n        # Load the config\n        with open(\'src/routes/config.json\', \'r\') as f:\n            config = json.load(f)\n        \n        def traverse_directories(repo, temp_dir, config):\n            included_files = {}\n            for item in repo.tree().traverse():\n                if item.type == \'blob\':  # This means it\'s a file, not a directory\n                    for pattern in config[\'include\']:\n                        if fnmatch.fnmatch(item.path, pattern):\n                            with open(os.path.join(temp_dir, item.path), \'r\') as f:\n                                included_files[item.path] = f.read()\n                            break  # No need to check the remaining patterns\n            return included_files\n\n        # Retrieve the code from the repository\n        included_files = traverse_directories(repo, temp_dir, config)\n\n        logger.debug(f"Type of included_files: {type(included_files)}")\n        logger.debug(f"Value of included_files: {included_files}")\n\n        # Save the UML diagram to a file\n        logger.info(f"Saving UML diagram to {output_directory}")\n        final_output_paths = generate_content(included_files, output_directory)  # This is now a list of file paths\n        logger.info(f"Final output paths: {final_output_paths}")\n\n        for path in final_output_paths:\n            logger.info(f"UML diagram saved at: {path}")  # Log the path where each UML diagram was saved\n\n        return {\n            "message": "UML diagrams generated successfully",\n            "details": {\n                "Repository": git_repo_url,\n                "Output Paths": final_output_paths  # This is now a list of file paths\n            }\n        }, 200\n\n    except Exception as e:\n        logger.error(f"Error during UML generation: {str(e)}")\n        return {"error": str(e)}, 500\n\n    finally:\n        # Clean up the temporary directory\n        logger.info("Cleaning up temporary directory")\n        shutil.rmtree(temp_dir)\n\n ', 'src/scripts/__init__.py': '', 'src/scripts/execute_generate_uml.py': "import json\nimport os\nimport requests\nimport logging\nfrom logging import handlers\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\n# Configure logging to write to a file\nlog_directory = '../../logs'\n# Create the directory if it doesn't exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, 'execute_generate_uml.log')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\n\n# Configure logging\nlogging.basicConfig(filename='execute_generate_uml.log', level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')\n\n# Current file's directory\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\n# Configuration file path\nconfig_file_path = os.path.join(current_dir, 'config.json')\n\n# Read configuration from the JSON file\nwith open(config_file_path, 'r') as config_file:\n    config_data = json.load(config_file)\n\n# Retrieve the GitHub access token from environment variables\ngithub_token = os.getenv('GITHUB_PAT')\n\n# Endpoint URL\nurl = 'http://127.0.0.1:5000/generate-uml'\n\n# Headers\nheaders = {\n    'Content-Type': 'application/json'\n}\n\n# Update the GitHub access token and local directory in the config data\nconfig_data['gitHubAccessToken'] = github_token\nconfig_data['local_dir'] = os.path.join(current_dir, '../..', 'output')\n\n# Log the JSON data being sent in the request\nlogging.info(f'Sending JSON data to {url}:')\nlogging.info(json.dumps(config_data, indent=2))\n\ntry:\n    # Make the POST request\n    response = requests.post(url, headers=headers, json=config_data)\n\n    # Log the response from the server\n    logging.info(f'Response from server ({url}):')\n    logging.info(f'Status Code: {response.status_code}')\n    logging.info(f'Response Text: {response.text}')\n\n    # Print the response from the server\n    print(response.text)\n\n    # Save the response to a file in the output directory\n    output_dir = os.path.join(current_dir, '../..', 'output')\n    os.makedirs(output_dir, exist_ok=True)\n    with open(os.path.join(output_dir, 'response.json'), 'w') as output_file:\n        json.dump(response.json(), output_file, indent=2)\n\nexcept Exception as e:\n    # Log any exceptions that occur\n    logging.error(f'Error occurred: {str(e)}')"}
2024-01-20 21:16:11,041 - INFO - Saving UML diagram to /Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output
2024-01-20 21:16:11,041 - INFO - Files to process: {'src/routes/__init__.py': '', 'src/routes/code_to_uml.py': '# code_to_uml.py\nimport os\nfrom openai_api import OpenAIAPI \nimport logging\nfrom logging import handlers  \n\n\n# Create an instance of the OpenAI API\napi = OpenAIAPI()\n\n# Configure logging to write to a file\nlog_directory = \'logs\'\n# Create the directory if it doesn\'t exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, \'code_to_uml.log\')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter(\'%(asctime)s - %(levelname)s - %(message)s\')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\n# code_to_uml.py\ndef generate_content(files, output_directory):\n    logging.info(f"Files to process: {files}")  # Log the files dictionary\n    generated_code = ""  # Initialize generated_code\n    file_paths = []  # Initialize a list to store the file paths\n    for file_path, code in files.items():\n        logging.info(f"Processing file: {file_path}")\n        generated_code_for_file = api.generate_from_code(code)\n        logging.info(f"UML code generated for {file_path}: {generated_code_for_file}")  # Log the generated UML code\n        if not generated_code_for_file or "UML generation failed" in generated_code_for_file:\n            logging.error(f"Failed to generate UML diagram for {file_path}")\n            raise ValueError(f"Failed to generate UML diagram for {file_path}")\n        generated_code += generated_code_for_file\n\n        # Save the UML code for each file to a separate .puml file\n        file_name = f"{os.path.basename(file_path)}.puml"\n        final_output_path = api.save_generated_output(generated_code_for_file, os.path.join(output_directory, file_name))\n        file_paths.append(final_output_path)  # Append the file path to the list\n\n    logging.info(f"Generated file paths: {file_paths}")\n    # Return the list of file paths and the generated code\n    return file_paths, generated_code', 'src/routes/retrieve_code.py': 'import git\nimport json\nimport os\nimport logging\nfrom logging import handlers\n\n\n# Configure logging to write to a file\nlog_directory = \'logs\'\n# Create the directory if it doesn\'t exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, \'retrieve_code.log\')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter(\'%(asctime)s - %(levelname)s - %(message)s\')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\n\ndef clone_repo(repo_url, temp_dir, access_token):\n    try:\n        # Modify the URL to include the access token\n        if access_token:\n            repo_url = repo_url.replace(\'https://\', f\'https://{access_token}@\')\n        logger.info(f"Cloning repository: {repo_url}")\n        repo = git.Repo.clone_from(repo_url, temp_dir)\n        logger.info(f"Successfully cloned repository: {repo_url}")\n        return repo\n    except Exception as e:\n        logger.error(f"Failed to clone repository: {str(e)}")\n        raise ValueError(f"Failed to clone repository: {str(e)}")\n\ndef retrieve_code(repo, branch_name):\n    try:\n        print(f"Attempting to checkout branch: {branch_name}")  # Diagnostic print statement\n        logger.info(f"Attempting to checkout branch: {branch_name}")\n        repo.git.fetch()  # Fetch the latest updates from the remote\n        repo.git.checkout(branch_name)\n        logger.info(f"Successfully checked out branch: {branch_name}")\n        \n        # Load the config\n        config_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \'config.json\')\n        with open(config_file_path, \'r\') as f:\n            config = json.load(f)\n        ignore_list = config.get(\'ignore\', [])\n        include_list = config.get(\'include\', [])\n\n        # Create a new dictionary to store file paths and their corresponding code\n        included_files = {}\n        for file in repo.tree():\n            if any(file.path.endswith(ext) for ext in include_list) and not any(ignored_file in file.path for ignored_file in ignore_list):\n                try:\n                    with open(file.abspath, \'r\') as f:\n                        included_files[file.path] = f.read()\n                    logger.info(f"Included file: {file.path}")\n                except FileNotFoundError:\n                    print(f"Ignoring missing file: {file.path}")  # Diagnostic print statement\n                    logger.warning(f"Ignoring missing file: {file.path}")\n\n        return included_files\n    except Exception as e:\n        logger.error(f"Failed to retrieve code: {str(e)}")\n        raise ValueError(f"Failed to retrieve code: {str(e)}")', 'src/routes/uml_from_repo.py': '# uml_from_repo.py\nimport os\nimport fnmatch\nimport subprocess\nimport json\nimport git\nimport tempfile\nimport shutil\nimport logging\nfrom logging import handlers  \nfrom routes.retrieve_code import clone_repo, retrieve_code\nfrom routes.code_to_uml import generate_content  # Import the function from code_to_uml.py\n\n# Configure logging to write to a file\nlog_directory = \'logs\'\n# Create the directory if it doesn\'t exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, \'uml_from_repo.log\')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter(\'%(asctime)s - %(levelname)s - %(message)s\')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\ndef process_request(data):\n    git_repo_url = data.get(\'gitRepoUrl\')\n    output_directory = data.get(\'local_dir\')  # Get the output directory from the request data\n    github_access_token = data.get(\'gitHubAccessToken\')\n    branch_name = data.get(\'branchName\', \'master\')  # \'master\' is the default branch name\n    if not git_repo_url or not output_directory or not github_access_token or not branch_name:\n        logger.error("Missing required parameters")  \n        return {"error": "Missing required parameters"}, 400\n\n    try:\n        temp_dir = None\n        try:\n            temp_dir = tempfile.mkdtemp()\n        except Exception as e:\n            logger.error(f"Error during UML generation: {str(e)}", exc_info=True)\n            return {"error": str(e)}, 500\n        finally:\n            # Clean up the temporary directory\n            if temp_dir is not None:\n                logger.info("Cleaning up temporary directory")\n                shutil.rmtree(temp_dir)\n\n        # Clone the repository\n        repo = clone_repo(git_repo_url, temp_dir, github_access_token)\n         \n        # Load the config\n        with open(\'src/routes/config.json\', \'r\') as f:\n            config = json.load(f)\n        \n        def traverse_directories(repo, temp_dir, config):\n            included_files = {}\n            for item in repo.tree().traverse():\n                if item.type == \'blob\':  # This means it\'s a file, not a directory\n                    for pattern in config[\'include\']:\n                        if fnmatch.fnmatch(item.path, pattern):\n                            with open(os.path.join(temp_dir, item.path), \'r\') as f:\n                                included_files[item.path] = f.read()\n                            break  # No need to check the remaining patterns\n            return included_files\n\n        # Retrieve the code from the repository\n        included_files = traverse_directories(repo, temp_dir, config)\n\n        logger.debug(f"Type of included_files: {type(included_files)}")\n        logger.debug(f"Value of included_files: {included_files}")\n\n        # Save the UML diagram to a file\n        logger.info(f"Saving UML diagram to {output_directory}")\n        final_output_paths = generate_content(included_files, output_directory)  # This is now a list of file paths\n        logger.info(f"Final output paths: {final_output_paths}")\n\n        for path in final_output_paths:\n            logger.info(f"UML diagram saved at: {path}")  # Log the path where each UML diagram was saved\n\n        return {\n            "message": "UML diagrams generated successfully",\n            "details": {\n                "Repository": git_repo_url,\n                "Output Paths": final_output_paths  # This is now a list of file paths\n            }\n        }, 200\n\n    except Exception as e:\n        logger.error(f"Error during UML generation: {str(e)}")\n        return {"error": str(e)}, 500\n\n    finally:\n        # Clean up the temporary directory\n        logger.info("Cleaning up temporary directory")\n        shutil.rmtree(temp_dir)\n\n ', 'src/scripts/__init__.py': '', 'src/scripts/execute_generate_uml.py': "import json\nimport os\nimport requests\nimport logging\nfrom logging import handlers\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\n# Configure logging to write to a file\nlog_directory = '../../logs'\n# Create the directory if it doesn't exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, 'execute_generate_uml.log')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\n\n# Configure logging\nlogging.basicConfig(filename='execute_generate_uml.log', level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')\n\n# Current file's directory\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\n# Configuration file path\nconfig_file_path = os.path.join(current_dir, 'config.json')\n\n# Read configuration from the JSON file\nwith open(config_file_path, 'r') as config_file:\n    config_data = json.load(config_file)\n\n# Retrieve the GitHub access token from environment variables\ngithub_token = os.getenv('GITHUB_PAT')\n\n# Endpoint URL\nurl = 'http://127.0.0.1:5000/generate-uml'\n\n# Headers\nheaders = {\n    'Content-Type': 'application/json'\n}\n\n# Update the GitHub access token and local directory in the config data\nconfig_data['gitHubAccessToken'] = github_token\nconfig_data['local_dir'] = os.path.join(current_dir, '../..', 'output')\n\n# Log the JSON data being sent in the request\nlogging.info(f'Sending JSON data to {url}:')\nlogging.info(json.dumps(config_data, indent=2))\n\ntry:\n    # Make the POST request\n    response = requests.post(url, headers=headers, json=config_data)\n\n    # Log the response from the server\n    logging.info(f'Response from server ({url}):')\n    logging.info(f'Status Code: {response.status_code}')\n    logging.info(f'Response Text: {response.text}')\n\n    # Print the response from the server\n    print(response.text)\n\n    # Save the response to a file in the output directory\n    output_dir = os.path.join(current_dir, '../..', 'output')\n    os.makedirs(output_dir, exist_ok=True)\n    with open(os.path.join(output_dir, 'response.json'), 'w') as output_file:\n        json.dump(response.json(), output_file, indent=2)\n\nexcept Exception as e:\n    # Log any exceptions that occur\n    logging.error(f'Error occurred: {str(e)}')"}
2024-01-20 21:16:11,042 - INFO - Skipping empty file: src/routes/__init__.py
2024-01-20 21:16:11,042 - INFO - Processing file: src/routes/code_to_uml.py
2024-01-20 21:16:11,042 - INFO - Sending prompt to OpenAI: Create UML diagrams in .puml format for the following code:

# code_to_uml.py
import os
from openai_api import OpenAIAPI 
import logging
from logging import handlers  


# Create an instance of the OpenAI API
api = OpenAIAPI()

# Configure logging to write to a file
log_directory = 'logs'
# Create the directory if it doesn't exist
os.makedirs(log_directory, exist_ok=True)  
log_filename = os.path.join(log_directory, 'code_to_uml.log')
log_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation
log_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
log_handler.setFormatter(log_formatter)
logger = logging.getLogger()
logger.addHandler(log_handler)
logger.setLevel(logging.DEBUG)

# code_to_uml.py
def generate_content(files, output_directory):
    logging.info(f"Files to process: {files}")  # Log the files dictionary
    generated_code = ""  # Initialize generated_code
    file_paths = []  # Initialize a list to store the file paths
    for file_path, code in files.items():
        logging.in
2024-01-20 21:16:11,043 - DEBUG - Request options: {'method': 'post', 'url': '/completions', 'files': None, 'json_data': {'model': 'gpt-3.5-turbo-instruct', 'prompt': 'Create UML diagrams in .puml format for the following code:\n\n# code_to_uml.py\nimport os\nfrom openai_api import OpenAIAPI \nimport logging\nfrom logging import handlers  \n\n\n# Create an instance of the OpenAI API\napi = OpenAIAPI()\n\n# Configure logging to write to a file\nlog_directory = \'logs\'\n# Create the directory if it doesn\'t exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, \'code_to_uml.log\')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter(\'%(asctime)s - %(levelname)s - %(message)s\')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\n# code_to_uml.py\ndef generate_content(files, output_directory):\n    logging.info(f"Files to process: {files}")  # Log the files dictionary\n    generated_code = ""  # Initialize generated_code\n    file_paths = []  # Initialize a list to store the file paths\n    for file_path, code in files.items():\n        logging.in', 'max_tokens': 1024}}
2024-01-20 21:16:11,056 - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2024-01-20 21:16:11,128 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x107984ad0>
2024-01-20 21:16:11,128 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x1077a1b50> server_hostname='api.openai.com' timeout=5.0
2024-01-20 21:16:11,158 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x107a1a250>
2024-01-20 21:16:11,158 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-01-20 21:16:11,159 - DEBUG - send_request_headers.complete
2024-01-20 21:16:11,159 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-01-20 21:16:11,159 - DEBUG - send_request_body.complete
2024-01-20 21:16:11,159 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-01-20 21:16:16,115 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 21 Jan 2024 03:16:16 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'Cache-Control', b'no-cache, must-revalidate'), (b'openai-model', b'gpt-3.5-turbo-instruct'), (b'openai-organization', b'user-lqvxa4hv7a8o8eyohtzmcoc6'), (b'openai-processing-ms', b'4759'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=15724800; includeSubDomains'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'250000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'248975'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'245ms'), (b'x-request-id', b'dfaf8edaa1de0afc4cd6f0338d397261'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=9aoR2bNqPb6DOO4dUfagkT49jetl5rl5__QrM1YXiec-1705806976-1-AT9ozzNbTjQD5kkUUFgDzTzTWWcT+6nCza+7HtHRICKEfxQR3M/OKAvSQH3ydaO+1GzKcZ39ONR2Kjppx9fKcFo=; path=/; expires=Sun, 21-Jan-24 03:46:16 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Set-Cookie', b'_cfuvid=pyR4j62y5WYbHND88rmb0FnWmYr34LP43r20P5WUTRw-1705806976122-0-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'848c65a25fad4578-ATL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-01-20 21:16:16,116 - INFO - HTTP Request: POST https://api.openai.com/v1/completions "HTTP/1.1 200 OK"
2024-01-20 21:16:16,117 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-01-20 21:16:16,117 - DEBUG - receive_response_body.complete
2024-01-20 21:16:16,117 - DEBUG - response_closed.started
2024-01-20 21:16:16,117 - DEBUG - response_closed.complete
2024-01-20 21:16:16,117 - DEBUG - HTTP Request: POST https://api.openai.com/v1/completions "200 OK"
2024-01-20 21:16:16,119 - ERROR - Error during UML generation: 'Completion' object has no attribute 'data'
2024-01-20 21:16:16,119 - INFO - Cleaning up temporary directory
2024-01-20 21:16:16,290 - INFO - 127.0.0.1 - - [20/Jan/2024 21:16:16] "POST /generate-uml HTTP/1.1" 200 -
2024-01-20 21:25:40,658 - INFO -  * Detected change in '/Users/preston/Documents/gitRepos/diagrammr/src/openai_api.py', reloading
2024-01-20 21:25:40,726 - INFO -  * Restarting with stat
2024-01-20 21:25:41,024 - WARNING -  * Debugger is active!
2024-01-20 21:25:41,029 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 21:25:50,363 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2024-01-20 21:25:50,363 - INFO - [33mPress CTRL+C to quit[0m
2024-01-20 21:25:50,363 - INFO -  * Restarting with stat
2024-01-20 21:25:50,625 - WARNING -  * Debugger is active!
2024-01-20 21:25:50,630 - INFO -  * Debugger PIN: 139-904-016
2024-01-20 21:25:54,387 - INFO - Received JSON data: {'gitRepoUrl': 'https://github.com/mprestonsparks/diagrammr.git', 'local_dir': '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output', 'gitHubAccessToken': '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'}
2024-01-20 21:25:54,388 - INFO - Received gitRepoUrl: https://github.com/mprestonsparks/diagrammr.git
2024-01-20 21:25:54,388 - INFO - Received local_dir: ./output
2024-01-20 21:25:54,388 - INFO - Received gitHubAccessToken: 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
2024-01-20 21:25:54,389 - INFO - Cleaning up temporary directory
2024-01-20 21:25:54,389 - INFO - Cloning repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 21:25:54,392 - DEBUG - Failed checking if running in CYGWIN due to: FileNotFoundError(2, 'No such file or directory')
2024-01-20 21:25:54,392 - DEBUG - Popen(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpazbjj28b'], cwd=/Users/preston/Documents/gitRepos/diagrammr, stdin=None, shell=False, universal_newlines=True)
2024-01-20 21:25:58,834 - DEBUG - Cmd(['git', 'clone', '-v', '--', 'https://*****@github.com/mprestonsparks/diagrammr.git', '/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpazbjj28b'])'s unused stdout: 
2024-01-20 21:25:58,836 - INFO - Successfully cloned repository: https://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@github.com/mprestonsparks/diagrammr.git
2024-01-20 21:25:58,836 - DEBUG - Popen(['git', 'cat-file', '--batch-check'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpazbjj28b, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 21:25:58,842 - DEBUG - Popen(['git', 'cat-file', '--batch'], cwd=/var/folders/pc/c8njlgpx5t52sk4gvk520t780000gn/T/tmpazbjj28b, stdin=<valid stream>, shell=False, universal_newlines=False)
2024-01-20 21:25:58,865 - DEBUG - Type of included_files: <class 'dict'>
2024-01-20 21:25:58,865 - DEBUG - Value of included_files: {'src/routes/__init__.py': '', 'src/routes/code_to_uml.py': '# code_to_uml.py\nimport os\nfrom openai_api import OpenAIAPI \nimport logging\nfrom logging import handlers  \n\n\n# Create an instance of the OpenAI API\napi = OpenAIAPI()\n\n# Configure logging to write to a file\nlog_directory = \'logs\'\n# Create the directory if it doesn\'t exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, \'code_to_uml.log\')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter(\'%(asctime)s - %(levelname)s - %(message)s\')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\n# code_to_uml.py\ndef generate_content(files, output_directory):\n    logging.info(f"Files to process: {files}")  # Log the files dictionary\n    generated_code = ""  # Initialize generated_code\n    file_paths = []  # Initialize a list to store the file paths\n    for file_path, code in files.items():\n        logging.info(f"Processing file: {file_path}")\n        generated_code_for_file = api.generate_from_code(code)\n        logging.info(f"UML code generated for {file_path}: {generated_code_for_file}")  # Log the generated UML code\n        if not generated_code_for_file or "UML generation failed" in generated_code_for_file:\n            logging.error(f"Failed to generate UML diagram for {file_path}")\n            raise ValueError(f"Failed to generate UML diagram for {file_path}")\n        generated_code += generated_code_for_file\n\n        # Save the UML code for each file to a separate .puml file\n        file_name = f"{os.path.basename(file_path)}.puml"\n        final_output_path = api.save_generated_output(generated_code_for_file, os.path.join(output_directory, file_name))\n        file_paths.append(final_output_path)  # Append the file path to the list\n\n    logging.info(f"Generated file paths: {file_paths}")\n    # Return the list of file paths and the generated code\n    return file_paths, generated_code', 'src/routes/retrieve_code.py': 'import git\nimport json\nimport os\nimport logging\nfrom logging import handlers\n\n\n# Configure logging to write to a file\nlog_directory = \'logs\'\n# Create the directory if it doesn\'t exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, \'retrieve_code.log\')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter(\'%(asctime)s - %(levelname)s - %(message)s\')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\n\ndef clone_repo(repo_url, temp_dir, access_token):\n    try:\n        # Modify the URL to include the access token\n        if access_token:\n            repo_url = repo_url.replace(\'https://\', f\'https://{access_token}@\')\n        logger.info(f"Cloning repository: {repo_url}")\n        repo = git.Repo.clone_from(repo_url, temp_dir)\n        logger.info(f"Successfully cloned repository: {repo_url}")\n        return repo\n    except Exception as e:\n        logger.error(f"Failed to clone repository: {str(e)}")\n        raise ValueError(f"Failed to clone repository: {str(e)}")\n\ndef retrieve_code(repo, branch_name):\n    try:\n        print(f"Attempting to checkout branch: {branch_name}")  # Diagnostic print statement\n        logger.info(f"Attempting to checkout branch: {branch_name}")\n        repo.git.fetch()  # Fetch the latest updates from the remote\n        repo.git.checkout(branch_name)\n        logger.info(f"Successfully checked out branch: {branch_name}")\n        \n        # Load the config\n        config_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \'config.json\')\n        with open(config_file_path, \'r\') as f:\n            config = json.load(f)\n        ignore_list = config.get(\'ignore\', [])\n        include_list = config.get(\'include\', [])\n\n        # Create a new dictionary to store file paths and their corresponding code\n        included_files = {}\n        for file in repo.tree():\n            if any(file.path.endswith(ext) for ext in include_list) and not any(ignored_file in file.path for ignored_file in ignore_list):\n                try:\n                    with open(file.abspath, \'r\') as f:\n                        included_files[file.path] = f.read()\n                    logger.info(f"Included file: {file.path}")\n                except FileNotFoundError:\n                    print(f"Ignoring missing file: {file.path}")  # Diagnostic print statement\n                    logger.warning(f"Ignoring missing file: {file.path}")\n\n        return included_files\n    except Exception as e:\n        logger.error(f"Failed to retrieve code: {str(e)}")\n        raise ValueError(f"Failed to retrieve code: {str(e)}")', 'src/routes/uml_from_repo.py': '# uml_from_repo.py\nimport os\nimport fnmatch\nimport subprocess\nimport json\nimport git\nimport tempfile\nimport shutil\nimport logging\nfrom logging import handlers  \nfrom routes.retrieve_code import clone_repo, retrieve_code\nfrom routes.code_to_uml import generate_content  # Import the function from code_to_uml.py\n\n# Configure logging to write to a file\nlog_directory = \'logs\'\n# Create the directory if it doesn\'t exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, \'uml_from_repo.log\')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter(\'%(asctime)s - %(levelname)s - %(message)s\')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\ndef process_request(data):\n    git_repo_url = data.get(\'gitRepoUrl\')\n    output_directory = data.get(\'local_dir\')  # Get the output directory from the request data\n    github_access_token = data.get(\'gitHubAccessToken\')\n    branch_name = data.get(\'branchName\', \'master\')  # \'master\' is the default branch name\n    if not git_repo_url or not output_directory or not github_access_token or not branch_name:\n        logger.error("Missing required parameters")  \n        return {"error": "Missing required parameters"}, 400\n\n    try:\n        temp_dir = None\n        try:\n            temp_dir = tempfile.mkdtemp()\n        except Exception as e:\n            logger.error(f"Error during UML generation: {str(e)}", exc_info=True)\n            return {"error": str(e)}, 500\n        finally:\n            # Clean up the temporary directory\n            if temp_dir is not None:\n                logger.info("Cleaning up temporary directory")\n                shutil.rmtree(temp_dir)\n\n        # Clone the repository\n        repo = clone_repo(git_repo_url, temp_dir, github_access_token)\n         \n        # Load the config\n        with open(\'src/routes/config.json\', \'r\') as f:\n            config = json.load(f)\n        \n        def traverse_directories(repo, temp_dir, config):\n            included_files = {}\n            for item in repo.tree().traverse():\n                if item.type == \'blob\':  # This means it\'s a file, not a directory\n                    for pattern in config[\'include\']:\n                        if fnmatch.fnmatch(item.path, pattern):\n                            with open(os.path.join(temp_dir, item.path), \'r\') as f:\n                                included_files[item.path] = f.read()\n                            break  # No need to check the remaining patterns\n            return included_files\n\n        # Retrieve the code from the repository\n        included_files = traverse_directories(repo, temp_dir, config)\n\n        logger.debug(f"Type of included_files: {type(included_files)}")\n        logger.debug(f"Value of included_files: {included_files}")\n\n        # Save the UML diagram to a file\n        logger.info(f"Saving UML diagram to {output_directory}")\n        final_output_paths = generate_content(included_files, output_directory)  # This is now a list of file paths\n        logger.info(f"Final output paths: {final_output_paths}")\n\n        for path in final_output_paths:\n            logger.info(f"UML diagram saved at: {path}")  # Log the path where each UML diagram was saved\n\n        return {\n            "message": "UML diagrams generated successfully",\n            "details": {\n                "Repository": git_repo_url,\n                "Output Paths": final_output_paths  # This is now a list of file paths\n            }\n        }, 200\n\n    except Exception as e:\n        logger.error(f"Error during UML generation: {str(e)}")\n        return {"error": str(e)}, 500\n\n    finally:\n        # Clean up the temporary directory\n        logger.info("Cleaning up temporary directory")\n        shutil.rmtree(temp_dir)\n\n ', 'src/scripts/__init__.py': '', 'src/scripts/execute_generate_uml.py': "import json\nimport os\nimport requests\nimport logging\nfrom logging import handlers\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\n# Configure logging to write to a file\nlog_directory = '../../logs'\n# Create the directory if it doesn't exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, 'execute_generate_uml.log')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\n\n# Configure logging\nlogging.basicConfig(filename='execute_generate_uml.log', level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')\n\n# Current file's directory\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\n# Configuration file path\nconfig_file_path = os.path.join(current_dir, 'config.json')\n\n# Read configuration from the JSON file\nwith open(config_file_path, 'r') as config_file:\n    config_data = json.load(config_file)\n\n# Retrieve the GitHub access token from environment variables\ngithub_token = os.getenv('GITHUB_PAT')\n\n# Endpoint URL\nurl = 'http://127.0.0.1:5000/generate-uml'\n\n# Headers\nheaders = {\n    'Content-Type': 'application/json'\n}\n\n# Update the GitHub access token and local directory in the config data\nconfig_data['gitHubAccessToken'] = github_token\nconfig_data['local_dir'] = os.path.join(current_dir, '../..', 'output')\n\n# Log the JSON data being sent in the request\nlogging.info(f'Sending JSON data to {url}:')\nlogging.info(json.dumps(config_data, indent=2))\n\ntry:\n    # Make the POST request\n    response = requests.post(url, headers=headers, json=config_data)\n\n    # Log the response from the server\n    logging.info(f'Response from server ({url}):')\n    logging.info(f'Status Code: {response.status_code}')\n    logging.info(f'Response Text: {response.text}')\n\n    # Print the response from the server\n    print(response.text)\n\n    # Save the response to a file in the output directory\n    output_dir = os.path.join(current_dir, '../..', 'output')\n    os.makedirs(output_dir, exist_ok=True)\n    with open(os.path.join(output_dir, 'response.json'), 'w') as output_file:\n        json.dump(response.json(), output_file, indent=2)\n\nexcept Exception as e:\n    # Log any exceptions that occur\n    logging.error(f'Error occurred: {str(e)}')"}
2024-01-20 21:25:58,865 - INFO - Saving UML diagram to /Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output
2024-01-20 21:25:58,865 - INFO - Files to process: {'src/routes/__init__.py': '', 'src/routes/code_to_uml.py': '# code_to_uml.py\nimport os\nfrom openai_api import OpenAIAPI \nimport logging\nfrom logging import handlers  \n\n\n# Create an instance of the OpenAI API\napi = OpenAIAPI()\n\n# Configure logging to write to a file\nlog_directory = \'logs\'\n# Create the directory if it doesn\'t exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, \'code_to_uml.log\')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter(\'%(asctime)s - %(levelname)s - %(message)s\')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\n# code_to_uml.py\ndef generate_content(files, output_directory):\n    logging.info(f"Files to process: {files}")  # Log the files dictionary\n    generated_code = ""  # Initialize generated_code\n    file_paths = []  # Initialize a list to store the file paths\n    for file_path, code in files.items():\n        logging.info(f"Processing file: {file_path}")\n        generated_code_for_file = api.generate_from_code(code)\n        logging.info(f"UML code generated for {file_path}: {generated_code_for_file}")  # Log the generated UML code\n        if not generated_code_for_file or "UML generation failed" in generated_code_for_file:\n            logging.error(f"Failed to generate UML diagram for {file_path}")\n            raise ValueError(f"Failed to generate UML diagram for {file_path}")\n        generated_code += generated_code_for_file\n\n        # Save the UML code for each file to a separate .puml file\n        file_name = f"{os.path.basename(file_path)}.puml"\n        final_output_path = api.save_generated_output(generated_code_for_file, os.path.join(output_directory, file_name))\n        file_paths.append(final_output_path)  # Append the file path to the list\n\n    logging.info(f"Generated file paths: {file_paths}")\n    # Return the list of file paths and the generated code\n    return file_paths, generated_code', 'src/routes/retrieve_code.py': 'import git\nimport json\nimport os\nimport logging\nfrom logging import handlers\n\n\n# Configure logging to write to a file\nlog_directory = \'logs\'\n# Create the directory if it doesn\'t exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, \'retrieve_code.log\')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter(\'%(asctime)s - %(levelname)s - %(message)s\')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\n\ndef clone_repo(repo_url, temp_dir, access_token):\n    try:\n        # Modify the URL to include the access token\n        if access_token:\n            repo_url = repo_url.replace(\'https://\', f\'https://{access_token}@\')\n        logger.info(f"Cloning repository: {repo_url}")\n        repo = git.Repo.clone_from(repo_url, temp_dir)\n        logger.info(f"Successfully cloned repository: {repo_url}")\n        return repo\n    except Exception as e:\n        logger.error(f"Failed to clone repository: {str(e)}")\n        raise ValueError(f"Failed to clone repository: {str(e)}")\n\ndef retrieve_code(repo, branch_name):\n    try:\n        print(f"Attempting to checkout branch: {branch_name}")  # Diagnostic print statement\n        logger.info(f"Attempting to checkout branch: {branch_name}")\n        repo.git.fetch()  # Fetch the latest updates from the remote\n        repo.git.checkout(branch_name)\n        logger.info(f"Successfully checked out branch: {branch_name}")\n        \n        # Load the config\n        config_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \'config.json\')\n        with open(config_file_path, \'r\') as f:\n            config = json.load(f)\n        ignore_list = config.get(\'ignore\', [])\n        include_list = config.get(\'include\', [])\n\n        # Create a new dictionary to store file paths and their corresponding code\n        included_files = {}\n        for file in repo.tree():\n            if any(file.path.endswith(ext) for ext in include_list) and not any(ignored_file in file.path for ignored_file in ignore_list):\n                try:\n                    with open(file.abspath, \'r\') as f:\n                        included_files[file.path] = f.read()\n                    logger.info(f"Included file: {file.path}")\n                except FileNotFoundError:\n                    print(f"Ignoring missing file: {file.path}")  # Diagnostic print statement\n                    logger.warning(f"Ignoring missing file: {file.path}")\n\n        return included_files\n    except Exception as e:\n        logger.error(f"Failed to retrieve code: {str(e)}")\n        raise ValueError(f"Failed to retrieve code: {str(e)}")', 'src/routes/uml_from_repo.py': '# uml_from_repo.py\nimport os\nimport fnmatch\nimport subprocess\nimport json\nimport git\nimport tempfile\nimport shutil\nimport logging\nfrom logging import handlers  \nfrom routes.retrieve_code import clone_repo, retrieve_code\nfrom routes.code_to_uml import generate_content  # Import the function from code_to_uml.py\n\n# Configure logging to write to a file\nlog_directory = \'logs\'\n# Create the directory if it doesn\'t exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, \'uml_from_repo.log\')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter(\'%(asctime)s - %(levelname)s - %(message)s\')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\ndef process_request(data):\n    git_repo_url = data.get(\'gitRepoUrl\')\n    output_directory = data.get(\'local_dir\')  # Get the output directory from the request data\n    github_access_token = data.get(\'gitHubAccessToken\')\n    branch_name = data.get(\'branchName\', \'master\')  # \'master\' is the default branch name\n    if not git_repo_url or not output_directory or not github_access_token or not branch_name:\n        logger.error("Missing required parameters")  \n        return {"error": "Missing required parameters"}, 400\n\n    try:\n        temp_dir = None\n        try:\n            temp_dir = tempfile.mkdtemp()\n        except Exception as e:\n            logger.error(f"Error during UML generation: {str(e)}", exc_info=True)\n            return {"error": str(e)}, 500\n        finally:\n            # Clean up the temporary directory\n            if temp_dir is not None:\n                logger.info("Cleaning up temporary directory")\n                shutil.rmtree(temp_dir)\n\n        # Clone the repository\n        repo = clone_repo(git_repo_url, temp_dir, github_access_token)\n         \n        # Load the config\n        with open(\'src/routes/config.json\', \'r\') as f:\n            config = json.load(f)\n        \n        def traverse_directories(repo, temp_dir, config):\n            included_files = {}\n            for item in repo.tree().traverse():\n                if item.type == \'blob\':  # This means it\'s a file, not a directory\n                    for pattern in config[\'include\']:\n                        if fnmatch.fnmatch(item.path, pattern):\n                            with open(os.path.join(temp_dir, item.path), \'r\') as f:\n                                included_files[item.path] = f.read()\n                            break  # No need to check the remaining patterns\n            return included_files\n\n        # Retrieve the code from the repository\n        included_files = traverse_directories(repo, temp_dir, config)\n\n        logger.debug(f"Type of included_files: {type(included_files)}")\n        logger.debug(f"Value of included_files: {included_files}")\n\n        # Save the UML diagram to a file\n        logger.info(f"Saving UML diagram to {output_directory}")\n        final_output_paths = generate_content(included_files, output_directory)  # This is now a list of file paths\n        logger.info(f"Final output paths: {final_output_paths}")\n\n        for path in final_output_paths:\n            logger.info(f"UML diagram saved at: {path}")  # Log the path where each UML diagram was saved\n\n        return {\n            "message": "UML diagrams generated successfully",\n            "details": {\n                "Repository": git_repo_url,\n                "Output Paths": final_output_paths  # This is now a list of file paths\n            }\n        }, 200\n\n    except Exception as e:\n        logger.error(f"Error during UML generation: {str(e)}")\n        return {"error": str(e)}, 500\n\n    finally:\n        # Clean up the temporary directory\n        logger.info("Cleaning up temporary directory")\n        shutil.rmtree(temp_dir)\n\n ', 'src/scripts/__init__.py': '', 'src/scripts/execute_generate_uml.py': "import json\nimport os\nimport requests\nimport logging\nfrom logging import handlers\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\n# Configure logging to write to a file\nlog_directory = '../../logs'\n# Create the directory if it doesn't exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, 'execute_generate_uml.log')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\n\n# Configure logging\nlogging.basicConfig(filename='execute_generate_uml.log', level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')\n\n# Current file's directory\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\n# Configuration file path\nconfig_file_path = os.path.join(current_dir, 'config.json')\n\n# Read configuration from the JSON file\nwith open(config_file_path, 'r') as config_file:\n    config_data = json.load(config_file)\n\n# Retrieve the GitHub access token from environment variables\ngithub_token = os.getenv('GITHUB_PAT')\n\n# Endpoint URL\nurl = 'http://127.0.0.1:5000/generate-uml'\n\n# Headers\nheaders = {\n    'Content-Type': 'application/json'\n}\n\n# Update the GitHub access token and local directory in the config data\nconfig_data['gitHubAccessToken'] = github_token\nconfig_data['local_dir'] = os.path.join(current_dir, '../..', 'output')\n\n# Log the JSON data being sent in the request\nlogging.info(f'Sending JSON data to {url}:')\nlogging.info(json.dumps(config_data, indent=2))\n\ntry:\n    # Make the POST request\n    response = requests.post(url, headers=headers, json=config_data)\n\n    # Log the response from the server\n    logging.info(f'Response from server ({url}):')\n    logging.info(f'Status Code: {response.status_code}')\n    logging.info(f'Response Text: {response.text}')\n\n    # Print the response from the server\n    print(response.text)\n\n    # Save the response to a file in the output directory\n    output_dir = os.path.join(current_dir, '../..', 'output')\n    os.makedirs(output_dir, exist_ok=True)\n    with open(os.path.join(output_dir, 'response.json'), 'w') as output_file:\n        json.dump(response.json(), output_file, indent=2)\n\nexcept Exception as e:\n    # Log any exceptions that occur\n    logging.error(f'Error occurred: {str(e)}')"}
2024-01-20 21:25:58,866 - INFO - Skipping empty file: src/routes/__init__.py
2024-01-20 21:25:58,866 - INFO - Processing file: src/routes/code_to_uml.py
2024-01-20 21:25:58,866 - INFO - Sending prompt to OpenAI: Create UML diagrams in .puml format for the following code:

# code_to_uml.py
import os
from openai_api import OpenAIAPI 
import logging
from logging import handlers  


# Create an instance of the OpenAI API
api = OpenAIAPI()

# Configure logging to write to a file
log_directory = 'logs'
# Create the directory if it doesn't exist
os.makedirs(log_directory, exist_ok=True)  
log_filename = os.path.join(log_directory, 'code_to_uml.log')
log_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation
log_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
log_handler.setFormatter(log_formatter)
logger = logging.getLogger()
logger.addHandler(log_handler)
logger.setLevel(logging.DEBUG)

# code_to_uml.py
def generate_content(files, output_directory):
    logging.info(f"Files to process: {files}")  # Log the files dictionary
    generated_code = ""  # Initialize generated_code
    file_paths = []  # Initialize a list to store the file paths
    for file_path, code in files.items():
        logging.in
2024-01-20 21:25:58,867 - DEBUG - Request options: {'method': 'post', 'url': '/completions', 'files': None, 'json_data': {'model': 'gpt-3.5-turbo-instruct', 'prompt': 'Create UML diagrams in .puml format for the following code:\n\n# code_to_uml.py\nimport os\nfrom openai_api import OpenAIAPI \nimport logging\nfrom logging import handlers  \n\n\n# Create an instance of the OpenAI API\napi = OpenAIAPI()\n\n# Configure logging to write to a file\nlog_directory = \'logs\'\n# Create the directory if it doesn\'t exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, \'code_to_uml.log\')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter(\'%(asctime)s - %(levelname)s - %(message)s\')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\n# code_to_uml.py\ndef generate_content(files, output_directory):\n    logging.info(f"Files to process: {files}")  # Log the files dictionary\n    generated_code = ""  # Initialize generated_code\n    file_paths = []  # Initialize a list to store the file paths\n    for file_path, code in files.items():\n        logging.in', 'max_tokens': 1024}}
2024-01-20 21:25:58,879 - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2024-01-20 21:25:58,936 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x106691250>
2024-01-20 21:25:58,936 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x106095b50> server_hostname='api.openai.com' timeout=5.0
2024-01-20 21:25:59,203 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10668fb90>
2024-01-20 21:25:59,203 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-01-20 21:25:59,204 - DEBUG - send_request_headers.complete
2024-01-20 21:25:59,204 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-01-20 21:25:59,205 - DEBUG - send_request_body.complete
2024-01-20 21:25:59,205 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-01-20 21:26:03,312 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 21 Jan 2024 03:26:03 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'Cache-Control', b'no-cache, must-revalidate'), (b'openai-model', b'gpt-3.5-turbo-instruct'), (b'openai-organization', b'user-lqvxa4hv7a8o8eyohtzmcoc6'), (b'openai-processing-ms', b'4027'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=15724800; includeSubDomains'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'250000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'248975'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'245ms'), (b'x-request-id', b'faf4322a8b0f2c03646626fd67884f82'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=uM3PjtmaJA.jlLngKrqkqWaAsVZEHOmo.YR172IfaKw-1705807563-1-AbZNwM4Cwz1BQgCBbCTffHAGwMGRvTcVXwtL69qJ4KbdHKM5if4N5B7PGVspSVmRXHmo44xTV53VlY7AdED3nyU=; path=/; expires=Sun, 21-Jan-24 03:56:03 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Set-Cookie', b'_cfuvid=84PxZO7lebHE.qTA_kyjTFRmq6N65RS5PNysjWxc0Uk-1705807563363-0-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'848c73fd98f469ed-ATL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-01-20 21:26:03,315 - INFO - HTTP Request: POST https://api.openai.com/v1/completions "HTTP/1.1 200 OK"
2024-01-20 21:26:03,315 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-01-20 21:26:03,316 - DEBUG - receive_response_body.complete
2024-01-20 21:26:03,316 - DEBUG - response_closed.started
2024-01-20 21:26:03,316 - DEBUG - response_closed.complete
2024-01-20 21:26:03,316 - DEBUG - HTTP Request: POST https://api.openai.com/v1/completions "200 OK"
2024-01-20 21:26:03,319 - INFO - Received response from OpenAI: fo(f"Generating UML diagram for {file_path}")  # Log the file path
        file_paths.append(file_path)  # Store the file path in the list
        generated_code += api.generate(code)  # Generate code for the files and concatenate the results
    logging.info(f"Generated code: {generated_code}")  # Log the generated code
    api.create_diagram(generated_code, output_directory)  # Create a UML diagram using the API and the generated code

# main function
if __name__ == '__main__':
    # Define input files and output directory
    files = {
        'main.py': 'Code for the main function',
        'helper.py': 'Code for helper functions'
    }
    output_directory = 'diagrams'
    # Generate UML diagram for the files and save to output directory
    generate_content(files, output_directory)

@startuml

[*] --> code_to_uml

class code_to_uml.py {
+ api: OpenAIAPI
+ log_directory: String
+ log_filename: String
+ log_handler: RotatingFileHandler
+ log_formatter: Formatter
+ logger: logging
+ generate_content(): void
+ main(): void
}

code_to_uml.py --> OpenAIAPI
code_to_uml.py --> logging

class OpenAIAPI {
+ generate(): String
+ create_diagram(): void
}

class logging {
+ handlers: handlers
+ formatter: Formatter
logger: debug
info
}

code_to_uml.py --> main.py
code_to_uml.py --> helper.py

class main.py {
}

class helper.py {
}

main.py --> generate_content()
helper.py --> generate_content()

generate_content() --> logging
logging --> log_directory
logging --> log_filename
logging --> log_handler
logging --> log_formatter
logging --> logger
logger --> logging: debug, info
logging --> file_paths
logging --> generated_code
generate_content() --> api: create_diagram()
api --> generate()
generate() --> api: generate()
generate() --> code
generate() --> output
api --> create_diagram()
create_diagram() --> generated_code
create_diagram() --> output_directory

@enduml
2024-01-20 21:26:03,320 - INFO - Sending prompt to OpenAI: Create UML diagrams in .puml format for the following code:

fo(f"Processing file: {file_path}")
        generated_code_for_file = api.generate_from_code(code)
        logging.info(f"UML code generated for {file_path}: {generated_code_for_file}")  # Log the generated UML code
        if not generated_code_for_file or "UML generation failed" in generated_code_for_file:
            logging.error(f"Failed to generate UML diagram for {file_path}")
            raise ValueError(f"Failed to generate UML diagram for {file_path}")
        generated_code += generated_code_for_file

        # Save the UML code for each file to a separate .puml file
        file_name = f"{os.path.basename(file_path)}.puml"
        final_output_path = api.save_generated_output(generated_code_for_file, os.path.join(output_directory, file_name))
        file_paths.append(final_output_path)  # Append the file path to the list

    logging.info(f"Generated file paths: {file_paths}")
    # Return the list of file paths and the generated code
    return file_paths, generated_code
2024-01-20 21:26:03,322 - DEBUG - Request options: {'method': 'post', 'url': '/completions', 'files': None, 'json_data': {'model': 'gpt-3.5-turbo-instruct', 'prompt': 'Create UML diagrams in .puml format for the following code:\n\nfo(f"Processing file: {file_path}")\n        generated_code_for_file = api.generate_from_code(code)\n        logging.info(f"UML code generated for {file_path}: {generated_code_for_file}")  # Log the generated UML code\n        if not generated_code_for_file or "UML generation failed" in generated_code_for_file:\n            logging.error(f"Failed to generate UML diagram for {file_path}")\n            raise ValueError(f"Failed to generate UML diagram for {file_path}")\n        generated_code += generated_code_for_file\n\n        # Save the UML code for each file to a separate .puml file\n        file_name = f"{os.path.basename(file_path)}.puml"\n        final_output_path = api.save_generated_output(generated_code_for_file, os.path.join(output_directory, file_name))\n        file_paths.append(final_output_path)  # Append the file path to the list\n\n    logging.info(f"Generated file paths: {file_paths}")\n    # Return the list of file paths and the generated code\n    return file_paths, generated_code', 'max_tokens': 1024}}
2024-01-20 21:26:03,323 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-01-20 21:26:03,324 - DEBUG - send_request_headers.complete
2024-01-20 21:26:03,324 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-01-20 21:26:03,324 - DEBUG - send_request_body.complete
2024-01-20 21:26:03,324 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-01-20 21:26:06,271 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 21 Jan 2024 03:26:06 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'Cache-Control', b'no-cache, must-revalidate'), (b'openai-model', b'gpt-3.5-turbo-instruct'), (b'openai-organization', b'user-lqvxa4hv7a8o8eyohtzmcoc6'), (b'openai-processing-ms', b'2831'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=15724800; includeSubDomains'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'250000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'248975'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'245ms'), (b'x-request-id', b'd4b5037ca3fb3c42e0eb40ce998dfd10'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Server', b'cloudflare'), (b'CF-RAY', b'848c74178e1269ed-ATL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-01-20 21:26:06,271 - INFO - HTTP Request: POST https://api.openai.com/v1/completions "HTTP/1.1 200 OK"
2024-01-20 21:26:06,271 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-01-20 21:26:06,272 - DEBUG - receive_response_body.complete
2024-01-20 21:26:06,272 - DEBUG - response_closed.started
2024-01-20 21:26:06,272 - DEBUG - response_closed.complete
2024-01-20 21:26:06,272 - DEBUG - HTTP Request: POST https://api.openai.com/v1/completions "200 OK"
2024-01-20 21:26:06,273 - INFO - Received response from OpenAI: 

@startuml

class UMLGenerator {
    -generated_code: str
    -file_paths: list
    +fo(): void
    +generate_from_code(): str
    +save_generated_output(): str
    +file_name: str
    +final_output_path: str
    +logging: Logger
    +api: API
    +output_directory: str
    +file_path: str
    +generated_code_for_file: str
    +file_paths: list
}

UMLGenerator o-- Logger
UMLGenerator o-- API

class Logger {
    +info(): void
    +error(): void
}

class API {
    +generate_from_code(): str
    +save_generated_output(): str
}

class API {
    +file_path: str
}

class API {
    +generated_code_for_file: str
}

class API {
    +output_directory: str
}

class API {
    +final_output_path: str
}

class os {
    +basename(): str
}

UMLGenerator --> Logger: uses
UMLGenerator --> API: uses
UMLGenerator --> generated_code_for_file: aggregates
UMLGenerator --> file_paths: aggregates
UMLGenerator --> logging: uses
UMLGenerator --> output_directory: contains
UMLGenerator --> file_path: contains
UMLGenerator --> generated_code: aggregates

@enduml
2024-01-20 21:26:06,273 - INFO - UML code generated for src/routes/code_to_uml.py: fo(f"Generating UML diagram for {file_path}")  # Log the file path
        file_paths.append(file_path)  # Store the file path in the list
        generated_code += api.generate(code)  # Generate code for the files and concatenate the results
    logging.info(f"Generated code: {generated_code}")  # Log the generated code
    api.create_diagram(generated_code, output_directory)  # Create a UML diagram using the API and the generated code

# main function
if __name__ == '__main__':
    # Define input files and output directory
    files = {
        'main.py': 'Code for the main function',
        'helper.py': 'Code for helper functions'
    }
    output_directory = 'diagrams'
    # Generate UML diagram for the files and save to output directory
    generate_content(files, output_directory)

@startuml

[*] --> code_to_uml

class code_to_uml.py {
+ api: OpenAIAPI
+ log_directory: String
+ log_filename: String
+ log_handler: RotatingFileHandler
+ log_formatter: Formatter
+ logger: logging
+ generate_content(): void
+ main(): void
}

code_to_uml.py --> OpenAIAPI
code_to_uml.py --> logging

class OpenAIAPI {
+ generate(): String
+ create_diagram(): void
}

class logging {
+ handlers: handlers
+ formatter: Formatter
logger: debug
info
}

code_to_uml.py --> main.py
code_to_uml.py --> helper.py

class main.py {
}

class helper.py {
}

main.py --> generate_content()
helper.py --> generate_content()

generate_content() --> logging
logging --> log_directory
logging --> log_filename
logging --> log_handler
logging --> log_formatter
logging --> logger
logger --> logging: debug, info
logging --> file_paths
logging --> generated_code
generate_content() --> api: create_diagram()
api --> generate()
generate() --> api: generate()
generate() --> code
generate() --> output
api --> create_diagram()
create_diagram() --> generated_code
create_diagram() --> output_directory

@enduml@startuml

class UMLGenerator {
    -generated_code: str
    -file_paths: list
    +fo(): void
    +generate_from_code(): str
    +save_generated_output(): str
    +file_name: str
    +final_output_path: str
    +logging: Logger
    +api: API
    +output_directory: str
    +file_path: str
    +generated_code_for_file: str
    +file_paths: list
}

UMLGenerator o-- Logger
UMLGenerator o-- API

class Logger {
    +info(): void
    +error(): void
}

class API {
    +generate_from_code(): str
    +save_generated_output(): str
}

class API {
    +file_path: str
}

class API {
    +generated_code_for_file: str
}

class API {
    +output_directory: str
}

class API {
    +final_output_path: str
}

class os {
    +basename(): str
}

UMLGenerator --> Logger: uses
UMLGenerator --> API: uses
UMLGenerator --> generated_code_for_file: aggregates
UMLGenerator --> file_paths: aggregates
UMLGenerator --> logging: uses
UMLGenerator --> output_directory: contains
UMLGenerator --> file_path: contains
UMLGenerator --> generated_code: aggregates

@enduml
2024-01-20 21:26:06,273 - INFO - Saving generated output to /Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output/code_to_uml.py.puml
2024-01-20 21:26:06,273 - INFO - Generated output saved to /Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output/code_to_uml.py.puml
2024-01-20 21:26:06,274 - INFO - Processing file: src/routes/retrieve_code.py
2024-01-20 21:26:06,274 - INFO - Sending prompt to OpenAI: Create UML diagrams in .puml format for the following code:

import git
import json
import os
import logging
from logging import handlers


# Configure logging to write to a file
log_directory = 'logs'
# Create the directory if it doesn't exist
os.makedirs(log_directory, exist_ok=True)  
log_filename = os.path.join(log_directory, 'retrieve_code.log')
log_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation
log_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
log_handler.setFormatter(log_formatter)
logger = logging.getLogger()
logger.addHandler(log_handler)
logger.setLevel(logging.DEBUG)


def clone_repo(repo_url, temp_dir, access_token):
    try:
        # Modify the URL to include the access token
        if access_token:
            repo_url = repo_url.replace('https://', f'https://{access_token}@')
        logger.info(f"Cloning repository: {repo_url}")
        repo = git.Repo.clone_from(repo_url, temp_dir)
        logger.info(f"Successfully cloned repository: {repo_url}")
        
2024-01-20 21:26:06,275 - DEBUG - Request options: {'method': 'post', 'url': '/completions', 'files': None, 'json_data': {'model': 'gpt-3.5-turbo-instruct', 'prompt': 'Create UML diagrams in .puml format for the following code:\n\nimport git\nimport json\nimport os\nimport logging\nfrom logging import handlers\n\n\n# Configure logging to write to a file\nlog_directory = \'logs\'\n# Create the directory if it doesn\'t exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, \'retrieve_code.log\')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter(\'%(asctime)s - %(levelname)s - %(message)s\')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\n\ndef clone_repo(repo_url, temp_dir, access_token):\n    try:\n        # Modify the URL to include the access token\n        if access_token:\n            repo_url = repo_url.replace(\'https://\', f\'https://{access_token}@\')\n        logger.info(f"Cloning repository: {repo_url}")\n        repo = git.Repo.clone_from(repo_url, temp_dir)\n        logger.info(f"Successfully cloned repository: {repo_url}")\n        ', 'max_tokens': 1024}}
2024-01-20 21:26:06,275 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-01-20 21:26:06,276 - DEBUG - send_request_headers.complete
2024-01-20 21:26:06,276 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-01-20 21:26:06,276 - DEBUG - send_request_body.complete
2024-01-20 21:26:06,276 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-01-20 21:26:09,126 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 21 Jan 2024 03:26:09 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'Cache-Control', b'no-cache, must-revalidate'), (b'openai-model', b'gpt-3.5-turbo-instruct'), (b'openai-organization', b'user-lqvxa4hv7a8o8eyohtzmcoc6'), (b'openai-processing-ms', b'2777'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=15724800; includeSubDomains'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'250000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'248975'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'245ms'), (b'x-request-id', b'f58c491e08de8cd73076acdae27ad6e9'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Server', b'cloudflare'), (b'CF-RAY', b'848c7429ce4769ed-ATL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-01-20 21:26:09,128 - INFO - HTTP Request: POST https://api.openai.com/v1/completions "HTTP/1.1 200 OK"
2024-01-20 21:26:09,129 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-01-20 21:26:09,130 - DEBUG - receive_response_body.complete
2024-01-20 21:26:09,130 - DEBUG - response_closed.started
2024-01-20 21:26:09,131 - DEBUG - response_closed.complete
2024-01-20 21:26:09,131 - DEBUG - HTTP Request: POST https://api.openai.com/v1/completions "200 OK"
2024-01-20 21:26:09,132 - INFO - Received response from OpenAI: 
        return True
    except Exception as e:
        logger.error(f"Error cloning repository: {repo_url} - {e}")
        return False


def retrieve_code(repo_url, temp_dir, access_token, dest_dir, branch='master'):
    # Clone the repository to a temporary directory
    cloned = clone_repo(repo_url, temp_dir, access_token)
    
    if cloned:
        try:
            repo = git.Repo(temp_dir)
            # Checkout the specified branch
            repo.git.checkout(branch)
            # Copy the files to the destination directory
            os.system(f'cp -r {temp_dir}/* {dest_dir}')
            logger.info(f"Successfully retrieved code from {repo_url}")
            return True
        except Exception as e:
            logger.error(f"Error retrieving code from {repo_url} - {e}")
            return False


@startuml

class GitManager {
    - repo_url : string
    - temp_dir : string
    - access_token : string
    - dest_dir : string
    - branch : string
    + clone_repo(repo_url, temp_dir, access_token) : boolean
    + retrieve_code(repo_url, temp_dir, access_token, dest_dir, branch='master') : boolean
}

note left of GitManager: Uses git\nlibrary

class git.Repo {
    + clone_from(repo_url, temp_dir) : git.Repo
    + git : GitCommandType
}

class os {
    + makedirs(directory, exist_ok=False) : None
    + system(command) : int
}

GitManager .. git.Repo : uses
GitManager .. os : uses

@enduml
2024-01-20 21:26:09,133 - INFO - Sending prompt to OpenAI: Create UML diagrams in .puml format for the following code:

return repo
    except Exception as e:
        logger.error(f"Failed to clone repository: {str(e)}")
        raise ValueError(f"Failed to clone repository: {str(e)}")

def retrieve_code(repo, branch_name):
    try:
        print(f"Attempting to checkout branch: {branch_name}")  # Diagnostic print statement
        logger.info(f"Attempting to checkout branch: {branch_name}")
        repo.git.fetch()  # Fetch the latest updates from the remote
        repo.git.checkout(branch_name)
        logger.info(f"Successfully checked out branch: {branch_name}")
        
        # Load the config
        config_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'config.json')
        with open(config_file_path, 'r') as f:
            config = json.load(f)
        ignore_list = config.get('ignore', [])
        include_list = config.get('include', [])

        # Create a new dictionary to store file paths and their corresponding code
        included_files = {}
        for file in repo.tree():
            
2024-01-20 21:26:09,135 - DEBUG - Request options: {'method': 'post', 'url': '/completions', 'files': None, 'json_data': {'model': 'gpt-3.5-turbo-instruct', 'prompt': 'Create UML diagrams in .puml format for the following code:\n\nreturn repo\n    except Exception as e:\n        logger.error(f"Failed to clone repository: {str(e)}")\n        raise ValueError(f"Failed to clone repository: {str(e)}")\n\ndef retrieve_code(repo, branch_name):\n    try:\n        print(f"Attempting to checkout branch: {branch_name}")  # Diagnostic print statement\n        logger.info(f"Attempting to checkout branch: {branch_name}")\n        repo.git.fetch()  # Fetch the latest updates from the remote\n        repo.git.checkout(branch_name)\n        logger.info(f"Successfully checked out branch: {branch_name}")\n        \n        # Load the config\n        config_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \'config.json\')\n        with open(config_file_path, \'r\') as f:\n            config = json.load(f)\n        ignore_list = config.get(\'ignore\', [])\n        include_list = config.get(\'include\', [])\n\n        # Create a new dictionary to store file paths and their corresponding code\n        included_files = {}\n        for file in repo.tree():\n            ', 'max_tokens': 1024}}
2024-01-20 21:26:09,136 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-01-20 21:26:09,137 - DEBUG - send_request_headers.complete
2024-01-20 21:26:09,137 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-01-20 21:26:09,137 - DEBUG - send_request_body.complete
2024-01-20 21:26:09,137 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-01-20 21:26:13,271 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 21 Jan 2024 03:26:13 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'Cache-Control', b'no-cache, must-revalidate'), (b'openai-model', b'gpt-3.5-turbo-instruct'), (b'openai-organization', b'user-lqvxa4hv7a8o8eyohtzmcoc6'), (b'openai-processing-ms', b'4012'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=15724800; includeSubDomains'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'250000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'248975'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'245ms'), (b'x-request-id', b'cc8d66ea0ada852b07d03e32082760ed'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Server', b'cloudflare'), (b'CF-RAY', b'848c743baf6769ed-ATL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-01-20 21:26:13,274 - INFO - HTTP Request: POST https://api.openai.com/v1/completions "HTTP/1.1 200 OK"
2024-01-20 21:26:13,275 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-01-20 21:26:13,276 - DEBUG - receive_response_body.complete
2024-01-20 21:26:13,277 - DEBUG - response_closed.started
2024-01-20 21:26:13,277 - DEBUG - response_closed.complete
2024-01-20 21:26:13,278 - DEBUG - HTTP Request: POST https://api.openai.com/v1/completions "200 OK"
2024-01-20 21:26:13,281 - INFO - Received response from OpenAI:  if file.path.endswith('.py') and file.path not in ignore_list:  # Only include files that match the .py extension and are not in the ignore list
                included_files[file.path] = file.data_stream.read().decode("utf-8")  # Store the file path as the key and the code as the value
                
        return included_files  # Return the dictionary of included files
    except Exception as e:
        logger.error(f"Failed to retrieve code: {str(e)}")
        raise ValueError(f"Failed to retrieve code: {str(e)}")



@startuml

class Repo {
    -path : str
    -tree : list
    -remote : str
    -branches : list
    +git : Repository
    +clone() : Repository
    +fetch() : Repository
    +checkout(branch_name : str) : void
    +tree() : list
}

class Logger {
    +error(message : str) : void
    +info(message : str) : void
}

class File {
    -path : str
    -data_stream : Stream
    +read() : str
}

class Config {
    -file_path : str
    -ignore_list : list
    -include_list : list
    +load() : dict
    +get_ignore_list() : list
    +get_include_list() : list
}

class CodeRetriever {
    -repo : Repo
    -branch_name : str
    +retrieve_code(repo : Repo, branch_name : str) : dict
}

CodeRetriever --> Repo : dependency
CodeRetriever --> Logger : dependency
CodeRetriever --> Config : dependency
Repo --> File : contains
Config --> File : contains

code {

CodeRetriever --> Logger : usage
CodeRetriever --> Repo : method call
Repo --> Logger : usage
Repo --> Config : method call
Repo --> File : method call
Repo --> Stream : method call

}

exception {
CodeRetriever --> ValueError : raise
CodeRetriever --> Exception : catch
Repo --> Exception : catch
}


@enduml
2024-01-20 21:26:13,283 - INFO - Sending prompt to OpenAI: Create UML diagrams in .puml format for the following code:

if any(file.path.endswith(ext) for ext in include_list) and not any(ignored_file in file.path for ignored_file in ignore_list):
                try:
                    with open(file.abspath, 'r') as f:
                        included_files[file.path] = f.read()
                    logger.info(f"Included file: {file.path}")
                except FileNotFoundError:
                    print(f"Ignoring missing file: {file.path}")  # Diagnostic print statement
                    logger.warning(f"Ignoring missing file: {file.path}")

        return included_files
    except Exception as e:
        logger.error(f"Failed to retrieve code: {str(e)}")
        raise ValueError(f"Failed to retrieve code: {str(e)}")
2024-01-20 21:26:13,284 - DEBUG - Request options: {'method': 'post', 'url': '/completions', 'files': None, 'json_data': {'model': 'gpt-3.5-turbo-instruct', 'prompt': 'Create UML diagrams in .puml format for the following code:\n\nif any(file.path.endswith(ext) for ext in include_list) and not any(ignored_file in file.path for ignored_file in ignore_list):\n                try:\n                    with open(file.abspath, \'r\') as f:\n                        included_files[file.path] = f.read()\n                    logger.info(f"Included file: {file.path}")\n                except FileNotFoundError:\n                    print(f"Ignoring missing file: {file.path}")  # Diagnostic print statement\n                    logger.warning(f"Ignoring missing file: {file.path}")\n\n        return included_files\n    except Exception as e:\n        logger.error(f"Failed to retrieve code: {str(e)}")\n        raise ValueError(f"Failed to retrieve code: {str(e)}")', 'max_tokens': 1024}}
2024-01-20 21:26:13,285 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-01-20 21:26:13,286 - DEBUG - send_request_headers.complete
2024-01-20 21:26:13,286 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-01-20 21:26:13,286 - DEBUG - send_request_body.complete
2024-01-20 21:26:13,287 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-01-20 21:26:18,554 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 21 Jan 2024 03:26:18 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'Cache-Control', b'no-cache, must-revalidate'), (b'openai-model', b'gpt-3.5-turbo-instruct'), (b'openai-organization', b'user-lqvxa4hv7a8o8eyohtzmcoc6'), (b'openai-processing-ms', b'5173'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=15724800; includeSubDomains'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'250000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'248975'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'245ms'), (b'x-request-id', b'4d5a4449149089f9e27151ed5d2ce7e1'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Server', b'cloudflare'), (b'CF-RAY', b'848c7455a8f169ed-ATL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-01-20 21:26:18,557 - INFO - HTTP Request: POST https://api.openai.com/v1/completions "HTTP/1.1 200 OK"
2024-01-20 21:26:18,557 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-01-20 21:26:18,558 - DEBUG - receive_response_body.complete
2024-01-20 21:26:18,558 - DEBUG - response_closed.started
2024-01-20 21:26:18,559 - DEBUG - response_closed.complete
2024-01-20 21:26:18,559 - DEBUG - HTTP Request: POST https://api.openai.com/v1/completions "200 OK"
2024-01-20 21:26:18,561 - INFO - Received response from OpenAI: 


@startuml
class FileUtils{
    -include_list: str[]
    -ignore_list: str[]
    -included_files: dict
    -logger: Logger
    
    +__init__(include_list: str[], ignore_list: str[])
    +retrieve_code(files: str[]): dict
}

class Logger{
    +info(msg: str)
    +warning(msg: str)
    +error(msg: str)
}

class File{
    -path: str
    -abspath: str
    
    +endswith(ext: str)
}

File <|-- FileUtils
Logger <|-- FileUtils

note top: "Main control flow" as MainControlFlow
MainControlFlow ..> FileUtils

MainControlFlow --> if any(file.path.endswith(ext) for ext in include_list)
MainControlFlow --> not any(ignored_file in file.path for ignored_file in ignore_list)

if any(file.path.endswith(ext) for ext in include_list) ..> File
not any(ignored_file in file.path for ignored_file in ignore_list) ..> File

if any(file.path.endswith(ext) for ext in include_list) ==> open
not any(ignored_file in file.path for ignored_file in ignore_list) ==> open

open --> with open(file.abspath, 'r') as f
open --> try..except

with open(file.abspath, 'r') as f --> included_files[file.path] = f.read()
try..except --> print
try..except --> logger.warning
try..except --> FileNotFoundError

print --> "Diagnostic print statement"

Logger <--: logger
logger ..> MainControlFlow

included_files[file.path] = f.read() ==> logger.info(f"Included file: {file.path}")

FileNotFoundError ..> print
FileNotFoundError ..> logger.warning

Logger <--: logger
logger ..> MainControlFlow

print --> "Ignoring missing file: {file.path}"
logger.warning(f"Ignoring missing file: {file.path}") ==> print

MainControlFlow --> return included_files

MainControlFlow --> Logger.error

Logger ..> MainControlFlow

note bottom: Catch all exceptions\nand raise ValueError as needed

Logger.error ==> raise ValueError(f"Failed to retrieve code: {str(e)}")
raise ValueError(f"Failed to retrieve code: {str(e)}") --> return included_files

MainControlFlow ..> Logger
Logger ..> raise: ValueError
Logger ..> except: Exception

note left: Calling code as follows:\ninclude_list = ['.py', '.txt']\nignore_list = ['tests', 'temp']\nfiles = ['test.py', 'index.txt', 'app.py', 'tests/utils.py', 'temp/index.txt']\n
note left: Include list: ['.py', '.txt']\nIgnore list: ['tests', 'temp']\nFiles: ['test.py', 'index.txt', 'app.py', 'tests/utils.py', 'temp/index.txt']
@enduml
2024-01-20 21:26:18,562 - INFO - UML code generated for src/routes/retrieve_code.py: return True
    except Exception as e:
        logger.error(f"Error cloning repository: {repo_url} - {e}")
        return False


def retrieve_code(repo_url, temp_dir, access_token, dest_dir, branch='master'):
    # Clone the repository to a temporary directory
    cloned = clone_repo(repo_url, temp_dir, access_token)
    
    if cloned:
        try:
            repo = git.Repo(temp_dir)
            # Checkout the specified branch
            repo.git.checkout(branch)
            # Copy the files to the destination directory
            os.system(f'cp -r {temp_dir}/* {dest_dir}')
            logger.info(f"Successfully retrieved code from {repo_url}")
            return True
        except Exception as e:
            logger.error(f"Error retrieving code from {repo_url} - {e}")
            return False


@startuml

class GitManager {
    - repo_url : string
    - temp_dir : string
    - access_token : string
    - dest_dir : string
    - branch : string
    + clone_repo(repo_url, temp_dir, access_token) : boolean
    + retrieve_code(repo_url, temp_dir, access_token, dest_dir, branch='master') : boolean
}

note left of GitManager: Uses git\nlibrary

class git.Repo {
    + clone_from(repo_url, temp_dir) : git.Repo
    + git : GitCommandType
}

class os {
    + makedirs(directory, exist_ok=False) : None
    + system(command) : int
}

GitManager .. git.Repo : uses
GitManager .. os : uses

@endumlif file.path.endswith('.py') and file.path not in ignore_list:  # Only include files that match the .py extension and are not in the ignore list
                included_files[file.path] = file.data_stream.read().decode("utf-8")  # Store the file path as the key and the code as the value
                
        return included_files  # Return the dictionary of included files
    except Exception as e:
        logger.error(f"Failed to retrieve code: {str(e)}")
        raise ValueError(f"Failed to retrieve code: {str(e)}")



@startuml

class Repo {
    -path : str
    -tree : list
    -remote : str
    -branches : list
    +git : Repository
    +clone() : Repository
    +fetch() : Repository
    +checkout(branch_name : str) : void
    +tree() : list
}

class Logger {
    +error(message : str) : void
    +info(message : str) : void
}

class File {
    -path : str
    -data_stream : Stream
    +read() : str
}

class Config {
    -file_path : str
    -ignore_list : list
    -include_list : list
    +load() : dict
    +get_ignore_list() : list
    +get_include_list() : list
}

class CodeRetriever {
    -repo : Repo
    -branch_name : str
    +retrieve_code(repo : Repo, branch_name : str) : dict
}

CodeRetriever --> Repo : dependency
CodeRetriever --> Logger : dependency
CodeRetriever --> Config : dependency
Repo --> File : contains
Config --> File : contains

code {

CodeRetriever --> Logger : usage
CodeRetriever --> Repo : method call
Repo --> Logger : usage
Repo --> Config : method call
Repo --> File : method call
Repo --> Stream : method call

}

exception {
CodeRetriever --> ValueError : raise
CodeRetriever --> Exception : catch
Repo --> Exception : catch
}


@enduml@startuml
class FileUtils{
    -include_list: str[]
    -ignore_list: str[]
    -included_files: dict
    -logger: Logger
    
    +__init__(include_list: str[], ignore_list: str[])
    +retrieve_code(files: str[]): dict
}

class Logger{
    +info(msg: str)
    +warning(msg: str)
    +error(msg: str)
}

class File{
    -path: str
    -abspath: str
    
    +endswith(ext: str)
}

File <|-- FileUtils
Logger <|-- FileUtils

note top: "Main control flow" as MainControlFlow
MainControlFlow ..> FileUtils

MainControlFlow --> if any(file.path.endswith(ext) for ext in include_list)
MainControlFlow --> not any(ignored_file in file.path for ignored_file in ignore_list)

if any(file.path.endswith(ext) for ext in include_list) ..> File
not any(ignored_file in file.path for ignored_file in ignore_list) ..> File

if any(file.path.endswith(ext) for ext in include_list) ==> open
not any(ignored_file in file.path for ignored_file in ignore_list) ==> open

open --> with open(file.abspath, 'r') as f
open --> try..except

with open(file.abspath, 'r') as f --> included_files[file.path] = f.read()
try..except --> print
try..except --> logger.warning
try..except --> FileNotFoundError

print --> "Diagnostic print statement"

Logger <--: logger
logger ..> MainControlFlow

included_files[file.path] = f.read() ==> logger.info(f"Included file: {file.path}")

FileNotFoundError ..> print
FileNotFoundError ..> logger.warning

Logger <--: logger
logger ..> MainControlFlow

print --> "Ignoring missing file: {file.path}"
logger.warning(f"Ignoring missing file: {file.path}") ==> print

MainControlFlow --> return included_files

MainControlFlow --> Logger.error

Logger ..> MainControlFlow

note bottom: Catch all exceptions\nand raise ValueError as needed

Logger.error ==> raise ValueError(f"Failed to retrieve code: {str(e)}")
raise ValueError(f"Failed to retrieve code: {str(e)}") --> return included_files

MainControlFlow ..> Logger
Logger ..> raise: ValueError
Logger ..> except: Exception

note left: Calling code as follows:\ninclude_list = ['.py', '.txt']\nignore_list = ['tests', 'temp']\nfiles = ['test.py', 'index.txt', 'app.py', 'tests/utils.py', 'temp/index.txt']\n
note left: Include list: ['.py', '.txt']\nIgnore list: ['tests', 'temp']\nFiles: ['test.py', 'index.txt', 'app.py', 'tests/utils.py', 'temp/index.txt']
@enduml
2024-01-20 21:26:18,563 - INFO - Saving generated output to /Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output/retrieve_code.py.puml
2024-01-20 21:26:18,564 - INFO - Generated output saved to /Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output/retrieve_code.py.puml
2024-01-20 21:26:18,564 - INFO - Processing file: src/routes/uml_from_repo.py
2024-01-20 21:26:18,565 - INFO - Sending prompt to OpenAI: Create UML diagrams in .puml format for the following code:

# uml_from_repo.py
import os
import fnmatch
import subprocess
import json
import git
import tempfile
import shutil
import logging
from logging import handlers  
from routes.retrieve_code import clone_repo, retrieve_code
from routes.code_to_uml import generate_content  # Import the function from code_to_uml.py

# Configure logging to write to a file
log_directory = 'logs'
# Create the directory if it doesn't exist
os.makedirs(log_directory, exist_ok=True)  
log_filename = os.path.join(log_directory, 'uml_from_repo.log')
log_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation
log_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
log_handler.setFormatter(log_formatter)
logger = logging.getLogger()
logger.addHandler(log_handler)
logger.setLevel(logging.DEBUG)

def process_request(data):
    git_repo_url = data.get('gitRepoUrl')
    output_directory = data.get('local_dir')  # Get the output directory from the request data
    gi
2024-01-20 21:26:18,566 - DEBUG - Request options: {'method': 'post', 'url': '/completions', 'files': None, 'json_data': {'model': 'gpt-3.5-turbo-instruct', 'prompt': "Create UML diagrams in .puml format for the following code:\n\n# uml_from_repo.py\nimport os\nimport fnmatch\nimport subprocess\nimport json\nimport git\nimport tempfile\nimport shutil\nimport logging\nfrom logging import handlers  \nfrom routes.retrieve_code import clone_repo, retrieve_code\nfrom routes.code_to_uml import generate_content  # Import the function from code_to_uml.py\n\n# Configure logging to write to a file\nlog_directory = 'logs'\n# Create the directory if it doesn't exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, 'uml_from_repo.log')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\ndef process_request(data):\n    git_repo_url = data.get('gitRepoUrl')\n    output_directory = data.get('local_dir')  # Get the output directory from the request data\n    gi", 'max_tokens': 1024}}
2024-01-20 21:26:18,567 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-01-20 21:26:18,568 - DEBUG - send_request_headers.complete
2024-01-20 21:26:18,568 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-01-20 21:26:18,568 - DEBUG - send_request_body.complete
2024-01-20 21:26:18,569 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-01-20 21:26:18,748 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 21 Jan 2024 03:26:18 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'Cache-Control', b'no-cache, must-revalidate'), (b'openai-model', b'gpt-3.5-turbo-instruct'), (b'openai-organization', b'user-lqvxa4hv7a8o8eyohtzmcoc6'), (b'openai-processing-ms', b'44'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=15724800; includeSubDomains'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'250000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'248975'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'245ms'), (b'x-request-id', b'5f5b96ebe0aa1866a428797a7080e4a5'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Server', b'cloudflare'), (b'CF-RAY', b'848c7476eb6069ed-ATL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-01-20 21:26:18,749 - INFO - HTTP Request: POST https://api.openai.com/v1/completions "HTTP/1.1 200 OK"
2024-01-20 21:26:18,749 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-01-20 21:26:18,749 - DEBUG - receive_response_body.complete
2024-01-20 21:26:18,750 - DEBUG - response_closed.started
2024-01-20 21:26:18,750 - DEBUG - response_closed.complete
2024-01-20 21:26:18,750 - DEBUG - HTTP Request: POST https://api.openai.com/v1/completions "200 OK"
2024-01-20 21:26:18,751 - INFO - Received response from OpenAI: 
2024-01-20 21:26:18,752 - INFO - Sending prompt to OpenAI: Create UML diagrams in .puml format for the following code:

thub_access_token = data.get('gitHubAccessToken')
    branch_name = data.get('branchName', 'master')  # 'master' is the default branch name
    if not git_repo_url or not output_directory or not github_access_token or not branch_name:
        logger.error("Missing required parameters")  
        return {"error": "Missing required parameters"}, 400

    try:
        temp_dir = None
        try:
            temp_dir = tempfile.mkdtemp()
        except Exception as e:
            logger.error(f"Error during UML generation: {str(e)}", exc_info=True)
            return {"error": str(e)}, 500
        finally:
            # Clean up the temporary directory
            if temp_dir is not None:
                logger.info("Cleaning up temporary directory")
                shutil.rmtree(temp_dir)

        # Clone the repository
        repo = clone_repo(git_repo_url, temp_dir, github_access_token)
         
        # Load the config
        with open('src/routes/config.json', 'r') as f:
            config = json.load(f
2024-01-20 21:26:18,753 - DEBUG - Request options: {'method': 'post', 'url': '/completions', 'files': None, 'json_data': {'model': 'gpt-3.5-turbo-instruct', 'prompt': 'Create UML diagrams in .puml format for the following code:\n\nthub_access_token = data.get(\'gitHubAccessToken\')\n    branch_name = data.get(\'branchName\', \'master\')  # \'master\' is the default branch name\n    if not git_repo_url or not output_directory or not github_access_token or not branch_name:\n        logger.error("Missing required parameters")  \n        return {"error": "Missing required parameters"}, 400\n\n    try:\n        temp_dir = None\n        try:\n            temp_dir = tempfile.mkdtemp()\n        except Exception as e:\n            logger.error(f"Error during UML generation: {str(e)}", exc_info=True)\n            return {"error": str(e)}, 500\n        finally:\n            # Clean up the temporary directory\n            if temp_dir is not None:\n                logger.info("Cleaning up temporary directory")\n                shutil.rmtree(temp_dir)\n\n        # Clone the repository\n        repo = clone_repo(git_repo_url, temp_dir, github_access_token)\n         \n        # Load the config\n        with open(\'src/routes/config.json\', \'r\') as f:\n            config = json.load(f', 'max_tokens': 1024}}
2024-01-20 21:26:18,754 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-01-20 21:26:18,755 - DEBUG - send_request_headers.complete
2024-01-20 21:26:18,755 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-01-20 21:26:18,755 - DEBUG - send_request_body.complete
2024-01-20 21:26:18,755 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-01-20 21:26:23,010 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 21 Jan 2024 03:26:23 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'Cache-Control', b'no-cache, must-revalidate'), (b'openai-model', b'gpt-3.5-turbo-instruct'), (b'openai-organization', b'user-lqvxa4hv7a8o8eyohtzmcoc6'), (b'openai-processing-ms', b'4191'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=15724800; includeSubDomains'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'250000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'248975'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'245ms'), (b'x-request-id', b'731dec0892a047c170690c4ca66f3e64'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Server', b'cloudflare'), (b'CF-RAY', b'848c7477cca169ed-ATL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-01-20 21:26:23,012 - INFO - HTTP Request: POST https://api.openai.com/v1/completions "HTTP/1.1 200 OK"
2024-01-20 21:26:23,013 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-01-20 21:26:23,014 - DEBUG - receive_response_body.complete
2024-01-20 21:26:23,014 - DEBUG - response_closed.started
2024-01-20 21:26:23,014 - DEBUG - response_closed.complete
2024-01-20 21:26:23,015 - DEBUG - HTTP Request: POST https://api.openai.com/v1/completions "200 OK"
2024-01-20 21:26:23,017 - INFO - Received response from OpenAI: )

        # Generate UML diagrams
        for diagram in config['diagrams']:
            plantuml = PlantUML()
            for file in diagram['files']:
                plantuml.process_file(file)
            plantuml.run(output_directory)

Class Diagram:
@startuml
class MainController
Entity thub_access_token
Entity branch_name
Entity git_repo_url
Entity output_directory

MainController -- thub_access_token : has
MainController -- branch_name : has
MainController -- git_repo_url : has
MainController -- output_directory : has

MainController : -logger
MainController : -temp_dir

note top of MainController
main controller
end note
@enduml

Sequence Diagram:
@startuml
hide footbox
title UML Generation

autonumber

actor User
boundary Controller
control MainController
database Database
participant TryCatch
participant config
participant clone_repo
participant PlantUML

User -> Controller: Submit request
activate Controller
Controller -> MainController: Get parameters
activate MainController
MainController -> MainController: Set default branch name
MainController -> MainController: Check for missing parameters
deactivate MainController
alt Parameters missing
MainController -> TryCatch: Log error
activate TryCatch
TryCatch --> Controller: Return error message
deactivate TryCatch
else Parameters valid
MainController -> TryCatch: Create temporary directory
activate TryCatch
alt Error creating directory
TryCatch --> MainController: Return error message
else Directory created successfully
TryCatch -> MainController: Clone repository
activate MainController
MainController -> Database: Get config file
activate Database
alt Config file not found
Database --> MainController: Return error message
else Config file found
Database -> MainController: Load config
MainController -> MainController: Generate UML diagrams
MainController -> MainController: Process each file in config
MainController -> PlantUML: Generate UML for each file
activate PlantUML
PlantUML -> output_directory: Save UML diagrams
plantuml run
deactivate PlantUML
MainController --> MainController: Return success message
end
deactivate MainController
@enduml
2024-01-20 21:26:23,017 - INFO - Sending prompt to OpenAI: Create UML diagrams in .puml format for the following code:

)
        
        def traverse_directories(repo, temp_dir, config):
            included_files = {}
            for item in repo.tree().traverse():
                if item.type == 'blob':  # This means it's a file, not a directory
                    for pattern in config['include']:
                        if fnmatch.fnmatch(item.path, pattern):
                            with open(os.path.join(temp_dir, item.path), 'r') as f:
                                included_files[item.path] = f.read()
                            break  # No need to check the remaining patterns
            return included_files

        # Retrieve the code from the repository
        included_files = traverse_directories(repo, temp_dir, config)

        logger.debug(f"Type of included_files: {type(included_files)}")
        logger.debug(f"Value of included_files: {included_files}")

        # Save the UML diagram to a file
        logger.info(f"Saving UML diagram to {output_directory}")
        final_output_paths = generate_conten
2024-01-20 21:26:23,019 - DEBUG - Request options: {'method': 'post', 'url': '/completions', 'files': None, 'json_data': {'model': 'gpt-3.5-turbo-instruct', 'prompt': 'Create UML diagrams in .puml format for the following code:\n\n)\n        \n        def traverse_directories(repo, temp_dir, config):\n            included_files = {}\n            for item in repo.tree().traverse():\n                if item.type == \'blob\':  # This means it\'s a file, not a directory\n                    for pattern in config[\'include\']:\n                        if fnmatch.fnmatch(item.path, pattern):\n                            with open(os.path.join(temp_dir, item.path), \'r\') as f:\n                                included_files[item.path] = f.read()\n                            break  # No need to check the remaining patterns\n            return included_files\n\n        # Retrieve the code from the repository\n        included_files = traverse_directories(repo, temp_dir, config)\n\n        logger.debug(f"Type of included_files: {type(included_files)}")\n        logger.debug(f"Value of included_files: {included_files}")\n\n        # Save the UML diagram to a file\n        logger.info(f"Saving UML diagram to {output_directory}")\n        final_output_paths = generate_conten', 'max_tokens': 1024}}
2024-01-20 21:26:23,021 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-01-20 21:26:23,021 - DEBUG - send_request_headers.complete
2024-01-20 21:26:23,021 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-01-20 21:26:23,022 - DEBUG - send_request_body.complete
2024-01-20 21:26:23,022 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-01-20 21:26:25,331 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 21 Jan 2024 03:26:25 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'Cache-Control', b'no-cache, must-revalidate'), (b'openai-model', b'gpt-3.5-turbo-instruct'), (b'openai-organization', b'user-lqvxa4hv7a8o8eyohtzmcoc6'), (b'openai-processing-ms', b'2060'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=15724800; includeSubDomains'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'250000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'248975'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'245ms'), (b'x-request-id', b'aa94e297d0ebc0e9a842975e87d4dc6e'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Server', b'cloudflare'), (b'CF-RAY', b'848c74928d0169ed-ATL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-01-20 21:26:25,334 - INFO - HTTP Request: POST https://api.openai.com/v1/completions "HTTP/1.1 200 OK"
2024-01-20 21:26:25,335 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-01-20 21:26:25,337 - DEBUG - receive_response_body.complete
2024-01-20 21:26:25,338 - DEBUG - response_closed.started
2024-01-20 21:26:25,338 - DEBUG - response_closed.complete
2024-01-20 21:26:25,339 - DEBUG - HTTP Request: POST https://api.openai.com/v1/completions "200 OK"
2024-01-20 21:26:25,340 - INFO - Received response from OpenAI: t_from_files(included_files)
        
        
@startuml

class TraverseDirectories {
    -repo: Repository
    -temp_dir: String
    -config: Config
    +included_files: Map<String, String>
    +traverse_directories(Repo, String, Config): Map<String, String>
}

class Repository {
    +tree(): Tree
}

class Tree {
    +traverse(): Iterable<TreeItem>
}

class TreeItem {
    -type: String
    -path: String
}

class Config {
    -include: List<String>
}

class Logger {
    +debug(message: String): void
    +info(message: String): void
}

class GenerateContent {
    +generate_content_from_files(files: Map<String, String>): List<String>
}

TraverseDirectories --> Repository
TraverseDirectories --> Config
TraverseDirectories --> Logger
TraverseDirectories --> GenerateContent
TraverseDirectories o-- Map

Repository --> Tree

Tree --> TreeItem

GenerateContent <-- TraverseDirectories

GenerateContent --> Logger
GenerateContent o-- Map

Logger <-- TraverseDirectories
Logger <-- GenerateContent


Config <.. TraverseDirectories
Config <.. GenerateContent

@enduml
2024-01-20 21:26:25,341 - INFO - Sending prompt to OpenAI: Create UML diagrams in .puml format for the following code:

t(included_files, output_directory)  # This is now a list of file paths
        logger.info(f"Final output paths: {final_output_paths}")

        for path in final_output_paths:
            logger.info(f"UML diagram saved at: {path}")  # Log the path where each UML diagram was saved

        return {
            "message": "UML diagrams generated successfully",
            "details": {
                "Repository": git_repo_url,
                "Output Paths": final_output_paths  # This is now a list of file paths
            }
        }, 200

    except Exception as e:
        logger.error(f"Error during UML generation: {str(e)}")
        return {"error": str(e)}, 500

    finally:
        # Clean up the temporary directory
        logger.info("Cleaning up temporary directory")
        shutil.rmtree(temp_dir)

 
2024-01-20 21:26:25,343 - DEBUG - Request options: {'method': 'post', 'url': '/completions', 'files': None, 'json_data': {'model': 'gpt-3.5-turbo-instruct', 'prompt': 'Create UML diagrams in .puml format for the following code:\n\nt(included_files, output_directory)  # This is now a list of file paths\n        logger.info(f"Final output paths: {final_output_paths}")\n\n        for path in final_output_paths:\n            logger.info(f"UML diagram saved at: {path}")  # Log the path where each UML diagram was saved\n\n        return {\n            "message": "UML diagrams generated successfully",\n            "details": {\n                "Repository": git_repo_url,\n                "Output Paths": final_output_paths  # This is now a list of file paths\n            }\n        }, 200\n\n    except Exception as e:\n        logger.error(f"Error during UML generation: {str(e)}")\n        return {"error": str(e)}, 500\n\n    finally:\n        # Clean up the temporary directory\n        logger.info("Cleaning up temporary directory")\n        shutil.rmtree(temp_dir)\n\n ', 'max_tokens': 1024}}
2024-01-20 21:26:25,345 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-01-20 21:26:25,345 - DEBUG - send_request_headers.complete
2024-01-20 21:26:25,345 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-01-20 21:26:25,346 - DEBUG - send_request_body.complete
2024-01-20 21:26:25,346 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-01-20 21:26:28,056 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 21 Jan 2024 03:26:28 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'Cache-Control', b'no-cache, must-revalidate'), (b'openai-model', b'gpt-3.5-turbo-instruct'), (b'openai-organization', b'user-lqvxa4hv7a8o8eyohtzmcoc6'), (b'openai-processing-ms', b'2608'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=15724800; includeSubDomains'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'250000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'248975'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'245ms'), (b'x-request-id', b'13cf384c947cad44e3e979d98d6de375'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Server', b'cloudflare'), (b'CF-RAY', b'848c74a10b2969ed-ATL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-01-20 21:26:28,058 - INFO - HTTP Request: POST https://api.openai.com/v1/completions "HTTP/1.1 200 OK"
2024-01-20 21:26:28,059 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-01-20 21:26:28,060 - DEBUG - receive_response_body.complete
2024-01-20 21:26:28,060 - DEBUG - response_closed.started
2024-01-20 21:26:28,061 - DEBUG - response_closed.complete
2024-01-20 21:26:28,061 - DEBUG - HTTP Request: POST https://api.openai.com/v1/completions "200 OK"
2024-01-20 21:26:28,064 - INFO - Received response from OpenAI:  @enduml

@startuml

class t {
  - included_files
  - output_directory
  + logger
  + final_output_paths
  + git_repo_url
  + temp_dir
  + e
  + t(included_files, output_directory)
  + generate_UML()
}

t..>logger: uses
t-->"output_paths": contains
t-->output_paths: "is a list"
t-->git_repo_url
t-->temp_dir: "contains"
t-->e: "contains"
t-->generate_UML: "calls"
output_paths..>"output_directory": in
git_repo_url-->"Repository": in
e-->500: "returns"
t-->500: "returns"
temp_dir-->"Cleaning up temporary directory": logs
e-->"Error during UML generation:": logs
output_paths-->"Log the path where each UML diagram was saved": logs

generate_UML-->"UML diagram saved at": logs
output_paths..>"Final output paths": in
t-->t(included_files, output_directory): "calls"
t-->{json}: returns
{json}-->"message": in
{json}-->"details": in
{json}-->"Repository": in
{json}-->"Output Paths": in
{json}-->t: returns

@enduml
2024-01-20 21:26:28,064 - INFO - UML code generated for src/routes/uml_from_repo.py: )

        # Generate UML diagrams
        for diagram in config['diagrams']:
            plantuml = PlantUML()
            for file in diagram['files']:
                plantuml.process_file(file)
            plantuml.run(output_directory)

Class Diagram:
@startuml
class MainController
Entity thub_access_token
Entity branch_name
Entity git_repo_url
Entity output_directory

MainController -- thub_access_token : has
MainController -- branch_name : has
MainController -- git_repo_url : has
MainController -- output_directory : has

MainController : -logger
MainController : -temp_dir

note top of MainController
main controller
end note
@enduml

Sequence Diagram:
@startuml
hide footbox
title UML Generation

autonumber

actor User
boundary Controller
control MainController
database Database
participant TryCatch
participant config
participant clone_repo
participant PlantUML

User -> Controller: Submit request
activate Controller
Controller -> MainController: Get parameters
activate MainController
MainController -> MainController: Set default branch name
MainController -> MainController: Check for missing parameters
deactivate MainController
alt Parameters missing
MainController -> TryCatch: Log error
activate TryCatch
TryCatch --> Controller: Return error message
deactivate TryCatch
else Parameters valid
MainController -> TryCatch: Create temporary directory
activate TryCatch
alt Error creating directory
TryCatch --> MainController: Return error message
else Directory created successfully
TryCatch -> MainController: Clone repository
activate MainController
MainController -> Database: Get config file
activate Database
alt Config file not found
Database --> MainController: Return error message
else Config file found
Database -> MainController: Load config
MainController -> MainController: Generate UML diagrams
MainController -> MainController: Process each file in config
MainController -> PlantUML: Generate UML for each file
activate PlantUML
PlantUML -> output_directory: Save UML diagrams
plantuml run
deactivate PlantUML
MainController --> MainController: Return success message
end
deactivate MainController
@endumlt_from_files(included_files)
        
        
@startuml

class TraverseDirectories {
    -repo: Repository
    -temp_dir: String
    -config: Config
    +included_files: Map<String, String>
    +traverse_directories(Repo, String, Config): Map<String, String>
}

class Repository {
    +tree(): Tree
}

class Tree {
    +traverse(): Iterable<TreeItem>
}

class TreeItem {
    -type: String
    -path: String
}

class Config {
    -include: List<String>
}

class Logger {
    +debug(message: String): void
    +info(message: String): void
}

class GenerateContent {
    +generate_content_from_files(files: Map<String, String>): List<String>
}

TraverseDirectories --> Repository
TraverseDirectories --> Config
TraverseDirectories --> Logger
TraverseDirectories --> GenerateContent
TraverseDirectories o-- Map

Repository --> Tree

Tree --> TreeItem

GenerateContent <-- TraverseDirectories

GenerateContent --> Logger
GenerateContent o-- Map

Logger <-- TraverseDirectories
Logger <-- GenerateContent


Config <.. TraverseDirectories
Config <.. GenerateContent

@enduml@enduml

@startuml

class t {
  - included_files
  - output_directory
  + logger
  + final_output_paths
  + git_repo_url
  + temp_dir
  + e
  + t(included_files, output_directory)
  + generate_UML()
}

t..>logger: uses
t-->"output_paths": contains
t-->output_paths: "is a list"
t-->git_repo_url
t-->temp_dir: "contains"
t-->e: "contains"
t-->generate_UML: "calls"
output_paths..>"output_directory": in
git_repo_url-->"Repository": in
e-->500: "returns"
t-->500: "returns"
temp_dir-->"Cleaning up temporary directory": logs
e-->"Error during UML generation:": logs
output_paths-->"Log the path where each UML diagram was saved": logs

generate_UML-->"UML diagram saved at": logs
output_paths..>"Final output paths": in
t-->t(included_files, output_directory): "calls"
t-->{json}: returns
{json}-->"message": in
{json}-->"details": in
{json}-->"Repository": in
{json}-->"Output Paths": in
{json}-->t: returns

@enduml
2024-01-20 21:26:28,065 - INFO - Saving generated output to /Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output/uml_from_repo.py.puml
2024-01-20 21:26:28,066 - INFO - Generated output saved to /Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output/uml_from_repo.py.puml
2024-01-20 21:26:28,066 - INFO - Skipping empty file: src/scripts/__init__.py
2024-01-20 21:26:28,066 - INFO - Processing file: src/scripts/execute_generate_uml.py
2024-01-20 21:26:28,067 - INFO - Sending prompt to OpenAI: Create UML diagrams in .puml format for the following code:

import json
import os
import requests
import logging
from logging import handlers
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Configure logging to write to a file
log_directory = '../../logs'
# Create the directory if it doesn't exist
os.makedirs(log_directory, exist_ok=True)  
log_filename = os.path.join(log_directory, 'execute_generate_uml.log')
log_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation
log_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
log_handler.setFormatter(log_formatter)
logger = logging.getLogger()
logger.addHandler(log_handler)
logger.setLevel(logging.DEBUG)


# Configure logging
logging.basicConfig(filename='execute_generate_uml.log', level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# Current file's directory
current_dir = os.path.dirname(os.path.abspath(__file__))
# Configuration file path
config_file_path = os.path.join(cu
2024-01-20 21:26:28,068 - DEBUG - Request options: {'method': 'post', 'url': '/completions', 'files': None, 'json_data': {'model': 'gpt-3.5-turbo-instruct', 'prompt': "Create UML diagrams in .puml format for the following code:\n\nimport json\nimport os\nimport requests\nimport logging\nfrom logging import handlers\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\n# Configure logging to write to a file\nlog_directory = '../../logs'\n# Create the directory if it doesn't exist\nos.makedirs(log_directory, exist_ok=True)  \nlog_filename = os.path.join(log_directory, 'execute_generate_uml.log')\nlog_handler = handlers.RotatingFileHandler(log_filename, maxBytes=1024*1024, backupCount=5)  # Log file with rotation\nlog_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\nlog_handler.setFormatter(log_formatter)\nlogger = logging.getLogger()\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.DEBUG)\n\n\n# Configure logging\nlogging.basicConfig(filename='execute_generate_uml.log', level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')\n\n# Current file's directory\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\n# Configuration file path\nconfig_file_path = os.path.join(cu", 'max_tokens': 1024}}
2024-01-20 21:26:28,069 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-01-20 21:26:28,070 - DEBUG - send_request_headers.complete
2024-01-20 21:26:28,070 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-01-20 21:26:28,070 - DEBUG - send_request_body.complete
2024-01-20 21:26:28,070 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-01-20 21:26:32,761 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 21 Jan 2024 03:26:32 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'Cache-Control', b'no-cache, must-revalidate'), (b'openai-model', b'gpt-3.5-turbo-instruct'), (b'openai-organization', b'user-lqvxa4hv7a8o8eyohtzmcoc6'), (b'openai-processing-ms', b'4595'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=15724800; includeSubDomains'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'250000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'248975'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'245ms'), (b'x-request-id', b'dcdefdbe44fe7dab3efcf5212eaae406'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Server', b'cloudflare'), (b'CF-RAY', b'848c74b20f7969ed-ATL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-01-20 21:26:32,763 - INFO - HTTP Request: POST https://api.openai.com/v1/completions "HTTP/1.1 200 OK"
2024-01-20 21:26:32,765 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-01-20 21:26:32,766 - DEBUG - receive_response_body.complete
2024-01-20 21:26:32,766 - DEBUG - response_closed.started
2024-01-20 21:26:32,766 - DEBUG - response_closed.complete
2024-01-20 21:26:32,767 - DEBUG - HTTP Request: POST https://api.openai.com/v1/completions "200 OK"
2024-01-20 21:26:32,769 - INFO - Received response from OpenAI: rrent_dir, 'config.json')

@startuml

class Config
    Current_dir : string
    Config_file_path : string
    + get_config() : dict
    + update_config(config) : void

Config --> Current_dir
Config --> Config_file_path
Config --o logger


class Logger
    + log_handler : RotatingFileHandler
    + log_formatter : Formatter
    + logger : Logger
    + set_handler(handler) : void
    + set_formatter(formatter) : void
    + add_handler(handler) : void
    + set_level(level) : void
    + log(msg, level) : void

Logger --o log_handler
Logger --o log_formatter
Logger --o logger


class UmlGenerator
    + config : Config
    + logger : Logger
    + execute() : void
    + generate_uml() : void
    + save_file(content) : void

UmlGenerator --o config
UmlGenerator --o logger

class RequestManager
    + api_url : string
    + config : Config
    + logger : Logger
    + get_umls(concepts) : list
    + process_request(response) : dict
    + send_request(params) : json

RequestManager --o config
RequestManager --o logger

class DOTEnv
    + load_dotenv() : void

DOTEnv --o UmlGenerator

class JsonManager
    + config_file_path : string
    + get_data() : dict
    + update_data(new_data) : void

JsonManager --o Config
JsonManager --o Config_file_path

class OS
    + get_current_dir() : string

OS --o Config
OS --o Current_dir

class Requests
    + get(url) : json

Requests --o RequestManager


@enduml

The diagram shows the classes and their relationships within the code. The JSON and OS classes have been added based on their usage in the code. The DOTEnv class is dependent on the UmlGenerator class as it is used within its code. The Config class is also dependent on the Logger class for handling logging. The UmlGenerator class uses the Config and Logger classes for its functionality, while also using the RequestManager class to handle API requests. All of these classes are used within the main program. 
2024-01-20 21:26:32,769 - INFO - Sending prompt to OpenAI: Create UML diagrams in .puml format for the following code:

rrent_dir, 'config.json')

# Read configuration from the JSON file
with open(config_file_path, 'r') as config_file:
    config_data = json.load(config_file)

# Retrieve the GitHub access token from environment variables
github_token = os.getenv('GITHUB_PAT')

# Endpoint URL
url = 'http://127.0.0.1:5000/generate-uml'

# Headers
headers = {
    'Content-Type': 'application/json'
}

# Update the GitHub access token and local directory in the config data
config_data['gitHubAccessToken'] = github_token
config_data['local_dir'] = os.path.join(current_dir, '../..', 'output')

# Log the JSON data being sent in the request
logging.info(f'Sending JSON data to {url}:')
logging.info(json.dumps(config_data, indent=2))

try:
    # Make the POST request
    response = requests.post(url, headers=headers, json=config_data)

    # Log the response from the server
    logging.info(f'Response from server ({url}):')
    logging.info(f'Status Code: {response.status_code}')
    logging.info(f'Response Text: {response.text}')

    #
2024-01-20 21:26:32,771 - DEBUG - Request options: {'method': 'post', 'url': '/completions', 'files': None, 'json_data': {'model': 'gpt-3.5-turbo-instruct', 'prompt': "Create UML diagrams in .puml format for the following code:\n\nrrent_dir, 'config.json')\n\n# Read configuration from the JSON file\nwith open(config_file_path, 'r') as config_file:\n    config_data = json.load(config_file)\n\n# Retrieve the GitHub access token from environment variables\ngithub_token = os.getenv('GITHUB_PAT')\n\n# Endpoint URL\nurl = 'http://127.0.0.1:5000/generate-uml'\n\n# Headers\nheaders = {\n    'Content-Type': 'application/json'\n}\n\n# Update the GitHub access token and local directory in the config data\nconfig_data['gitHubAccessToken'] = github_token\nconfig_data['local_dir'] = os.path.join(current_dir, '../..', 'output')\n\n# Log the JSON data being sent in the request\nlogging.info(f'Sending JSON data to {url}:')\nlogging.info(json.dumps(config_data, indent=2))\n\ntry:\n    # Make the POST request\n    response = requests.post(url, headers=headers, json=config_data)\n\n    # Log the response from the server\n    logging.info(f'Response from server ({url}):')\n    logging.info(f'Status Code: {response.status_code}')\n    logging.info(f'Response Text: {response.text}')\n\n    #", 'max_tokens': 1024}}
2024-01-20 21:26:32,772 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-01-20 21:26:32,773 - DEBUG - send_request_headers.complete
2024-01-20 21:26:32,773 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-01-20 21:26:32,773 - DEBUG - send_request_body.complete
2024-01-20 21:26:32,773 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-01-20 21:26:34,252 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 21 Jan 2024 03:26:34 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'Cache-Control', b'no-cache, must-revalidate'), (b'openai-model', b'gpt-3.5-turbo-instruct'), (b'openai-organization', b'user-lqvxa4hv7a8o8eyohtzmcoc6'), (b'openai-processing-ms', b'1349'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=15724800; includeSubDomains'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'250000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'248975'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'245ms'), (b'x-request-id', b'c832ec875efe36673b72b93ee90459ce'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Server', b'cloudflare'), (b'CF-RAY', b'848c74cf9cab69ed-ATL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-01-20 21:26:34,253 - INFO - HTTP Request: POST https://api.openai.com/v1/completions "HTTP/1.1 200 OK"
2024-01-20 21:26:34,253 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-01-20 21:26:34,253 - DEBUG - receive_response_body.complete
2024-01-20 21:26:34,253 - DEBUG - response_closed.started
2024-01-20 21:26:34,254 - DEBUG - response_closed.complete
2024-01-20 21:26:34,254 - DEBUG - HTTP Request: POST https://api.openai.com/v1/completions "200 OK"
2024-01-20 21:26:34,255 - INFO - Received response from OpenAI:  Check if the response was successful
    if response.status_code == 200:
        # Save the UML diagram to a file
        with open('diagram.png', 'wb') as f:
            f.write(response.content)
exc

@startuml
class ConfigData {
    - String gitHubAccessToken
    - String local_dir
}
class RequestSender {
    - String url
    - Map headers
    + json_data
    + response
}
note right of ConfigData: read from JSON file
ConfigData -- RequestSender : <m>
RequestSender --|> ConfigData : has-a
note bottom of RequestSender: uses url and headers
@enduml
2024-01-20 21:26:34,255 - INFO - Sending prompt to OpenAI: Create UML diagrams in .puml format for the following code:

 Print the response from the server
    print(response.text)

    # Save the response to a file in the output directory
    output_dir = os.path.join(current_dir, '../..', 'output')
    os.makedirs(output_dir, exist_ok=True)
    with open(os.path.join(output_dir, 'response.json'), 'w') as output_file:
        json.dump(response.json(), output_file, indent=2)

except Exception as e:
    # Log any exceptions that occur
    logging.error(f'Error occurred: {str(e)}')
2024-01-20 21:26:34,257 - DEBUG - Request options: {'method': 'post', 'url': '/completions', 'files': None, 'json_data': {'model': 'gpt-3.5-turbo-instruct', 'prompt': "Create UML diagrams in .puml format for the following code:\n\n Print the response from the server\n    print(response.text)\n\n    # Save the response to a file in the output directory\n    output_dir = os.path.join(current_dir, '../..', 'output')\n    os.makedirs(output_dir, exist_ok=True)\n    with open(os.path.join(output_dir, 'response.json'), 'w') as output_file:\n        json.dump(response.json(), output_file, indent=2)\n\nexcept Exception as e:\n    # Log any exceptions that occur\n    logging.error(f'Error occurred: {str(e)}')", 'max_tokens': 1024}}
2024-01-20 21:26:34,257 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-01-20 21:26:34,258 - DEBUG - send_request_headers.complete
2024-01-20 21:26:34,258 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-01-20 21:26:34,258 - DEBUG - send_request_body.complete
2024-01-20 21:26:34,258 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-01-20 21:26:35,384 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 21 Jan 2024 03:26:35 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'Cache-Control', b'no-cache, must-revalidate'), (b'openai-model', b'gpt-3.5-turbo-instruct'), (b'openai-organization', b'user-lqvxa4hv7a8o8eyohtzmcoc6'), (b'openai-processing-ms', b'1038'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=15724800; includeSubDomains'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'250000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'248975'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'245ms'), (b'x-request-id', b'02c9654cb4c38a72e72113b254485424'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Server', b'cloudflare'), (b'CF-RAY', b'848c74d8af1a69ed-ATL'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-01-20 21:26:35,386 - INFO - HTTP Request: POST https://api.openai.com/v1/completions "HTTP/1.1 200 OK"
2024-01-20 21:26:35,386 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-01-20 21:26:35,387 - DEBUG - receive_response_body.complete
2024-01-20 21:26:35,387 - DEBUG - response_closed.started
2024-01-20 21:26:35,387 - DEBUG - response_closed.complete
2024-01-20 21:26:35,387 - DEBUG - HTTP Request: POST https://api.openai.com/v1/completions "200 OK"
2024-01-20 21:26:35,389 - INFO - Received response from OpenAI: 

@startuml

class Client {
    - output_dir : String
    + main() : void
}

class Server {
    - response : String
    + getResponse() : String
}

Client o-- Server : makeRequest()
Client o-- Logger : Log exception
Client o-- os : outputDirExist()
Client o-- json : saveResponse()

class Logger {
    - ERROR : String
    + logError(e: Exception) : void
}

Client --> output_dir

@enduml
2024-01-20 21:26:35,389 - INFO - UML code generated for src/scripts/execute_generate_uml.py: rrent_dir, 'config.json')

@startuml

class Config
    Current_dir : string
    Config_file_path : string
    + get_config() : dict
    + update_config(config) : void

Config --> Current_dir
Config --> Config_file_path
Config --o logger


class Logger
    + log_handler : RotatingFileHandler
    + log_formatter : Formatter
    + logger : Logger
    + set_handler(handler) : void
    + set_formatter(formatter) : void
    + add_handler(handler) : void
    + set_level(level) : void
    + log(msg, level) : void

Logger --o log_handler
Logger --o log_formatter
Logger --o logger


class UmlGenerator
    + config : Config
    + logger : Logger
    + execute() : void
    + generate_uml() : void
    + save_file(content) : void

UmlGenerator --o config
UmlGenerator --o logger

class RequestManager
    + api_url : string
    + config : Config
    + logger : Logger
    + get_umls(concepts) : list
    + process_request(response) : dict
    + send_request(params) : json

RequestManager --o config
RequestManager --o logger

class DOTEnv
    + load_dotenv() : void

DOTEnv --o UmlGenerator

class JsonManager
    + config_file_path : string
    + get_data() : dict
    + update_data(new_data) : void

JsonManager --o Config
JsonManager --o Config_file_path

class OS
    + get_current_dir() : string

OS --o Config
OS --o Current_dir

class Requests
    + get(url) : json

Requests --o RequestManager


@enduml

The diagram shows the classes and their relationships within the code. The JSON and OS classes have been added based on their usage in the code. The DOTEnv class is dependent on the UmlGenerator class as it is used within its code. The Config class is also dependent on the Logger class for handling logging. The UmlGenerator class uses the Config and Logger classes for its functionality, while also using the RequestManager class to handle API requests. All of these classes are used within the main program.Check if the response was successful
    if response.status_code == 200:
        # Save the UML diagram to a file
        with open('diagram.png', 'wb') as f:
            f.write(response.content)
exc

@startuml
class ConfigData {
    - String gitHubAccessToken
    - String local_dir
}
class RequestSender {
    - String url
    - Map headers
    + json_data
    + response
}
note right of ConfigData: read from JSON file
ConfigData -- RequestSender : <m>
RequestSender --|> ConfigData : has-a
note bottom of RequestSender: uses url and headers
@enduml@startuml

class Client {
    - output_dir : String
    + main() : void
}

class Server {
    - response : String
    + getResponse() : String
}

Client o-- Server : makeRequest()
Client o-- Logger : Log exception
Client o-- os : outputDirExist()
Client o-- json : saveResponse()

class Logger {
    - ERROR : String
    + logError(e: Exception) : void
}

Client --> output_dir

@enduml
2024-01-20 21:26:35,389 - INFO - Saving generated output to /Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output/execute_generate_uml.py.puml
2024-01-20 21:26:35,390 - INFO - Generated output saved to /Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output/execute_generate_uml.py.puml
2024-01-20 21:26:35,390 - INFO - Generated file paths: ['/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output/code_to_uml.py.puml', '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output/retrieve_code.py.puml', '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output/uml_from_repo.py.puml', '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output/execute_generate_uml.py.puml']
2024-01-20 21:26:35,390 - INFO - Final output paths: (['/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output/code_to_uml.py.puml', '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output/retrieve_code.py.puml', '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output/uml_from_repo.py.puml', '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output/execute_generate_uml.py.puml'], 'fo(f"Generating UML diagram for {file_path}")  # Log the file path\n        file_paths.append(file_path)  # Store the file path in the list\n        generated_code += api.generate(code)  # Generate code for the files and concatenate the results\n    logging.info(f"Generated code: {generated_code}")  # Log the generated code\n    api.create_diagram(generated_code, output_directory)  # Create a UML diagram using the API and the generated code\n\n# main function\nif __name__ == \'__main__\':\n    # Define input files and output directory\n    files = {\n        \'main.py\': \'Code for the main function\',\n        \'helper.py\': \'Code for helper functions\'\n    }\n    output_directory = \'diagrams\'\n    # Generate UML diagram for the files and save to output directory\n    generate_content(files, output_directory)\n\n@startuml\n\n[*] --> code_to_uml\n\nclass code_to_uml.py {\n+ api: OpenAIAPI\n+ log_directory: String\n+ log_filename: String\n+ log_handler: RotatingFileHandler\n+ log_formatter: Formatter\n+ logger: logging\n+ generate_content(): void\n+ main(): void\n}\n\ncode_to_uml.py --> OpenAIAPI\ncode_to_uml.py --> logging\n\nclass OpenAIAPI {\n+ generate(): String\n+ create_diagram(): void\n}\n\nclass logging {\n+ handlers: handlers\n+ formatter: Formatter\nlogger: debug\ninfo\n}\n\ncode_to_uml.py --> main.py\ncode_to_uml.py --> helper.py\n\nclass main.py {\n}\n\nclass helper.py {\n}\n\nmain.py --> generate_content()\nhelper.py --> generate_content()\n\ngenerate_content() --> logging\nlogging --> log_directory\nlogging --> log_filename\nlogging --> log_handler\nlogging --> log_formatter\nlogging --> logger\nlogger --> logging: debug, info\nlogging --> file_paths\nlogging --> generated_code\ngenerate_content() --> api: create_diagram()\napi --> generate()\ngenerate() --> api: generate()\ngenerate() --> code\ngenerate() --> output\napi --> create_diagram()\ncreate_diagram() --> generated_code\ncreate_diagram() --> output_directory\n\n@enduml@startuml\n\nclass UMLGenerator {\n    -generated_code: str\n    -file_paths: list\n    +fo(): void\n    +generate_from_code(): str\n    +save_generated_output(): str\n    +file_name: str\n    +final_output_path: str\n    +logging: Logger\n    +api: API\n    +output_directory: str\n    +file_path: str\n    +generated_code_for_file: str\n    +file_paths: list\n}\n\nUMLGenerator o-- Logger\nUMLGenerator o-- API\n\nclass Logger {\n    +info(): void\n    +error(): void\n}\n\nclass API {\n    +generate_from_code(): str\n    +save_generated_output(): str\n}\n\nclass API {\n    +file_path: str\n}\n\nclass API {\n    +generated_code_for_file: str\n}\n\nclass API {\n    +output_directory: str\n}\n\nclass API {\n    +final_output_path: str\n}\n\nclass os {\n    +basename(): str\n}\n\nUMLGenerator --> Logger: uses\nUMLGenerator --> API: uses\nUMLGenerator --> generated_code_for_file: aggregates\nUMLGenerator --> file_paths: aggregates\nUMLGenerator --> logging: uses\nUMLGenerator --> output_directory: contains\nUMLGenerator --> file_path: contains\nUMLGenerator --> generated_code: aggregates\n\n@endumlreturn True\n    except Exception as e:\n        logger.error(f"Error cloning repository: {repo_url} - {e}")\n        return False\n\n\ndef retrieve_code(repo_url, temp_dir, access_token, dest_dir, branch=\'master\'):\n    # Clone the repository to a temporary directory\n    cloned = clone_repo(repo_url, temp_dir, access_token)\n    \n    if cloned:\n        try:\n            repo = git.Repo(temp_dir)\n            # Checkout the specified branch\n            repo.git.checkout(branch)\n            # Copy the files to the destination directory\n            os.system(f\'cp -r {temp_dir}/* {dest_dir}\')\n            logger.info(f"Successfully retrieved code from {repo_url}")\n            return True\n        except Exception as e:\n            logger.error(f"Error retrieving code from {repo_url} - {e}")\n            return False\n\n\n@startuml\n\nclass GitManager {\n    - repo_url : string\n    - temp_dir : string\n    - access_token : string\n    - dest_dir : string\n    - branch : string\n    + clone_repo(repo_url, temp_dir, access_token) : boolean\n    + retrieve_code(repo_url, temp_dir, access_token, dest_dir, branch=\'master\') : boolean\n}\n\nnote left of GitManager: Uses git\\nlibrary\n\nclass git.Repo {\n    + clone_from(repo_url, temp_dir) : git.Repo\n    + git : GitCommandType\n}\n\nclass os {\n    + makedirs(directory, exist_ok=False) : None\n    + system(command) : int\n}\n\nGitManager .. git.Repo : uses\nGitManager .. os : uses\n\n@endumlif file.path.endswith(\'.py\') and file.path not in ignore_list:  # Only include files that match the .py extension and are not in the ignore list\n                included_files[file.path] = file.data_stream.read().decode("utf-8")  # Store the file path as the key and the code as the value\n                \n        return included_files  # Return the dictionary of included files\n    except Exception as e:\n        logger.error(f"Failed to retrieve code: {str(e)}")\n        raise ValueError(f"Failed to retrieve code: {str(e)}")\n\n\n\n@startuml\n\nclass Repo {\n    -path : str\n    -tree : list\n    -remote : str\n    -branches : list\n    +git : Repository\n    +clone() : Repository\n    +fetch() : Repository\n    +checkout(branch_name : str) : void\n    +tree() : list\n}\n\nclass Logger {\n    +error(message : str) : void\n    +info(message : str) : void\n}\n\nclass File {\n    -path : str\n    -data_stream : Stream\n    +read() : str\n}\n\nclass Config {\n    -file_path : str\n    -ignore_list : list\n    -include_list : list\n    +load() : dict\n    +get_ignore_list() : list\n    +get_include_list() : list\n}\n\nclass CodeRetriever {\n    -repo : Repo\n    -branch_name : str\n    +retrieve_code(repo : Repo, branch_name : str) : dict\n}\n\nCodeRetriever --> Repo : dependency\nCodeRetriever --> Logger : dependency\nCodeRetriever --> Config : dependency\nRepo --> File : contains\nConfig --> File : contains\n\ncode {\n\nCodeRetriever --> Logger : usage\nCodeRetriever --> Repo : method call\nRepo --> Logger : usage\nRepo --> Config : method call\nRepo --> File : method call\nRepo --> Stream : method call\n\n}\n\nexception {\nCodeRetriever --> ValueError : raise\nCodeRetriever --> Exception : catch\nRepo --> Exception : catch\n}\n\n\n@enduml@startuml\nclass FileUtils{\n    -include_list: str[]\n    -ignore_list: str[]\n    -included_files: dict\n    -logger: Logger\n    \n    +__init__(include_list: str[], ignore_list: str[])\n    +retrieve_code(files: str[]): dict\n}\n\nclass Logger{\n    +info(msg: str)\n    +warning(msg: str)\n    +error(msg: str)\n}\n\nclass File{\n    -path: str\n    -abspath: str\n    \n    +endswith(ext: str)\n}\n\nFile <|-- FileUtils\nLogger <|-- FileUtils\n\nnote top: "Main control flow" as MainControlFlow\nMainControlFlow ..> FileUtils\n\nMainControlFlow --> if any(file.path.endswith(ext) for ext in include_list)\nMainControlFlow --> not any(ignored_file in file.path for ignored_file in ignore_list)\n\nif any(file.path.endswith(ext) for ext in include_list) ..> File\nnot any(ignored_file in file.path for ignored_file in ignore_list) ..> File\n\nif any(file.path.endswith(ext) for ext in include_list) ==> open\nnot any(ignored_file in file.path for ignored_file in ignore_list) ==> open\n\nopen --> with open(file.abspath, \'r\') as f\nopen --> try..except\n\nwith open(file.abspath, \'r\') as f --> included_files[file.path] = f.read()\ntry..except --> print\ntry..except --> logger.warning\ntry..except --> FileNotFoundError\n\nprint --> "Diagnostic print statement"\n\nLogger <--: logger\nlogger ..> MainControlFlow\n\nincluded_files[file.path] = f.read() ==> logger.info(f"Included file: {file.path}")\n\nFileNotFoundError ..> print\nFileNotFoundError ..> logger.warning\n\nLogger <--: logger\nlogger ..> MainControlFlow\n\nprint --> "Ignoring missing file: {file.path}"\nlogger.warning(f"Ignoring missing file: {file.path}") ==> print\n\nMainControlFlow --> return included_files\n\nMainControlFlow --> Logger.error\n\nLogger ..> MainControlFlow\n\nnote bottom: Catch all exceptions\\nand raise ValueError as needed\n\nLogger.error ==> raise ValueError(f"Failed to retrieve code: {str(e)}")\nraise ValueError(f"Failed to retrieve code: {str(e)}") --> return included_files\n\nMainControlFlow ..> Logger\nLogger ..> raise: ValueError\nLogger ..> except: Exception\n\nnote left: Calling code as follows:\\ninclude_list = [\'.py\', \'.txt\']\\nignore_list = [\'tests\', \'temp\']\\nfiles = [\'test.py\', \'index.txt\', \'app.py\', \'tests/utils.py\', \'temp/index.txt\']\\n\nnote left: Include list: [\'.py\', \'.txt\']\\nIgnore list: [\'tests\', \'temp\']\\nFiles: [\'test.py\', \'index.txt\', \'app.py\', \'tests/utils.py\', \'temp/index.txt\']\n@enduml)\n\n        # Generate UML diagrams\n        for diagram in config[\'diagrams\']:\n            plantuml = PlantUML()\n            for file in diagram[\'files\']:\n                plantuml.process_file(file)\n            plantuml.run(output_directory)\n\nClass Diagram:\n@startuml\nclass MainController\nEntity thub_access_token\nEntity branch_name\nEntity git_repo_url\nEntity output_directory\n\nMainController -- thub_access_token : has\nMainController -- branch_name : has\nMainController -- git_repo_url : has\nMainController -- output_directory : has\n\nMainController : -logger\nMainController : -temp_dir\n\nnote top of MainController\nmain controller\nend note\n@enduml\n\nSequence Diagram:\n@startuml\nhide footbox\ntitle UML Generation\n\nautonumber\n\nactor User\nboundary Controller\ncontrol MainController\ndatabase Database\nparticipant TryCatch\nparticipant config\nparticipant clone_repo\nparticipant PlantUML\n\nUser -> Controller: Submit request\nactivate Controller\nController -> MainController: Get parameters\nactivate MainController\nMainController -> MainController: Set default branch name\nMainController -> MainController: Check for missing parameters\ndeactivate MainController\nalt Parameters missing\nMainController -> TryCatch: Log error\nactivate TryCatch\nTryCatch --> Controller: Return error message\ndeactivate TryCatch\nelse Parameters valid\nMainController -> TryCatch: Create temporary directory\nactivate TryCatch\nalt Error creating directory\nTryCatch --> MainController: Return error message\nelse Directory created successfully\nTryCatch -> MainController: Clone repository\nactivate MainController\nMainController -> Database: Get config file\nactivate Database\nalt Config file not found\nDatabase --> MainController: Return error message\nelse Config file found\nDatabase -> MainController: Load config\nMainController -> MainController: Generate UML diagrams\nMainController -> MainController: Process each file in config\nMainController -> PlantUML: Generate UML for each file\nactivate PlantUML\nPlantUML -> output_directory: Save UML diagrams\nplantuml run\ndeactivate PlantUML\nMainController --> MainController: Return success message\nend\ndeactivate MainController\n@endumlt_from_files(included_files)\n        \n        \n@startuml\n\nclass TraverseDirectories {\n    -repo: Repository\n    -temp_dir: String\n    -config: Config\n    +included_files: Map<String, String>\n    +traverse_directories(Repo, String, Config): Map<String, String>\n}\n\nclass Repository {\n    +tree(): Tree\n}\n\nclass Tree {\n    +traverse(): Iterable<TreeItem>\n}\n\nclass TreeItem {\n    -type: String\n    -path: String\n}\n\nclass Config {\n    -include: List<String>\n}\n\nclass Logger {\n    +debug(message: String): void\n    +info(message: String): void\n}\n\nclass GenerateContent {\n    +generate_content_from_files(files: Map<String, String>): List<String>\n}\n\nTraverseDirectories --> Repository\nTraverseDirectories --> Config\nTraverseDirectories --> Logger\nTraverseDirectories --> GenerateContent\nTraverseDirectories o-- Map\n\nRepository --> Tree\n\nTree --> TreeItem\n\nGenerateContent <-- TraverseDirectories\n\nGenerateContent --> Logger\nGenerateContent o-- Map\n\nLogger <-- TraverseDirectories\nLogger <-- GenerateContent\n\n\nConfig <.. TraverseDirectories\nConfig <.. GenerateContent\n\n@enduml@enduml\n\n@startuml\n\nclass t {\n  - included_files\n  - output_directory\n  + logger\n  + final_output_paths\n  + git_repo_url\n  + temp_dir\n  + e\n  + t(included_files, output_directory)\n  + generate_UML()\n}\n\nt..>logger: uses\nt-->"output_paths": contains\nt-->output_paths: "is a list"\nt-->git_repo_url\nt-->temp_dir: "contains"\nt-->e: "contains"\nt-->generate_UML: "calls"\noutput_paths..>"output_directory": in\ngit_repo_url-->"Repository": in\ne-->500: "returns"\nt-->500: "returns"\ntemp_dir-->"Cleaning up temporary directory": logs\ne-->"Error during UML generation:": logs\noutput_paths-->"Log the path where each UML diagram was saved": logs\n\ngenerate_UML-->"UML diagram saved at": logs\noutput_paths..>"Final output paths": in\nt-->t(included_files, output_directory): "calls"\nt-->{json}: returns\n{json}-->"message": in\n{json}-->"details": in\n{json}-->"Repository": in\n{json}-->"Output Paths": in\n{json}-->t: returns\n\n@endumlrrent_dir, \'config.json\')\n\n@startuml\n\nclass Config\n    Current_dir : string\n    Config_file_path : string\n    + get_config() : dict\n    + update_config(config) : void\n\nConfig --> Current_dir\nConfig --> Config_file_path\nConfig --o logger\n\n\nclass Logger\n    + log_handler : RotatingFileHandler\n    + log_formatter : Formatter\n    + logger : Logger\n    + set_handler(handler) : void\n    + set_formatter(formatter) : void\n    + add_handler(handler) : void\n    + set_level(level) : void\n    + log(msg, level) : void\n\nLogger --o log_handler\nLogger --o log_formatter\nLogger --o logger\n\n\nclass UmlGenerator\n    + config : Config\n    + logger : Logger\n    + execute() : void\n    + generate_uml() : void\n    + save_file(content) : void\n\nUmlGenerator --o config\nUmlGenerator --o logger\n\nclass RequestManager\n    + api_url : string\n    + config : Config\n    + logger : Logger\n    + get_umls(concepts) : list\n    + process_request(response) : dict\n    + send_request(params) : json\n\nRequestManager --o config\nRequestManager --o logger\n\nclass DOTEnv\n    + load_dotenv() : void\n\nDOTEnv --o UmlGenerator\n\nclass JsonManager\n    + config_file_path : string\n    + get_data() : dict\n    + update_data(new_data) : void\n\nJsonManager --o Config\nJsonManager --o Config_file_path\n\nclass OS\n    + get_current_dir() : string\n\nOS --o Config\nOS --o Current_dir\n\nclass Requests\n    + get(url) : json\n\nRequests --o RequestManager\n\n\n@enduml\n\nThe diagram shows the classes and their relationships within the code. The JSON and OS classes have been added based on their usage in the code. The DOTEnv class is dependent on the UmlGenerator class as it is used within its code. The Config class is also dependent on the Logger class for handling logging. The UmlGenerator class uses the Config and Logger classes for its functionality, while also using the RequestManager class to handle API requests. All of these classes are used within the main program.Check if the response was successful\n    if response.status_code == 200:\n        # Save the UML diagram to a file\n        with open(\'diagram.png\', \'wb\') as f:\n            f.write(response.content)\nexc\n\n@startuml\nclass ConfigData {\n    - String gitHubAccessToken\n    - String local_dir\n}\nclass RequestSender {\n    - String url\n    - Map headers\n    + json_data\n    + response\n}\nnote right of ConfigData: read from JSON file\nConfigData -- RequestSender : <m>\nRequestSender --|> ConfigData : has-a\nnote bottom of RequestSender: uses url and headers\n@enduml@startuml\n\nclass Client {\n    - output_dir : String\n    + main() : void\n}\n\nclass Server {\n    - response : String\n    + getResponse() : String\n}\n\nClient o-- Server : makeRequest()\nClient o-- Logger : Log exception\nClient o-- os : outputDirExist()\nClient o-- json : saveResponse()\n\nclass Logger {\n    - ERROR : String\n    + logError(e: Exception) : void\n}\n\nClient --> output_dir\n\n@enduml')
2024-01-20 21:26:35,392 - INFO - UML diagram saved at: ['/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output/code_to_uml.py.puml', '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output/retrieve_code.py.puml', '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output/uml_from_repo.py.puml', '/Users/preston/Documents/gitRepos/diagrammr/src/scripts/../../output/execute_generate_uml.py.puml']
2024-01-20 21:26:35,393 - INFO - UML diagram saved at: fo(f"Generating UML diagram for {file_path}")  # Log the file path
        file_paths.append(file_path)  # Store the file path in the list
        generated_code += api.generate(code)  # Generate code for the files and concatenate the results
    logging.info(f"Generated code: {generated_code}")  # Log the generated code
    api.create_diagram(generated_code, output_directory)  # Create a UML diagram using the API and the generated code

# main function
if __name__ == '__main__':
    # Define input files and output directory
    files = {
        'main.py': 'Code for the main function',
        'helper.py': 'Code for helper functions'
    }
    output_directory = 'diagrams'
    # Generate UML diagram for the files and save to output directory
    generate_content(files, output_directory)

@startuml

[*] --> code_to_uml

class code_to_uml.py {
+ api: OpenAIAPI
+ log_directory: String
+ log_filename: String
+ log_handler: RotatingFileHandler
+ log_formatter: Formatter
+ logger: logging
+ generate_content(): void
+ main(): void
}

code_to_uml.py --> OpenAIAPI
code_to_uml.py --> logging

class OpenAIAPI {
+ generate(): String
+ create_diagram(): void
}

class logging {
+ handlers: handlers
+ formatter: Formatter
logger: debug
info
}

code_to_uml.py --> main.py
code_to_uml.py --> helper.py

class main.py {
}

class helper.py {
}

main.py --> generate_content()
helper.py --> generate_content()

generate_content() --> logging
logging --> log_directory
logging --> log_filename
logging --> log_handler
logging --> log_formatter
logging --> logger
logger --> logging: debug, info
logging --> file_paths
logging --> generated_code
generate_content() --> api: create_diagram()
api --> generate()
generate() --> api: generate()
generate() --> code
generate() --> output
api --> create_diagram()
create_diagram() --> generated_code
create_diagram() --> output_directory

@enduml@startuml

class UMLGenerator {
    -generated_code: str
    -file_paths: list
    +fo(): void
    +generate_from_code(): str
    +save_generated_output(): str
    +file_name: str
    +final_output_path: str
    +logging: Logger
    +api: API
    +output_directory: str
    +file_path: str
    +generated_code_for_file: str
    +file_paths: list
}

UMLGenerator o-- Logger
UMLGenerator o-- API

class Logger {
    +info(): void
    +error(): void
}

class API {
    +generate_from_code(): str
    +save_generated_output(): str
}

class API {
    +file_path: str
}

class API {
    +generated_code_for_file: str
}

class API {
    +output_directory: str
}

class API {
    +final_output_path: str
}

class os {
    +basename(): str
}

UMLGenerator --> Logger: uses
UMLGenerator --> API: uses
UMLGenerator --> generated_code_for_file: aggregates
UMLGenerator --> file_paths: aggregates
UMLGenerator --> logging: uses
UMLGenerator --> output_directory: contains
UMLGenerator --> file_path: contains
UMLGenerator --> generated_code: aggregates

@endumlreturn True
    except Exception as e:
        logger.error(f"Error cloning repository: {repo_url} - {e}")
        return False


def retrieve_code(repo_url, temp_dir, access_token, dest_dir, branch='master'):
    # Clone the repository to a temporary directory
    cloned = clone_repo(repo_url, temp_dir, access_token)
    
    if cloned:
        try:
            repo = git.Repo(temp_dir)
            # Checkout the specified branch
            repo.git.checkout(branch)
            # Copy the files to the destination directory
            os.system(f'cp -r {temp_dir}/* {dest_dir}')
            logger.info(f"Successfully retrieved code from {repo_url}")
            return True
        except Exception as e:
            logger.error(f"Error retrieving code from {repo_url} - {e}")
            return False


@startuml

class GitManager {
    - repo_url : string
    - temp_dir : string
    - access_token : string
    - dest_dir : string
    - branch : string
    + clone_repo(repo_url, temp_dir, access_token) : boolean
    + retrieve_code(repo_url, temp_dir, access_token, dest_dir, branch='master') : boolean
}

note left of GitManager: Uses git\nlibrary

class git.Repo {
    + clone_from(repo_url, temp_dir) : git.Repo
    + git : GitCommandType
}

class os {
    + makedirs(directory, exist_ok=False) : None
    + system(command) : int
}

GitManager .. git.Repo : uses
GitManager .. os : uses

@endumlif file.path.endswith('.py') and file.path not in ignore_list:  # Only include files that match the .py extension and are not in the ignore list
                included_files[file.path] = file.data_stream.read().decode("utf-8")  # Store the file path as the key and the code as the value
                
        return included_files  # Return the dictionary of included files
    except Exception as e:
        logger.error(f"Failed to retrieve code: {str(e)}")
        raise ValueError(f"Failed to retrieve code: {str(e)}")



@startuml

class Repo {
    -path : str
    -tree : list
    -remote : str
    -branches : list
    +git : Repository
    +clone() : Repository
    +fetch() : Repository
    +checkout(branch_name : str) : void
    +tree() : list
}

class Logger {
    +error(message : str) : void
    +info(message : str) : void
}

class File {
    -path : str
    -data_stream : Stream
    +read() : str
}

class Config {
    -file_path : str
    -ignore_list : list
    -include_list : list
    +load() : dict
    +get_ignore_list() : list
    +get_include_list() : list
}

class CodeRetriever {
    -repo : Repo
    -branch_name : str
    +retrieve_code(repo : Repo, branch_name : str) : dict
}

CodeRetriever --> Repo : dependency
CodeRetriever --> Logger : dependency
CodeRetriever --> Config : dependency
Repo --> File : contains
Config --> File : contains

code {

CodeRetriever --> Logger : usage
CodeRetriever --> Repo : method call
Repo --> Logger : usage
Repo --> Config : method call
Repo --> File : method call
Repo --> Stream : method call

}

exception {
CodeRetriever --> ValueError : raise
CodeRetriever --> Exception : catch
Repo --> Exception : catch
}


@enduml@startuml
class FileUtils{
    -include_list: str[]
    -ignore_list: str[]
    -included_files: dict
    -logger: Logger
    
    +__init__(include_list: str[], ignore_list: str[])
    +retrieve_code(files: str[]): dict
}

class Logger{
    +info(msg: str)
    +warning(msg: str)
    +error(msg: str)
}

class File{
    -path: str
    -abspath: str
    
    +endswith(ext: str)
}

File <|-- FileUtils
Logger <|-- FileUtils

note top: "Main control flow" as MainControlFlow
MainControlFlow ..> FileUtils

MainControlFlow --> if any(file.path.endswith(ext) for ext in include_list)
MainControlFlow --> not any(ignored_file in file.path for ignored_file in ignore_list)

if any(file.path.endswith(ext) for ext in include_list) ..> File
not any(ignored_file in file.path for ignored_file in ignore_list) ..> File

if any(file.path.endswith(ext) for ext in include_list) ==> open
not any(ignored_file in file.path for ignored_file in ignore_list) ==> open

open --> with open(file.abspath, 'r') as f
open --> try..except

with open(file.abspath, 'r') as f --> included_files[file.path] = f.read()
try..except --> print
try..except --> logger.warning
try..except --> FileNotFoundError

print --> "Diagnostic print statement"

Logger <--: logger
logger ..> MainControlFlow

included_files[file.path] = f.read() ==> logger.info(f"Included file: {file.path}")

FileNotFoundError ..> print
FileNotFoundError ..> logger.warning

Logger <--: logger
logger ..> MainControlFlow

print --> "Ignoring missing file: {file.path}"
logger.warning(f"Ignoring missing file: {file.path}") ==> print

MainControlFlow --> return included_files

MainControlFlow --> Logger.error

Logger ..> MainControlFlow

note bottom: Catch all exceptions\nand raise ValueError as needed

Logger.error ==> raise ValueError(f"Failed to retrieve code: {str(e)}")
raise ValueError(f"Failed to retrieve code: {str(e)}") --> return included_files

MainControlFlow ..> Logger
Logger ..> raise: ValueError
Logger ..> except: Exception

note left: Calling code as follows:\ninclude_list = ['.py', '.txt']\nignore_list = ['tests', 'temp']\nfiles = ['test.py', 'index.txt', 'app.py', 'tests/utils.py', 'temp/index.txt']\n
note left: Include list: ['.py', '.txt']\nIgnore list: ['tests', 'temp']\nFiles: ['test.py', 'index.txt', 'app.py', 'tests/utils.py', 'temp/index.txt']
@enduml)

        # Generate UML diagrams
        for diagram in config['diagrams']:
            plantuml = PlantUML()
            for file in diagram['files']:
                plantuml.process_file(file)
            plantuml.run(output_directory)

Class Diagram:
@startuml
class MainController
Entity thub_access_token
Entity branch_name
Entity git_repo_url
Entity output_directory

MainController -- thub_access_token : has
MainController -- branch_name : has
MainController -- git_repo_url : has
MainController -- output_directory : has

MainController : -logger
MainController : -temp_dir

note top of MainController
main controller
end note
@enduml

Sequence Diagram:
@startuml
hide footbox
title UML Generation

autonumber

actor User
boundary Controller
control MainController
database Database
participant TryCatch
participant config
participant clone_repo
participant PlantUML

User -> Controller: Submit request
activate Controller
Controller -> MainController: Get parameters
activate MainController
MainController -> MainController: Set default branch name
MainController -> MainController: Check for missing parameters
deactivate MainController
alt Parameters missing
MainController -> TryCatch: Log error
activate TryCatch
TryCatch --> Controller: Return error message
deactivate TryCatch
else Parameters valid
MainController -> TryCatch: Create temporary directory
activate TryCatch
alt Error creating directory
TryCatch --> MainController: Return error message
else Directory created successfully
TryCatch -> MainController: Clone repository
activate MainController
MainController -> Database: Get config file
activate Database
alt Config file not found
Database --> MainController: Return error message
else Config file found
Database -> MainController: Load config
MainController -> MainController: Generate UML diagrams
MainController -> MainController: Process each file in config
MainController -> PlantUML: Generate UML for each file
activate PlantUML
PlantUML -> output_directory: Save UML diagrams
plantuml run
deactivate PlantUML
MainController --> MainController: Return success message
end
deactivate MainController
@endumlt_from_files(included_files)
        
        
@startuml

class TraverseDirectories {
    -repo: Repository
    -temp_dir: String
    -config: Config
    +included_files: Map<String, String>
    +traverse_directories(Repo, String, Config): Map<String, String>
}

class Repository {
    +tree(): Tree
}

class Tree {
    +traverse(): Iterable<TreeItem>
}

class TreeItem {
    -type: String
    -path: String
}

class Config {
    -include: List<String>
}

class Logger {
    +debug(message: String): void
    +info(message: String): void
}

class GenerateContent {
    +generate_content_from_files(files: Map<String, String>): List<String>
}

TraverseDirectories --> Repository
TraverseDirectories --> Config
TraverseDirectories --> Logger
TraverseDirectories --> GenerateContent
TraverseDirectories o-- Map

Repository --> Tree

Tree --> TreeItem

GenerateContent <-- TraverseDirectories

GenerateContent --> Logger
GenerateContent o-- Map

Logger <-- TraverseDirectories
Logger <-- GenerateContent


Config <.. TraverseDirectories
Config <.. GenerateContent

@enduml@enduml

@startuml

class t {
  - included_files
  - output_directory
  + logger
  + final_output_paths
  + git_repo_url
  + temp_dir
  + e
  + t(included_files, output_directory)
  + generate_UML()
}

t..>logger: uses
t-->"output_paths": contains
t-->output_paths: "is a list"
t-->git_repo_url
t-->temp_dir: "contains"
t-->e: "contains"
t-->generate_UML: "calls"
output_paths..>"output_directory": in
git_repo_url-->"Repository": in
e-->500: "returns"
t-->500: "returns"
temp_dir-->"Cleaning up temporary directory": logs
e-->"Error during UML generation:": logs
output_paths-->"Log the path where each UML diagram was saved": logs

generate_UML-->"UML diagram saved at": logs
output_paths..>"Final output paths": in
t-->t(included_files, output_directory): "calls"
t-->{json}: returns
{json}-->"message": in
{json}-->"details": in
{json}-->"Repository": in
{json}-->"Output Paths": in
{json}-->t: returns

@endumlrrent_dir, 'config.json')

@startuml

class Config
    Current_dir : string
    Config_file_path : string
    + get_config() : dict
    + update_config(config) : void

Config --> Current_dir
Config --> Config_file_path
Config --o logger


class Logger
    + log_handler : RotatingFileHandler
    + log_formatter : Formatter
    + logger : Logger
    + set_handler(handler) : void
    + set_formatter(formatter) : void
    + add_handler(handler) : void
    + set_level(level) : void
    + log(msg, level) : void

Logger --o log_handler
Logger --o log_formatter
Logger --o logger


class UmlGenerator
    + config : Config
    + logger : Logger
    + execute() : void
    + generate_uml() : void
    + save_file(content) : void

UmlGenerator --o config
UmlGenerator --o logger

class RequestManager
    + api_url : string
    + config : Config
    + logger : Logger
    + get_umls(concepts) : list
    + process_request(response) : dict
    + send_request(params) : json

RequestManager --o config
RequestManager --o logger

class DOTEnv
    + load_dotenv() : void

DOTEnv --o UmlGenerator

class JsonManager
    + config_file_path : string
    + get_data() : dict
    + update_data(new_data) : void

JsonManager --o Config
JsonManager --o Config_file_path

class OS
    + get_current_dir() : string

OS --o Config
OS --o Current_dir

class Requests
    + get(url) : json

Requests --o RequestManager


@enduml

The diagram shows the classes and their relationships within the code. The JSON and OS classes have been added based on their usage in the code. The DOTEnv class is dependent on the UmlGenerator class as it is used within its code. The Config class is also dependent on the Logger class for handling logging. The UmlGenerator class uses the Config and Logger classes for its functionality, while also using the RequestManager class to handle API requests. All of these classes are used within the main program.Check if the response was successful
    if response.status_code == 200:
        # Save the UML diagram to a file
        with open('diagram.png', 'wb') as f:
            f.write(response.content)
exc

@startuml
class ConfigData {
    - String gitHubAccessToken
    - String local_dir
}
class RequestSender {
    - String url
    - Map headers
    + json_data
    + response
}
note right of ConfigData: read from JSON file
ConfigData -- RequestSender : <m>
RequestSender --|> ConfigData : has-a
note bottom of RequestSender: uses url and headers
@enduml@startuml

class Client {
    - output_dir : String
    + main() : void
}

class Server {
    - response : String
    + getResponse() : String
}

Client o-- Server : makeRequest()
Client o-- Logger : Log exception
Client o-- os : outputDirExist()
Client o-- json : saveResponse()

class Logger {
    - ERROR : String
    + logError(e: Exception) : void
}

Client --> output_dir

@enduml
2024-01-20 21:26:35,394 - INFO - Cleaning up temporary directory
2024-01-20 21:26:35,570 - INFO - 127.0.0.1 - - [20/Jan/2024 21:26:35] "POST /generate-uml HTTP/1.1" 200 -
